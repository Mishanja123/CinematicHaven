{"version":3,"file":"static/js/485.9091ac86.chunk.js","mappings":"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","sources":["../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha.ts","../node_modules/@firebase/auth/src/core/errors.ts","../node_modules/@firebase/auth/src/core/util/log.ts","../node_modules/@firebase/auth/src/core/util/assert.ts","../node_modules/@firebase/auth/src/core/util/location.ts","../node_modules/@firebase/auth/src/core/util/delay.ts","../node_modules/@firebase/auth/src/core/util/navigator.ts","../node_modules/@firebase/auth/src/core/util/emulator.ts","../node_modules/@firebase/auth/src/core/util/fetch_provider.ts","../node_modules/@firebase/auth/src/api/errors.ts","../node_modules/@firebase/auth/src/api/index.ts","../node_modules/@firebase/auth/src/api/authentication/recaptcha.ts","../node_modules/@firebase/auth/src/api/account_management/account.ts","../node_modules/@firebase/auth/src/core/util/time.ts","../node_modules/@firebase/auth/src/core/user/id_token_result.ts","../node_modules/@firebase/auth/src/core/user/invalidation.ts","../node_modules/@firebase/auth/src/core/user/proactive_refresh.ts","../node_modules/@firebase/auth/src/core/user/user_metadata.ts","../node_modules/@firebase/auth/src/core/user/reload.ts","../node_modules/@firebase/auth/src/api/authentication/token.ts","../node_modules/@firebase/auth/src/core/user/token_manager.ts","../node_modules/@firebase/auth/src/core/user/user_impl.ts","../node_modules/@firebase/auth/src/core/util/instantiator.ts","../node_modules/@firebase/auth/src/core/persistence/in_memory.ts","../node_modules/@firebase/auth/src/core/persistence/persistence_user_manager.ts","../node_modules/@firebase/auth/src/core/util/browser.ts","../node_modules/@firebase/auth/src/core/util/version.ts","../node_modules/@firebase/auth/src/core/auth/middleware.ts","../node_modules/@firebase/auth/src/api/password_policy/get_password_policy.ts","../node_modules/@firebase/auth/src/core/auth/password_policy_impl.ts","../node_modules/@firebase/auth/src/core/auth/auth_impl.ts","../node_modules/@firebase/auth/src/platform_browser/load_js.ts","../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_enterprise_verifier.ts","../node_modules/@firebase/auth/src/core/auth/initialize.ts","../node_modules/@firebase/auth/src/core/auth/emulator.ts","../node_modules/@firebase/auth/src/core/credentials/auth_credential.ts","../node_modules/@firebase/auth/src/api/account_management/email_and_password.ts","../node_modules/@firebase/auth/src/api/authentication/email_and_password.ts","../node_modules/@firebase/auth/src/api/authentication/email_link.ts","../node_modules/@firebase/auth/src/core/credentials/email.ts","../node_modules/@firebase/auth/src/api/authentication/idp.ts","../node_modules/@firebase/auth/src/core/credentials/oauth.ts","../node_modules/@firebase/auth/src/api/authentication/sms.ts","../node_modules/@firebase/auth/src/core/credentials/phone.ts","../node_modules/@firebase/auth/src/core/action_code_url.ts","../node_modules/@firebase/auth/src/core/providers/email.ts","../node_modules/@firebase/auth/src/core/providers/federated.ts","../node_modules/@firebase/auth/src/core/providers/oauth.ts","../node_modules/@firebase/auth/src/core/providers/facebook.ts","../node_modules/@firebase/auth/src/core/providers/google.ts","../node_modules/@firebase/auth/src/core/providers/github.ts","../node_modules/@firebase/auth/src/core/credentials/saml.ts","../node_modules/@firebase/auth/src/core/providers/twitter.ts","../node_modules/@firebase/auth/src/api/authentication/sign_up.ts","../node_modules/@firebase/auth/src/core/user/user_credential_impl.ts","../node_modules/@firebase/auth/src/core/strategies/anonymous.ts","../node_modules/@firebase/auth/src/mfa/mfa_error.ts","../node_modules/@firebase/auth/src/core/user/link_unlink.ts","../node_modules/@firebase/auth/src/core/user/reauthenticate.ts","../node_modules/@firebase/auth/src/core/strategies/credential.ts","../node_modules/@firebase/auth/src/core/strategies/email_and_password.ts","../node_modules/@firebase/auth/src/core/index.ts","../node_modules/@firebase/auth/src/api/account_management/mfa.ts","../node_modules/@firebase/auth/src/mfa/mfa_user.ts","../node_modules/@firebase/auth/src/core/persistence/index.ts","../node_modules/@firebase/auth/src/platform_browser/persistence/browser.ts","../node_modules/@firebase/auth/src/platform_browser/persistence/local_storage.ts","../node_modules/@firebase/auth/src/platform_browser/persistence/session_storage.ts","../node_modules/@firebase/auth/src/platform_browser/messagechannel/promise.ts","../node_modules/@firebase/auth/src/platform_browser/messagechannel/receiver.ts","../node_modules/@firebase/auth/src/core/util/event_id.ts","../node_modules/@firebase/auth/src/platform_browser/messagechannel/sender.ts","../node_modules/@firebase/auth/src/platform_browser/auth_window.ts","../node_modules/@firebase/auth/src/platform_browser/util/worker.ts","../node_modules/@firebase/auth/src/platform_browser/persistence/indexed_db.ts","../node_modules/@firebase/auth/src/api/authentication/mfa.ts","../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_loader.ts","../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_verifier.ts","../node_modules/@firebase/auth/src/platform_browser/strategies/phone.ts","../node_modules/@firebase/auth/src/platform_browser/providers/phone.ts","../node_modules/@firebase/auth/src/core/util/resolver.ts","../node_modules/@firebase/auth/src/core/strategies/idp.ts","../node_modules/@firebase/auth/src/core/strategies/abstract_popup_redirect_operation.ts","../node_modules/@firebase/auth/src/platform_browser/strategies/popup.ts","../node_modules/@firebase/auth/src/core/strategies/redirect.ts","../node_modules/@firebase/auth/src/platform_browser/strategies/redirect.ts","../node_modules/@firebase/auth/src/core/auth/auth_event_manager.ts","../node_modules/@firebase/auth/src/api/project_config/get_project_config.ts","../node_modules/@firebase/auth/src/core/util/validate_origin.ts","../node_modules/@firebase/auth/src/platform_browser/iframe/gapi.ts","../node_modules/@firebase/auth/src/platform_browser/iframe/iframe.ts","../node_modules/@firebase/auth/src/platform_browser/util/popup.ts","../node_modules/@firebase/auth/src/core/util/handler.ts","../node_modules/@firebase/auth/src/platform_browser/popup_redirect.ts","../node_modules/@firebase/auth/src/mfa/mfa_assertion.ts","../node_modules/@firebase/auth/src/platform_browser/mfa/assertions/phone.ts","../node_modules/@firebase/auth/src/mfa/assertions/totp.ts","../node_modules/@firebase/auth/src/core/auth/firebase_internal.ts","../node_modules/@firebase/auth/src/platform_browser/index.ts","../node_modules/@firebase/auth/src/core/auth/register.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RecaptchaParameters } from '../../model/public_types';\nimport { GetRecaptchaConfigResponse } from '../../api/authentication/recaptcha';\n\n// reCAPTCHA v2 interface\nexport interface Recaptcha {\n  render: (container: HTMLElement, parameters: RecaptchaParameters) => number;\n  getResponse: (id: number) => string;\n  execute: (id: number) => unknown;\n  reset: (id: number) => unknown;\n}\n\nexport function isV2(\n  grecaptcha: Recaptcha | GreCAPTCHA | undefined\n): grecaptcha is Recaptcha {\n  return (\n    grecaptcha !== undefined &&\n    (grecaptcha as Recaptcha).getResponse !== undefined\n  );\n}\n\n// reCAPTCHA Enterprise & v3 shared interface\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\n// reCAPTCHA Enterprise interface\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n\nexport function isEnterprise(\n  grecaptcha: Recaptcha | GreCAPTCHA | undefined\n): grecaptcha is GreCAPTCHATopLevel {\n  return (\n    grecaptcha !== undefined &&\n    (grecaptcha as GreCAPTCHATopLevel).enterprise !== undefined\n  );\n}\n\n// TODO(chuanr): Replace this with the AuthWindow after resolving the dependency issue in Node.js env.\ndeclare global {\n  interface Window {\n    grecaptcha?: Recaptcha | GreCAPTCHATopLevel;\n  }\n}\n\nexport class RecaptchaConfig {\n  /**\n   * The reCAPTCHA site key.\n   */\n  siteKey: string = '';\n\n  /**\n   * The reCAPTCHA enablement status of the {@link EmailAuthProvider} for the current tenant.\n   */\n  emailPasswordEnabled: boolean = false;\n\n  constructor(response: GetRecaptchaConfigResponse) {\n    if (response.recaptchaKey === undefined) {\n      throw new Error('recaptchaKey undefined');\n    }\n    // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n    this.siteKey = response.recaptchaKey.split('/')[3];\n    this.emailPasswordEnabled = response.recaptchaEnforcementState.some(\n      enforcementState =>\n        enforcementState.provider === 'EMAIL_PASSWORD_PROVIDER' &&\n        enforcementState.enforcementState !== 'OFF'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorMap, User } from '../model/public_types';\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nimport { IdTokenMfaResponse } from '../api/authentication/mfa';\nimport { AppName } from '../model/auth';\nimport { AuthCredential } from './credentials';\n\n/**\n * Enumeration of Firebase Auth error codes.\n *\n * @internal\n */\nexport const enum AuthErrorCode {\n  ADMIN_ONLY_OPERATION = 'admin-restricted-operation',\n  ARGUMENT_ERROR = 'argument-error',\n  APP_NOT_AUTHORIZED = 'app-not-authorized',\n  APP_NOT_INSTALLED = 'app-not-installed',\n  CAPTCHA_CHECK_FAILED = 'captcha-check-failed',\n  CODE_EXPIRED = 'code-expired',\n  CORDOVA_NOT_READY = 'cordova-not-ready',\n  CORS_UNSUPPORTED = 'cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE = 'credential-already-in-use',\n  CREDENTIAL_MISMATCH = 'custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN = 'requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH = 'dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED = 'dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION = 'email-change-needs-verification',\n  EMAIL_EXISTS = 'email-already-in-use',\n  EMULATOR_CONFIG_FAILED = 'emulator-config-failed',\n  EXPIRED_OOB_CODE = 'expired-action-code',\n  EXPIRED_POPUP_REQUEST = 'cancelled-popup-request',\n  INTERNAL_ERROR = 'internal-error',\n  INVALID_API_KEY = 'invalid-api-key',\n  INVALID_APP_CREDENTIAL = 'invalid-app-credential',\n  INVALID_APP_ID = 'invalid-app-id',\n  INVALID_AUTH = 'invalid-user-token',\n  INVALID_AUTH_EVENT = 'invalid-auth-event',\n  INVALID_CERT_HASH = 'invalid-cert-hash',\n  INVALID_CODE = 'invalid-verification-code',\n  INVALID_CONTINUE_URI = 'invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION = 'invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN = 'invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN = 'invalid-dynamic-link-domain',\n  INVALID_EMAIL = 'invalid-email',\n  INVALID_EMULATOR_SCHEME = 'invalid-emulator-scheme',\n  INVALID_IDP_RESPONSE = 'invalid-credential',\n  INVALID_MESSAGE_PAYLOAD = 'invalid-message-payload',\n  INVALID_MFA_SESSION = 'invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID = 'invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER = 'invalid-oauth-provider',\n  INVALID_OOB_CODE = 'invalid-action-code',\n  INVALID_ORIGIN = 'unauthorized-domain',\n  INVALID_PASSWORD = 'wrong-password',\n  INVALID_PERSISTENCE = 'invalid-persistence-type',\n  INVALID_PHONE_NUMBER = 'invalid-phone-number',\n  INVALID_PROVIDER_ID = 'invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL = 'invalid-recipient-email',\n  INVALID_SENDER = 'invalid-sender',\n  INVALID_SESSION_INFO = 'invalid-verification-id',\n  INVALID_TENANT_ID = 'invalid-tenant-id',\n  LOGIN_BLOCKED = 'login-blocked',\n  MFA_INFO_NOT_FOUND = 'multi-factor-info-not-found',\n  MFA_REQUIRED = 'multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME = 'missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL = 'missing-app-credential',\n  MISSING_AUTH_DOMAIN = 'auth-domain-config-required',\n  MISSING_CODE = 'missing-verification-code',\n  MISSING_CONTINUE_URI = 'missing-continue-uri',\n  MISSING_IFRAME_START = 'missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID = 'missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE = 'missing-or-invalid-nonce',\n  MISSING_MFA_INFO = 'missing-multi-factor-info',\n  MISSING_MFA_SESSION = 'missing-multi-factor-session',\n  MISSING_PHONE_NUMBER = 'missing-phone-number',\n  MISSING_PASSWORD = 'missing-password',\n  MISSING_SESSION_INFO = 'missing-verification-id',\n  MODULE_DESTROYED = 'app-deleted',\n  NEED_CONFIRMATION = 'account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED = 'network-request-failed',\n  NULL_USER = 'null-user',\n  NO_AUTH_EVENT = 'no-auth-event',\n  NO_SUCH_PROVIDER = 'no-such-provider',\n  OPERATION_NOT_ALLOWED = 'operation-not-allowed',\n  OPERATION_NOT_SUPPORTED = 'operation-not-supported-in-this-environment',\n  POPUP_BLOCKED = 'popup-blocked',\n  POPUP_CLOSED_BY_USER = 'popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED = 'provider-already-linked',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER = 'redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING = 'redirect-operation-pending',\n  REJECTED_CREDENTIAL = 'rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED = 'second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED = 'maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH = 'tenant-id-mismatch',\n  TIMEOUT = 'timeout',\n  TOKEN_EXPIRED = 'user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER = 'too-many-requests',\n  UNAUTHORIZED_DOMAIN = 'unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR = 'unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE = 'unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION = 'unsupported-tenant-operation',\n  UNVERIFIED_EMAIL = 'unverified-email',\n  USER_CANCELLED = 'user-cancelled',\n  USER_DELETED = 'user-not-found',\n  USER_DISABLED = 'user-disabled',\n  USER_MISMATCH = 'user-mismatch',\n  USER_SIGNED_OUT = 'user-signed-out',\n  WEAK_PASSWORD = 'weak-password',\n  WEB_STORAGE_UNSUPPORTED = 'web-storage-unsupported',\n  ALREADY_INITIALIZED = 'already-initialized',\n  RECAPTCHA_NOT_ENABLED = 'recaptcha-not-enabled',\n  MISSING_RECAPTCHA_TOKEN = 'missing-recaptcha-token',\n  INVALID_RECAPTCHA_TOKEN = 'invalid-recaptcha-token',\n  INVALID_RECAPTCHA_ACTION = 'invalid-recaptcha-action',\n  MISSING_CLIENT_TYPE = 'missing-client-type',\n  MISSING_RECAPTCHA_VERSION = 'missing-recaptcha-version',\n  INVALID_RECAPTCHA_VERSION = 'invalid-recaptcha-version',\n  INVALID_REQ_TYPE = 'invalid-req-type',\n  UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION = 'unsupported-password-policy-schema-version',\n  PASSWORD_DOES_NOT_MEET_REQUIREMENTS = 'password-does-not-meet-requirements'\n}\n\nfunction _debugErrorMap(): ErrorMap<AuthErrorCode> {\n  return {\n    [AuthErrorCode.ADMIN_ONLY_OPERATION]:\n      'This operation is restricted to administrators only.',\n    [AuthErrorCode.ARGUMENT_ERROR]: '',\n    [AuthErrorCode.APP_NOT_AUTHORIZED]:\n      \"This app, identified by the domain where it's hosted, is not \" +\n      'authorized to use Firebase Authentication with the provided API key. ' +\n      'Review your key configuration in the Google API console.',\n    [AuthErrorCode.APP_NOT_INSTALLED]:\n      'The requested mobile application corresponding to the identifier (' +\n      'Android package name or iOS bundle ID) provided is not installed on ' +\n      'this device.',\n    [AuthErrorCode.CAPTCHA_CHECK_FAILED]:\n      'The reCAPTCHA response token provided is either invalid, expired, ' +\n      'already used or the domain associated with it does not match the list ' +\n      'of whitelisted domains.',\n    [AuthErrorCode.CODE_EXPIRED]:\n      'The SMS code has expired. Please re-send the verification code to try ' +\n      'again.',\n    [AuthErrorCode.CORDOVA_NOT_READY]: 'Cordova framework is not ready.',\n    [AuthErrorCode.CORS_UNSUPPORTED]: 'This browser is not supported.',\n    [AuthErrorCode.CREDENTIAL_ALREADY_IN_USE]:\n      'This credential is already associated with a different user account.',\n    [AuthErrorCode.CREDENTIAL_MISMATCH]:\n      'The custom token corresponds to a different audience.',\n    [AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN]:\n      'This operation is sensitive and requires recent authentication. Log in ' +\n      'again before retrying this request.',\n    [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]:\n      'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n      'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n      'starting any other Firebase SDK.',\n    [AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED]:\n      'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +\n      'conditions.',\n    [AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION]:\n      'Multi-factor users must always have a verified email.',\n    [AuthErrorCode.EMAIL_EXISTS]:\n      'The email address is already in use by another account.',\n    [AuthErrorCode.EMULATOR_CONFIG_FAILED]:\n      'Auth instance has already been used to make a network call. Auth can ' +\n      'no longer be configured to use the emulator. Try calling ' +\n      '\"connectAuthEmulator()\" sooner.',\n    [AuthErrorCode.EXPIRED_OOB_CODE]: 'The action code has expired.',\n    [AuthErrorCode.EXPIRED_POPUP_REQUEST]:\n      'This operation has been cancelled due to another conflicting popup being opened.',\n    [AuthErrorCode.INTERNAL_ERROR]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.INVALID_APP_CREDENTIAL]:\n      'The phone verification request contains an invalid application verifier.' +\n      ' The reCAPTCHA token response is either invalid or expired.',\n    [AuthErrorCode.INVALID_APP_ID]:\n      'The mobile app identifier is not registed for the current project.',\n    [AuthErrorCode.INVALID_AUTH]:\n      \"This user's credential isn't valid for this project. This can happen \" +\n      \"if the user's token has been tampered with, or if the user isn't for \" +\n      'the project associated with this API key.',\n    [AuthErrorCode.INVALID_AUTH_EVENT]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.INVALID_CODE]:\n      'The SMS verification code used to create the phone auth credential is ' +\n      'invalid. Please resend the verification code sms and be sure to use the ' +\n      'verification code provided by the user.',\n    [AuthErrorCode.INVALID_CONTINUE_URI]:\n      'The continue URL provided in the request is invalid.',\n    [AuthErrorCode.INVALID_CORDOVA_CONFIGURATION]:\n      'The following Cordova plugins must be installed to enable OAuth sign-in: ' +\n      'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +\n      'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +\n      'cordova-plugin-customurlscheme.',\n    [AuthErrorCode.INVALID_CUSTOM_TOKEN]:\n      'The custom token format is incorrect. Please check the documentation.',\n    [AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN]:\n      'The provided dynamic link domain is not configured or authorized for the current project.',\n    [AuthErrorCode.INVALID_EMAIL]: 'The email address is badly formatted.',\n    [AuthErrorCode.INVALID_EMULATOR_SCHEME]:\n      'Emulator URL must start with a valid scheme (http:// or https://).',\n    [AuthErrorCode.INVALID_API_KEY]:\n      'Your API key is invalid, please check you have copied it correctly.',\n    [AuthErrorCode.INVALID_CERT_HASH]:\n      'The SHA-1 certificate hash provided is invalid.',\n    [AuthErrorCode.INVALID_IDP_RESPONSE]:\n      'The supplied auth credential is malformed or has expired.',\n    [AuthErrorCode.INVALID_MESSAGE_PAYLOAD]:\n      'The email template corresponding to this action contains invalid characters in its message. ' +\n      'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [AuthErrorCode.INVALID_MFA_SESSION]:\n      'The request does not contain a valid proof of first factor successful sign-in.',\n    [AuthErrorCode.INVALID_OAUTH_PROVIDER]:\n      'EmailAuthProvider is not supported for this operation. This operation ' +\n      'only supports OAuth providers.',\n    [AuthErrorCode.INVALID_OAUTH_CLIENT_ID]:\n      'The OAuth client ID provided is either invalid or does not match the ' +\n      'specified API key.',\n    [AuthErrorCode.INVALID_ORIGIN]:\n      'This domain is not authorized for OAuth operations for your Firebase ' +\n      'project. Edit the list of authorized domains from the Firebase console.',\n    [AuthErrorCode.INVALID_OOB_CODE]:\n      'The action code is invalid. This can happen if the code is malformed, ' +\n      'expired, or has already been used.',\n    [AuthErrorCode.INVALID_PASSWORD]:\n      'The password is invalid or the user does not have a password.',\n    [AuthErrorCode.INVALID_PERSISTENCE]:\n      'The specified persistence type is invalid. It can only be local, session or none.',\n    [AuthErrorCode.INVALID_PHONE_NUMBER]:\n      'The format of the phone number provided is incorrect. Please enter the ' +\n      'phone number in a format that can be parsed into E.164 format. E.164 ' +\n      'phone numbers are written in the format [+][country code][subscriber ' +\n      'number including area code].',\n    [AuthErrorCode.INVALID_PROVIDER_ID]:\n      'The specified provider ID is invalid.',\n    [AuthErrorCode.INVALID_RECIPIENT_EMAIL]:\n      'The email corresponding to this action failed to send as the provided ' +\n      'recipient email address is invalid.',\n    [AuthErrorCode.INVALID_SENDER]:\n      'The email template corresponding to this action contains an invalid sender email or name. ' +\n      'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [AuthErrorCode.INVALID_SESSION_INFO]:\n      'The verification ID used to create the phone auth credential is invalid.',\n    [AuthErrorCode.INVALID_TENANT_ID]:\n      \"The Auth instance's tenant ID is invalid.\",\n    [AuthErrorCode.LOGIN_BLOCKED]:\n      'Login blocked by user-provided method: {$originalMessage}',\n    [AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME]:\n      'An Android Package Name must be provided if the Android App is required to be installed.',\n    [AuthErrorCode.MISSING_AUTH_DOMAIN]:\n      'Be sure to include authDomain when calling firebase.initializeApp(), ' +\n      'by following the instructions in the Firebase console.',\n    [AuthErrorCode.MISSING_APP_CREDENTIAL]:\n      'The phone verification request is missing an application verifier ' +\n      'assertion. A reCAPTCHA response token needs to be provided.',\n    [AuthErrorCode.MISSING_CODE]:\n      'The phone auth credential was created with an empty SMS verification code.',\n    [AuthErrorCode.MISSING_CONTINUE_URI]:\n      'A continue URL must be provided in the request.',\n    [AuthErrorCode.MISSING_IFRAME_START]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.MISSING_IOS_BUNDLE_ID]:\n      'An iOS Bundle ID must be provided if an App Store ID is provided.',\n    [AuthErrorCode.MISSING_OR_INVALID_NONCE]:\n      'The request does not contain a valid nonce. This can occur if the ' +\n      'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +\n      'in the ID token payload.',\n    [AuthErrorCode.MISSING_PASSWORD]: 'A non-empty password must be provided',\n    [AuthErrorCode.MISSING_MFA_INFO]:\n      'No second factor identifier is provided.',\n    [AuthErrorCode.MISSING_MFA_SESSION]:\n      'The request is missing proof of first factor successful sign-in.',\n    [AuthErrorCode.MISSING_PHONE_NUMBER]:\n      'To send verification codes, provide a phone number for the recipient.',\n    [AuthErrorCode.MISSING_SESSION_INFO]:\n      'The phone auth credential was created with an empty verification ID.',\n    [AuthErrorCode.MODULE_DESTROYED]:\n      'This instance of FirebaseApp has been deleted.',\n    [AuthErrorCode.MFA_INFO_NOT_FOUND]:\n      'The user does not have a second factor matching the identifier provided.',\n    [AuthErrorCode.MFA_REQUIRED]:\n      'Proof of ownership of a second factor is required to complete sign-in.',\n    [AuthErrorCode.NEED_CONFIRMATION]:\n      'An account already exists with the same email address but different ' +\n      'sign-in credentials. Sign in using a provider associated with this ' +\n      'email address.',\n    [AuthErrorCode.NETWORK_REQUEST_FAILED]:\n      'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n    [AuthErrorCode.NO_AUTH_EVENT]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.NO_SUCH_PROVIDER]:\n      'User was not linked to an account with the given provider.',\n    [AuthErrorCode.NULL_USER]:\n      'A null user object was provided as the argument for an operation which ' +\n      'requires a non-null user object.',\n    [AuthErrorCode.OPERATION_NOT_ALLOWED]:\n      'The given sign-in provider is disabled for this Firebase project. ' +\n      'Enable it in the Firebase console, under the sign-in method tab of the ' +\n      'Auth section.',\n    [AuthErrorCode.OPERATION_NOT_SUPPORTED]:\n      'This operation is not supported in the environment this application is ' +\n      'running on. \"location.protocol\" must be http, https or chrome-extension' +\n      ' and web storage must be enabled.',\n    [AuthErrorCode.POPUP_BLOCKED]:\n      'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n    [AuthErrorCode.POPUP_CLOSED_BY_USER]:\n      'The popup has been closed by the user before finalizing the operation.',\n    [AuthErrorCode.PROVIDER_ALREADY_LINKED]:\n      'User can only be linked to one identity for the given provider.',\n    [AuthErrorCode.QUOTA_EXCEEDED]:\n      \"The project's quota for this operation has been exceeded.\",\n    [AuthErrorCode.REDIRECT_CANCELLED_BY_USER]:\n      'The redirect operation has been cancelled by the user before finalizing.',\n    [AuthErrorCode.REDIRECT_OPERATION_PENDING]:\n      'A redirect sign-in operation is already pending.',\n    [AuthErrorCode.REJECTED_CREDENTIAL]:\n      'The request contains malformed or mismatching credentials.',\n    [AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED]:\n      'The second factor is already enrolled on this account.',\n    [AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED]:\n      'The maximum allowed number of second factors on a user has been exceeded.',\n    [AuthErrorCode.TENANT_ID_MISMATCH]:\n      \"The provided tenant ID does not match the Auth instance's tenant ID\",\n    [AuthErrorCode.TIMEOUT]: 'The operation has timed out.',\n    [AuthErrorCode.TOKEN_EXPIRED]:\n      \"The user's credential is no longer valid. The user must sign in again.\",\n    [AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER]:\n      'We have blocked all requests from this device due to unusual activity. ' +\n      'Try again later.',\n    [AuthErrorCode.UNAUTHORIZED_DOMAIN]:\n      'The domain of the continue URL is not whitelisted.  Please whitelist ' +\n      'the domain in the Firebase console.',\n    [AuthErrorCode.UNSUPPORTED_FIRST_FACTOR]:\n      'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n    [AuthErrorCode.UNSUPPORTED_PERSISTENCE]:\n      'The current environment does not support the specified persistence type.',\n    [AuthErrorCode.UNSUPPORTED_TENANT_OPERATION]:\n      'This operation is not supported in a multi-tenant context.',\n    [AuthErrorCode.UNVERIFIED_EMAIL]:\n      'The operation requires a verified email.',\n    [AuthErrorCode.USER_CANCELLED]:\n      'The user did not grant your application the permissions it requested.',\n    [AuthErrorCode.USER_DELETED]:\n      'There is no user record corresponding to this identifier. The user may ' +\n      'have been deleted.',\n    [AuthErrorCode.USER_DISABLED]:\n      'The user account has been disabled by an administrator.',\n    [AuthErrorCode.USER_MISMATCH]:\n      'The supplied credentials do not correspond to the previously signed in user.',\n    [AuthErrorCode.USER_SIGNED_OUT]: '',\n    [AuthErrorCode.WEAK_PASSWORD]:\n      'The password must be 6 characters long or more.',\n    [AuthErrorCode.WEB_STORAGE_UNSUPPORTED]:\n      'This browser is not supported or 3rd party cookies and data may be disabled.',\n    [AuthErrorCode.ALREADY_INITIALIZED]:\n      'initializeAuth() has already been called with ' +\n      'different options. To avoid this error, call initializeAuth() with the ' +\n      'same options as when it was originally called, or call getAuth() to return the' +\n      ' already initialized instance.',\n    [AuthErrorCode.MISSING_RECAPTCHA_TOKEN]:\n      'The reCAPTCHA token is missing when sending request to the backend.',\n    [AuthErrorCode.INVALID_RECAPTCHA_TOKEN]:\n      'The reCAPTCHA token is invalid when sending request to the backend.',\n    [AuthErrorCode.INVALID_RECAPTCHA_ACTION]:\n      'The reCAPTCHA action is invalid when sending request to the backend.',\n    [AuthErrorCode.RECAPTCHA_NOT_ENABLED]:\n      'reCAPTCHA Enterprise integration is not enabled for this project.',\n    [AuthErrorCode.MISSING_CLIENT_TYPE]:\n      'The reCAPTCHA client type is missing when sending request to the backend.',\n    [AuthErrorCode.MISSING_RECAPTCHA_VERSION]:\n      'The reCAPTCHA version is missing when sending request to the backend.',\n    [AuthErrorCode.INVALID_REQ_TYPE]: 'Invalid request parameters.',\n    [AuthErrorCode.INVALID_RECAPTCHA_VERSION]:\n      'The reCAPTCHA version is invalid when sending request to the backend.',\n    [AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION]:\n      'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n    [AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS]:\n      'The password does not meet the requirements.'\n  };\n}\n\nexport interface ErrorMapRetriever extends AuthErrorMap {\n  (): ErrorMap<AuthErrorCode>;\n}\n\nfunction _prodErrorMap(): ErrorMap<AuthErrorCode> {\n  // We will include this one message in the prod error map since by the very\n  // nature of this error, developers will never be able to see the message\n  // using the debugErrorMap (which is installed during auth initialization).\n  return {\n    [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]:\n      'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n      'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n      'starting any other Firebase SDK.'\n  } as ErrorMap<AuthErrorCode>;\n}\n\n/**\n * A verbose error map with detailed descriptions for most error codes.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nexport const debugErrorMap: AuthErrorMap = _debugErrorMap;\n\n/**\n * A minimal error map with all verbose error messages stripped.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nexport const prodErrorMap: AuthErrorMap = _prodErrorMap;\n\nexport interface NamedErrorParams {\n  appName: AppName;\n  credential?: AuthCredential;\n  email?: string;\n  phoneNumber?: string;\n  tenantId?: string;\n  user?: User;\n  _serverResponse?: object;\n}\n\n/**\n * @internal\n */\ntype GenericAuthErrorParams = {\n  [key in Exclude<\n    AuthErrorCode,\n    | AuthErrorCode.ARGUMENT_ERROR\n    | AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH\n    | AuthErrorCode.INTERNAL_ERROR\n    | AuthErrorCode.MFA_REQUIRED\n    | AuthErrorCode.NO_AUTH_EVENT\n    | AuthErrorCode.OPERATION_NOT_SUPPORTED\n  >]: {\n    appName?: AppName;\n    email?: string;\n    phoneNumber?: string;\n    message?: string;\n  };\n};\n\n/**\n * @internal\n */\nexport interface AuthErrorParams extends GenericAuthErrorParams {\n  [AuthErrorCode.ARGUMENT_ERROR]: { appName?: AppName };\n  [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]: { appName?: AppName };\n  [AuthErrorCode.INTERNAL_ERROR]: { appName?: AppName };\n  [AuthErrorCode.LOGIN_BLOCKED]: {\n    appName?: AppName;\n    originalMessage?: string;\n  };\n  [AuthErrorCode.OPERATION_NOT_SUPPORTED]: { appName?: AppName };\n  [AuthErrorCode.NO_AUTH_EVENT]: { appName?: AppName };\n  [AuthErrorCode.MFA_REQUIRED]: {\n    appName: AppName;\n    _serverResponse: IdTokenMfaResponse;\n  };\n  [AuthErrorCode.INVALID_CORDOVA_CONFIGURATION]: {\n    appName: AppName;\n    missingPlugin?: string;\n  };\n}\n\nexport const _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory<\n  AuthErrorCode,\n  AuthErrorParams\n>('auth', 'Firebase', _prodErrorMap());\n\n/**\n * A map of potential `Auth` error codes, for easier comparison with errors\n * thrown by the SDK.\n *\n * @remarks\n * Note that you can't tree-shake individual keys\n * in the map, so by using the map you might substantially increase your\n * bundle size.\n *\n * @public\n */\nexport const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n  ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n  ARGUMENT_ERROR: 'auth/argument-error',\n  APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n  APP_NOT_INSTALLED: 'auth/app-not-installed',\n  CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n  CODE_EXPIRED: 'auth/code-expired',\n  CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n  CORS_UNSUPPORTED: 'auth/cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n  CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n  EMAIL_EXISTS: 'auth/email-already-in-use',\n  EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n  EXPIRED_OOB_CODE: 'auth/expired-action-code',\n  EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n  INTERNAL_ERROR: 'auth/internal-error',\n  INVALID_API_KEY: 'auth/invalid-api-key',\n  INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n  INVALID_APP_ID: 'auth/invalid-app-id',\n  INVALID_AUTH: 'auth/invalid-user-token',\n  INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n  INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n  INVALID_CODE: 'auth/invalid-verification-code',\n  INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n  INVALID_EMAIL: 'auth/invalid-email',\n  INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n  INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n  INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n  INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n  INVALID_OOB_CODE: 'auth/invalid-action-code',\n  INVALID_ORIGIN: 'auth/unauthorized-domain',\n  INVALID_PASSWORD: 'auth/wrong-password',\n  INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n  INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n  INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n  INVALID_SENDER: 'auth/invalid-sender',\n  INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n  INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n  MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n  MFA_REQUIRED: 'auth/multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n  MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n  MISSING_CODE: 'auth/missing-verification-code',\n  MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n  MISSING_IFRAME_START: 'auth/missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n  MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n  MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n  MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n  MISSING_SESSION_INFO: 'auth/missing-verification-id',\n  MODULE_DESTROYED: 'auth/app-deleted',\n  NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n  NULL_USER: 'auth/null-user',\n  NO_AUTH_EVENT: 'auth/no-auth-event',\n  NO_SUCH_PROVIDER: 'auth/no-such-provider',\n  OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n  OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n  POPUP_BLOCKED: 'auth/popup-blocked',\n  POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n  QUOTA_EXCEEDED: 'auth/quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n  REJECTED_CREDENTIAL: 'auth/rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n  TIMEOUT: 'auth/timeout',\n  TOKEN_EXPIRED: 'auth/user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n  UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n  UNVERIFIED_EMAIL: 'auth/unverified-email',\n  USER_CANCELLED: 'auth/user-cancelled',\n  USER_DELETED: 'auth/user-not-found',\n  USER_DISABLED: 'auth/user-disabled',\n  USER_MISMATCH: 'auth/user-mismatch',\n  USER_SIGNED_OUT: 'auth/user-signed-out',\n  WEAK_PASSWORD: 'auth/weak-password',\n  WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n  ALREADY_INITIALIZED: 'auth/already-initialized',\n  RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n  MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n  INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n  INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n  MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n  MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n  INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n  INVALID_REQ_TYPE: 'auth/invalid-req-type'\n} as const;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SDK_VERSION } from '@firebase/app';\n\nexport { LogLevel };\n\nconst logClient = new Logger('@firebase/auth');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function _getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\nexport function _setLogLevel(newLevel: LogLevel): void {\n  logClient.logLevel = newLevel;\n}\n\nexport function _logDebug(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    logClient.debug(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function _logWarn(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function _logError(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth } from '../../model/public_types';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  _DEFAULT_AUTH_ERROR_FACTORY,\n  AuthErrorCode,\n  AuthErrorParams,\n  prodErrorMap,\n  ErrorMapRetriever\n} from '../errors';\nimport { _logError } from './log';\n\ntype AuthErrorListParams<K> = K extends keyof AuthErrorParams\n  ? [AuthErrorParams[K]]\n  : [];\ntype LessAppName<K extends AuthErrorCode> = Omit<AuthErrorParams[K], 'appName'>;\n\n/**\n * Unconditionally fails, throwing a developer facing INTERNAL_ERROR\n *\n * @example\n * ```javascript\n * fail(auth, AuthErrorCode.MFA_REQUIRED);  // Error: the MFA_REQUIRED error needs more params than appName\n * fail(auth, AuthErrorCode.MFA_REQUIRED, {serverResponse});  // Compiles\n * fail(AuthErrorCode.INTERNAL_ERROR);  // Compiles; internal error does not need appName\n * fail(AuthErrorCode.USER_DELETED);  // Error: USER_DELETED requires app name\n * fail(auth, AuthErrorCode.USER_DELETED);  // Compiles; USER_DELETED _only_ needs app name\n * ```\n *\n * @param appName App name for tagging the error\n * @throws FirebaseError\n */\nexport function _fail<K extends AuthErrorCode>(\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): never;\nexport function _fail<K extends AuthErrorCode>(\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): never;\nexport function _fail<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): never {\n  throw createErrorInternal(authOrCode, ...rest);\n}\n\nexport function _createError<K extends AuthErrorCode>(\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): FirebaseError;\nexport function _createError<K extends AuthErrorCode>(\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): FirebaseError;\nexport function _createError<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): FirebaseError {\n  return createErrorInternal(authOrCode, ...rest);\n}\n\nexport function _errorWithCustomMessage(\n  auth: Auth,\n  code: AuthErrorCode,\n  message: string\n): FirebaseError {\n  const errorMap = {\n    ...(prodErrorMap as ErrorMapRetriever)(),\n    [code]: message\n  };\n  const factory = new ErrorFactory<AuthErrorCode, AuthErrorParams>(\n    'auth',\n    'Firebase',\n    errorMap\n  );\n  return factory.create(code, {\n    appName: auth.name\n  });\n}\n\nexport function _assertInstanceOf(\n  auth: Auth,\n  object: object,\n  instance: unknown\n): void {\n  const constructorInstance = instance as { new (...args: unknown[]): unknown };\n  if (!(object instanceof constructorInstance)) {\n    if (constructorInstance.name !== object.constructor.name) {\n      _fail(auth, AuthErrorCode.ARGUMENT_ERROR);\n    }\n\n    throw _errorWithCustomMessage(\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR,\n      `Type of ${object.constructor.name} does not match expected instance.` +\n        `Did you pass a reference from a different Auth SDK?`\n    );\n  }\n}\n\nfunction createErrorInternal<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): FirebaseError {\n  if (typeof authOrCode !== 'string') {\n    const code = rest[0] as K;\n    const fullParams = [...rest.slice(1)] as AuthErrorListParams<K>;\n    if (fullParams[0]) {\n      fullParams[0].appName = authOrCode.name;\n    }\n\n    return (authOrCode as AuthInternal)._errorFactory.create(\n      code,\n      ...fullParams\n    );\n  }\n\n  return _DEFAULT_AUTH_ERROR_FACTORY.create(\n    authOrCode,\n    ...(rest as AuthErrorListParams<K>)\n  );\n}\n\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): asserts assertion;\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): asserts assertion;\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): asserts assertion {\n  if (!assertion) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n}\n\n// We really do want to accept literally any function type here\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype TypeExpectation = Function | string | MapType;\n\ninterface MapType extends Record<string, TypeExpectation | Optional> {}\n\nclass Optional {\n  constructor(readonly type: TypeExpectation) {}\n}\n\nexport function opt(type: TypeExpectation): Optional {\n  return new Optional(type);\n}\n\n/**\n * Asserts the runtime types of arguments. The 'expected' field can be one of\n * a class, a string (representing a \"typeof\" call), or a record map of name\n * to type. Furthermore, the opt() function can be used to mark a field as\n * optional. For example:\n *\n * function foo(auth: Auth, profile: {displayName?: string}, update = false) {\n *   assertTypes(arguments, [AuthImpl, {displayName: opt('string')}, opt('boolean')]);\n * }\n *\n * opt() can be used for any type:\n * function foo(auth?: Auth) {\n *   assertTypes(arguments, [opt(AuthImpl)]);\n * }\n *\n * The string types can be or'd together, and you can use \"null\" as well (note\n * that typeof null === 'object'; this is an edge case). For example:\n *\n * function foo(profile: {displayName?: string | null}) {\n *   assertTypes(arguments, [{displayName: opt('string|null')}]);\n * }\n *\n * @param args\n * @param expected\n */\nexport function assertTypes(\n  args: Omit<IArguments, 'callee'>,\n  ...expected: Array<TypeExpectation | Optional>\n): void {\n  if (args.length > expected.length) {\n    _fail(AuthErrorCode.ARGUMENT_ERROR, {});\n  }\n\n  for (let i = 0; i < expected.length; i++) {\n    let expect = expected[i];\n    const arg = args[i];\n\n    if (expect instanceof Optional) {\n      // If the arg is undefined, then it matches \"optional\" and we can move to\n      // the next arg\n      if (typeof arg === 'undefined') {\n        continue;\n      }\n      expect = expect.type;\n    }\n\n    if (typeof expect === 'string') {\n      // Handle the edge case for null because typeof null === 'object'\n      if (expect.includes('null') && arg === null) {\n        continue;\n      }\n\n      const required = expect.split('|');\n      _assert(required.includes(typeof arg), AuthErrorCode.ARGUMENT_ERROR, {});\n    } else if (typeof expect === 'object') {\n      // Recursively check record arguments\n      const record = arg as Record<string, unknown>;\n      const map = expect as MapType;\n      const keys = Object.keys(expect);\n\n      assertTypes(\n        keys.map(k => record[k]),\n        ...keys.map(k => map[k])\n      );\n    } else {\n      _assert(arg instanceof expect, AuthErrorCode.ARGUMENT_ERROR, {});\n    }\n  }\n}\n\n/**\n * Unconditionally fails, throwing an internal error with the given message.\n *\n * @param failure type of failure encountered\n * @throws Error\n */\nexport function debugFail(failure: string): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message = `INTERNAL ASSERTION FAILED: ` + failure;\n  _logError(message);\n\n  // NOTE: We don't use FirebaseError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * @param assertion\n * @param message\n */\nexport function debugAssert(\n  assertion: unknown,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    debugFail(message);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function _getCurrentUrl(): string {\n  return (typeof self !== 'undefined' && self.location?.href) || '';\n}\n\nexport function _isHttpOrHttps(): boolean {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n\nexport function _getCurrentScheme(): string | null {\n  return (typeof self !== 'undefined' && self.location?.protocol) || null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isMobileCordova, isReactNative } from '@firebase/util';\nimport { _isOnline } from './navigator';\nimport { debugAssert } from './assert';\n\nexport const enum DelayMin {\n  OFFLINE = 5000\n}\n\n/**\n * A structure to help pick between a range of long and short delay durations\n * depending on the current environment. In general, the long delay is used for\n * mobile environments whereas short delays are used for desktop environments.\n */\nexport class Delay {\n  // The default value for the offline delay timeout in ms.\n\n  private readonly isMobile: boolean;\n  constructor(\n    private readonly shortDelay: number,\n    private readonly longDelay: number\n  ) {\n    // Internal error when improperly initialized.\n    debugAssert(\n      longDelay > shortDelay,\n      'Short delay should be less than long delay!'\n    );\n    this.isMobile = isMobileCordova() || isReactNative();\n  }\n\n  get(): number {\n    if (!_isOnline()) {\n      // Pick the shorter timeout.\n      return Math.min(DelayMin.OFFLINE, this.shortDelay);\n    }\n    // If running in a mobile environment, return the long delay, otherwise\n    // return the short delay.\n    // This could be improved in the future to dynamically change based on other\n    // variables instead of just reading the current environment.\n    return this.isMobile ? this.longDelay : this.shortDelay;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isBrowserExtension } from '@firebase/util';\nimport { _isHttpOrHttps } from './location';\n\n/**\n * Determine whether the browser is working online\n */\nexport function _isOnline(): boolean {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator &&\n    'onLine' in navigator &&\n    typeof navigator.onLine === 'boolean' &&\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)\n  ) {\n    return navigator.onLine;\n  }\n  // If we can't determine the state, assume it is online.\n  return true;\n}\n\nexport function _getUserLanguage(): string | null {\n  if (typeof navigator === 'undefined') {\n    return null;\n  }\n  const navigatorLanguage: NavigatorLanguage = navigator;\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language ||\n    // Couldn't determine language.\n    null\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConfigInternal } from '../../model/auth';\nimport { debugAssert } from './assert';\n\nexport function _emulatorUrl(config: ConfigInternal, path?: string): string {\n  debugAssert(config.emulator, 'Emulator should always be set here');\n  const { url } = config.emulator;\n\n  if (!path) {\n    return url;\n  }\n\n  return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugFail } from './assert';\n\nexport class FetchProvider {\n  private static fetchImpl: typeof fetch | null;\n  private static headersImpl: typeof Headers | null;\n  private static responseImpl: typeof Response | null;\n\n  static initialize(\n    fetchImpl: typeof fetch,\n    headersImpl?: typeof Headers,\n    responseImpl?: typeof Response\n  ): void {\n    this.fetchImpl = fetchImpl;\n    if (headersImpl) {\n      this.headersImpl = headersImpl;\n    }\n    if (responseImpl) {\n      this.responseImpl = responseImpl;\n    }\n  }\n\n  static fetch(): typeof fetch {\n    if (this.fetchImpl) {\n      return this.fetchImpl;\n    }\n    if (typeof self !== 'undefined' && 'fetch' in self) {\n      return self.fetch;\n    }\n    debugFail(\n      'Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n\n  static headers(): typeof Headers {\n    if (this.headersImpl) {\n      return this.headersImpl;\n    }\n    if (typeof self !== 'undefined' && 'Headers' in self) {\n      return self.Headers;\n    }\n    debugFail(\n      'Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n\n  static response(): typeof Response {\n    if (this.responseImpl) {\n      return this.responseImpl;\n    }\n    if (typeof self !== 'undefined' && 'Response' in self) {\n      return self.Response;\n    }\n    debugFail(\n      'Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../core/errors';\n\n/**\n * Errors that can be returned by the backend\n */\nexport const enum ServerError {\n  ADMIN_ONLY_OPERATION = 'ADMIN_ONLY_OPERATION',\n  BLOCKING_FUNCTION_ERROR_RESPONSE = 'BLOCKING_FUNCTION_ERROR_RESPONSE',\n  CAPTCHA_CHECK_FAILED = 'CAPTCHA_CHECK_FAILED',\n  CORS_UNSUPPORTED = 'CORS_UNSUPPORTED',\n  CREDENTIAL_MISMATCH = 'CREDENTIAL_MISMATCH',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN = 'CREDENTIAL_TOO_OLD_LOGIN_AGAIN',\n  DYNAMIC_LINK_NOT_ACTIVATED = 'DYNAMIC_LINK_NOT_ACTIVATED',\n  EMAIL_CHANGE_NEEDS_VERIFICATION = 'EMAIL_CHANGE_NEEDS_VERIFICATION',\n  EMAIL_EXISTS = 'EMAIL_EXISTS',\n  EMAIL_NOT_FOUND = 'EMAIL_NOT_FOUND',\n  EXPIRED_OOB_CODE = 'EXPIRED_OOB_CODE',\n  FEDERATED_USER_ID_ALREADY_LINKED = 'FEDERATED_USER_ID_ALREADY_LINKED',\n  INVALID_APP_CREDENTIAL = 'INVALID_APP_CREDENTIAL',\n  INVALID_APP_ID = 'INVALID_APP_ID',\n  INVALID_CERT_HASH = 'INVALID_CERT_HASH',\n  INVALID_CODE = 'INVALID_CODE',\n  INVALID_CONTINUE_URI = 'INVALID_CONTINUE_URI',\n  INVALID_CUSTOM_TOKEN = 'INVALID_CUSTOM_TOKEN',\n  INVALID_DYNAMIC_LINK_DOMAIN = 'INVALID_DYNAMIC_LINK_DOMAIN',\n  INVALID_EMAIL = 'INVALID_EMAIL',\n  INVALID_ID_TOKEN = 'INVALID_ID_TOKEN',\n  INVALID_IDP_RESPONSE = 'INVALID_IDP_RESPONSE',\n  INVALID_IDENTIFIER = 'INVALID_IDENTIFIER',\n  INVALID_MESSAGE_PAYLOAD = 'INVALID_MESSAGE_PAYLOAD',\n  INVALID_MFA_PENDING_CREDENTIAL = 'INVALID_MFA_PENDING_CREDENTIAL',\n  INVALID_OAUTH_CLIENT_ID = 'INVALID_OAUTH_CLIENT_ID',\n  INVALID_OOB_CODE = 'INVALID_OOB_CODE',\n  INVALID_PASSWORD = 'INVALID_PASSWORD',\n  INVALID_PENDING_TOKEN = 'INVALID_PENDING_TOKEN',\n  INVALID_PHONE_NUMBER = 'INVALID_PHONE_NUMBER',\n  INVALID_PROVIDER_ID = 'INVALID_PROVIDER_ID',\n  INVALID_RECIPIENT_EMAIL = 'INVALID_RECIPIENT_EMAIL',\n  INVALID_SENDER = 'INVALID_SENDER',\n  INVALID_SESSION_INFO = 'INVALID_SESSION_INFO',\n  INVALID_TEMPORARY_PROOF = 'INVALID_TEMPORARY_PROOF',\n  INVALID_TENANT_ID = 'INVALID_TENANT_ID',\n  MFA_ENROLLMENT_NOT_FOUND = 'MFA_ENROLLMENT_NOT_FOUND',\n  MISSING_ANDROID_PACKAGE_NAME = 'MISSING_ANDROID_PACKAGE_NAME',\n  MISSING_APP_CREDENTIAL = 'MISSING_APP_CREDENTIAL',\n  MISSING_CODE = 'MISSING_CODE',\n  MISSING_CONTINUE_URI = 'MISSING_CONTINUE_URI',\n  MISSING_CUSTOM_TOKEN = 'MISSING_CUSTOM_TOKEN',\n  MISSING_IOS_BUNDLE_ID = 'MISSING_IOS_BUNDLE_ID',\n  MISSING_MFA_ENROLLMENT_ID = 'MISSING_MFA_ENROLLMENT_ID',\n  MISSING_MFA_PENDING_CREDENTIAL = 'MISSING_MFA_PENDING_CREDENTIAL',\n  MISSING_OOB_CODE = 'MISSING_OOB_CODE',\n  MISSING_OR_INVALID_NONCE = 'MISSING_OR_INVALID_NONCE',\n  MISSING_PASSWORD = 'MISSING_PASSWORD',\n  MISSING_REQ_TYPE = 'MISSING_REQ_TYPE',\n  MISSING_PHONE_NUMBER = 'MISSING_PHONE_NUMBER',\n  MISSING_SESSION_INFO = 'MISSING_SESSION_INFO',\n  OPERATION_NOT_ALLOWED = 'OPERATION_NOT_ALLOWED',\n  PASSWORD_LOGIN_DISABLED = 'PASSWORD_LOGIN_DISABLED',\n  QUOTA_EXCEEDED = 'QUOTA_EXCEEDED',\n  RESET_PASSWORD_EXCEED_LIMIT = 'RESET_PASSWORD_EXCEED_LIMIT',\n  REJECTED_CREDENTIAL = 'REJECTED_CREDENTIAL',\n  SECOND_FACTOR_EXISTS = 'SECOND_FACTOR_EXISTS',\n  SECOND_FACTOR_LIMIT_EXCEEDED = 'SECOND_FACTOR_LIMIT_EXCEEDED',\n  SESSION_EXPIRED = 'SESSION_EXPIRED',\n  TENANT_ID_MISMATCH = 'TENANT_ID_MISMATCH',\n  TOKEN_EXPIRED = 'TOKEN_EXPIRED',\n  TOO_MANY_ATTEMPTS_TRY_LATER = 'TOO_MANY_ATTEMPTS_TRY_LATER',\n  UNSUPPORTED_FIRST_FACTOR = 'UNSUPPORTED_FIRST_FACTOR',\n  UNSUPPORTED_TENANT_OPERATION = 'UNSUPPORTED_TENANT_OPERATION',\n  UNAUTHORIZED_DOMAIN = 'UNAUTHORIZED_DOMAIN',\n  UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL',\n  USER_CANCELLED = 'USER_CANCELLED',\n  USER_DISABLED = 'USER_DISABLED',\n  USER_NOT_FOUND = 'USER_NOT_FOUND',\n  WEAK_PASSWORD = 'WEAK_PASSWORD',\n  RECAPTCHA_NOT_ENABLED = 'RECAPTCHA_NOT_ENABLED',\n  MISSING_RECAPTCHA_TOKEN = 'MISSING_RECAPTCHA_TOKEN',\n  INVALID_RECAPTCHA_TOKEN = 'INVALID_RECAPTCHA_TOKEN',\n  INVALID_RECAPTCHA_ACTION = 'INVALID_RECAPTCHA_ACTION',\n  MISSING_CLIENT_TYPE = 'MISSING_CLIENT_TYPE',\n  MISSING_RECAPTCHA_VERSION = 'MISSING_RECAPTCHA_VERSION',\n  INVALID_RECAPTCHA_VERSION = 'INVALID_RECAPTCHA_VERSION',\n  INVALID_REQ_TYPE = 'INVALID_REQ_TYPE',\n  PASSWORD_DOES_NOT_MEET_REQUIREMENTS = 'PASSWORD_DOES_NOT_MEET_REQUIREMENTS'\n}\n\n/**\n * API Response in the event of an error\n */\nexport interface JsonError {\n  error: {\n    code: number;\n    message: string;\n    errors?: [\n      {\n        message: ServerError;\n        domain: string;\n        reason: string;\n      }\n    ];\n  };\n}\n\n/**\n * Type definition for a map from server errors to developer visible errors\n */\nexport declare type ServerErrorMap<ApiError extends string> = {\n  readonly [K in ApiError]: AuthErrorCode;\n};\n\n/**\n * Map from errors returned by the server to errors to developer visible errors\n */\nexport const SERVER_ERROR_MAP: Partial<ServerErrorMap<ServerError>> = {\n  // Custom token errors.\n  [ServerError.CREDENTIAL_MISMATCH]: AuthErrorCode.CREDENTIAL_MISMATCH,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_CUSTOM_TOKEN]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Create Auth URI errors.\n  [ServerError.INVALID_IDENTIFIER]: AuthErrorCode.INVALID_EMAIL,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_CONTINUE_URI]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Sign in with email and password errors (some apply to sign up too).\n  [ServerError.INVALID_PASSWORD]: AuthErrorCode.INVALID_PASSWORD,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_PASSWORD]: AuthErrorCode.MISSING_PASSWORD,\n\n  // Sign up with email and password errors.\n  [ServerError.EMAIL_EXISTS]: AuthErrorCode.EMAIL_EXISTS,\n  [ServerError.PASSWORD_LOGIN_DISABLED]: AuthErrorCode.OPERATION_NOT_ALLOWED,\n\n  // Verify assertion for sign in with credential errors:\n  [ServerError.INVALID_IDP_RESPONSE]: AuthErrorCode.INVALID_IDP_RESPONSE,\n  [ServerError.INVALID_PENDING_TOKEN]: AuthErrorCode.INVALID_IDP_RESPONSE,\n  [ServerError.FEDERATED_USER_ID_ALREADY_LINKED]:\n    AuthErrorCode.CREDENTIAL_ALREADY_IN_USE,\n\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_REQ_TYPE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Send Password reset email errors:\n  [ServerError.EMAIL_NOT_FOUND]: AuthErrorCode.USER_DELETED,\n  [ServerError.RESET_PASSWORD_EXCEED_LIMIT]:\n    AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER,\n\n  [ServerError.EXPIRED_OOB_CODE]: AuthErrorCode.EXPIRED_OOB_CODE,\n  [ServerError.INVALID_OOB_CODE]: AuthErrorCode.INVALID_OOB_CODE,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_OOB_CODE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Operations that require ID token in request:\n  [ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN]:\n    AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN,\n  [ServerError.INVALID_ID_TOKEN]: AuthErrorCode.INVALID_AUTH,\n  [ServerError.TOKEN_EXPIRED]: AuthErrorCode.TOKEN_EXPIRED,\n  [ServerError.USER_NOT_FOUND]: AuthErrorCode.TOKEN_EXPIRED,\n\n  // Other errors.\n  [ServerError.TOO_MANY_ATTEMPTS_TRY_LATER]:\n    AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER,\n  [ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS]:\n    AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS,\n\n  // Phone Auth related errors.\n  [ServerError.INVALID_CODE]: AuthErrorCode.INVALID_CODE,\n  [ServerError.INVALID_SESSION_INFO]: AuthErrorCode.INVALID_SESSION_INFO,\n  [ServerError.INVALID_TEMPORARY_PROOF]: AuthErrorCode.INVALID_IDP_RESPONSE,\n  [ServerError.MISSING_SESSION_INFO]: AuthErrorCode.MISSING_SESSION_INFO,\n  [ServerError.SESSION_EXPIRED]: AuthErrorCode.CODE_EXPIRED,\n\n  // Other action code errors when additional settings passed.\n  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n  // This is OK as this error will be caught by client side validation.\n  [ServerError.MISSING_ANDROID_PACKAGE_NAME]:\n    AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME,\n  [ServerError.UNAUTHORIZED_DOMAIN]: AuthErrorCode.UNAUTHORIZED_DOMAIN,\n\n  // getProjectConfig errors when clientId is passed.\n  [ServerError.INVALID_OAUTH_CLIENT_ID]: AuthErrorCode.INVALID_OAUTH_CLIENT_ID,\n\n  // User actions (sign-up or deletion) disabled errors.\n  [ServerError.ADMIN_ONLY_OPERATION]: AuthErrorCode.ADMIN_ONLY_OPERATION,\n\n  // Multi factor related errors.\n  [ServerError.INVALID_MFA_PENDING_CREDENTIAL]:\n    AuthErrorCode.INVALID_MFA_SESSION,\n  [ServerError.MFA_ENROLLMENT_NOT_FOUND]: AuthErrorCode.MFA_INFO_NOT_FOUND,\n  [ServerError.MISSING_MFA_ENROLLMENT_ID]: AuthErrorCode.MISSING_MFA_INFO,\n  [ServerError.MISSING_MFA_PENDING_CREDENTIAL]:\n    AuthErrorCode.MISSING_MFA_SESSION,\n  [ServerError.SECOND_FACTOR_EXISTS]:\n    AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED,\n  [ServerError.SECOND_FACTOR_LIMIT_EXCEEDED]:\n    AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED,\n\n  // Blocking functions related errors.\n  [ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Recaptcha related errors.\n  [ServerError.RECAPTCHA_NOT_ENABLED]: AuthErrorCode.RECAPTCHA_NOT_ENABLED,\n  [ServerError.MISSING_RECAPTCHA_TOKEN]: AuthErrorCode.MISSING_RECAPTCHA_TOKEN,\n  [ServerError.INVALID_RECAPTCHA_TOKEN]: AuthErrorCode.INVALID_RECAPTCHA_TOKEN,\n  [ServerError.INVALID_RECAPTCHA_ACTION]:\n    AuthErrorCode.INVALID_RECAPTCHA_ACTION,\n  [ServerError.MISSING_CLIENT_TYPE]: AuthErrorCode.MISSING_CLIENT_TYPE,\n  [ServerError.MISSING_RECAPTCHA_VERSION]:\n    AuthErrorCode.MISSING_RECAPTCHA_VERSION,\n  [ServerError.INVALID_RECAPTCHA_VERSION]:\n    AuthErrorCode.INVALID_RECAPTCHA_VERSION,\n  [ServerError.INVALID_REQ_TYPE]: AuthErrorCode.INVALID_REQ_TYPE\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError, querystring } from '@firebase/util';\n\nimport { AuthErrorCode, NamedErrorParams } from '../core/errors';\nimport {\n  _createError,\n  _errorWithCustomMessage,\n  _fail\n} from '../core/util/assert';\nimport { Delay } from '../core/util/delay';\nimport { _emulatorUrl } from '../core/util/emulator';\nimport { FetchProvider } from '../core/util/fetch_provider';\nimport { Auth } from '../model/public_types';\nimport { AuthInternal, ConfigInternal } from '../model/auth';\nimport { IdTokenResponse, TaggedWithTokenResponse } from '../model/id_token';\nimport { IdTokenMfaResponse } from './authentication/mfa';\nimport { SERVER_ERROR_MAP, ServerError, ServerErrorMap } from './errors';\n\nexport const enum HttpMethod {\n  POST = 'POST',\n  GET = 'GET'\n}\n\nexport const enum HttpHeader {\n  CONTENT_TYPE = 'Content-Type',\n  X_FIREBASE_LOCALE = 'X-Firebase-Locale',\n  X_CLIENT_VERSION = 'X-Client-Version',\n  X_FIREBASE_GMPID = 'X-Firebase-gmpid',\n  X_FIREBASE_CLIENT = 'X-Firebase-Client',\n  X_FIREBASE_APP_CHECK = 'X-Firebase-AppCheck'\n}\n\nexport const enum Endpoint {\n  CREATE_AUTH_URI = '/v1/accounts:createAuthUri',\n  DELETE_ACCOUNT = '/v1/accounts:delete',\n  RESET_PASSWORD = '/v1/accounts:resetPassword',\n  SIGN_UP = '/v1/accounts:signUp',\n  SIGN_IN_WITH_CUSTOM_TOKEN = '/v1/accounts:signInWithCustomToken',\n  SIGN_IN_WITH_EMAIL_LINK = '/v1/accounts:signInWithEmailLink',\n  SIGN_IN_WITH_IDP = '/v1/accounts:signInWithIdp',\n  SIGN_IN_WITH_PASSWORD = '/v1/accounts:signInWithPassword',\n  SIGN_IN_WITH_PHONE_NUMBER = '/v1/accounts:signInWithPhoneNumber',\n  SEND_VERIFICATION_CODE = '/v1/accounts:sendVerificationCode',\n  SEND_OOB_CODE = '/v1/accounts:sendOobCode',\n  SET_ACCOUNT_INFO = '/v1/accounts:update',\n  GET_ACCOUNT_INFO = '/v1/accounts:lookup',\n  GET_RECAPTCHA_PARAM = '/v1/recaptchaParams',\n  START_MFA_ENROLLMENT = '/v2/accounts/mfaEnrollment:start',\n  FINALIZE_MFA_ENROLLMENT = '/v2/accounts/mfaEnrollment:finalize',\n  START_MFA_SIGN_IN = '/v2/accounts/mfaSignIn:start',\n  FINALIZE_MFA_SIGN_IN = '/v2/accounts/mfaSignIn:finalize',\n  WITHDRAW_MFA = '/v2/accounts/mfaEnrollment:withdraw',\n  GET_PROJECT_CONFIG = '/v1/projects',\n  GET_RECAPTCHA_CONFIG = '/v2/recaptchaConfig',\n  GET_PASSWORD_POLICY = '/v2/passwordPolicy'\n}\n\nexport const enum RecaptchaClientType {\n  WEB = 'CLIENT_TYPE_WEB',\n  ANDROID = 'CLIENT_TYPE_ANDROID',\n  IOS = 'CLIENT_TYPE_IOS'\n}\n\nexport const enum RecaptchaVersion {\n  ENTERPRISE = 'RECAPTCHA_ENTERPRISE'\n}\n\nexport const enum RecaptchaActionName {\n  SIGN_IN_WITH_PASSWORD = 'signInWithPassword',\n  GET_OOB_CODE = 'getOobCode',\n  SIGN_UP_PASSWORD = 'signUpPassword'\n}\n\nexport const DEFAULT_API_TIMEOUT_MS = new Delay(30_000, 60_000);\n\nexport function _addTidIfNecessary<T extends { tenantId?: string }>(\n  auth: Auth,\n  request: T\n): T {\n  if (auth.tenantId && !request.tenantId) {\n    return {\n      ...request,\n      tenantId: auth.tenantId\n    };\n  }\n  return request;\n}\n\nexport async function _performApiRequest<T, V>(\n  auth: Auth,\n  method: HttpMethod,\n  path: Endpoint,\n  request?: T,\n  customErrorMap: Partial<ServerErrorMap<ServerError>> = {}\n): Promise<V> {\n  return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n    let body = {};\n    let params = {};\n    if (request) {\n      if (method === HttpMethod.GET) {\n        params = request;\n      } else {\n        body = {\n          body: JSON.stringify(request)\n        };\n      }\n    }\n\n    const query = querystring({\n      key: auth.config.apiKey,\n      ...params\n    }).slice(1);\n\n    const headers = await (auth as AuthInternal)._getAdditionalHeaders();\n    headers[HttpHeader.CONTENT_TYPE] = 'application/json';\n\n    if (auth.languageCode) {\n      headers[HttpHeader.X_FIREBASE_LOCALE] = auth.languageCode;\n    }\n\n    return FetchProvider.fetch()(\n      _getFinalTarget(auth, auth.config.apiHost, path, query),\n      {\n        method,\n        headers,\n        referrerPolicy: 'no-referrer',\n        ...body\n      }\n    );\n  });\n}\n\nexport async function _performFetchWithErrorHandling<V>(\n  auth: Auth,\n  customErrorMap: Partial<ServerErrorMap<ServerError>>,\n  fetchFn: () => Promise<Response>\n): Promise<V> {\n  (auth as AuthInternal)._canInitEmulator = false;\n  const errorMap = { ...SERVER_ERROR_MAP, ...customErrorMap };\n  try {\n    const networkTimeout = new NetworkTimeout<Response>(auth);\n    const response: Response = await Promise.race<Promise<Response>>([\n      fetchFn(),\n      networkTimeout.promise\n    ]);\n\n    // If we've reached this point, the fetch succeeded and the networkTimeout\n    // didn't throw; clear the network timeout delay so that Node won't hang\n    networkTimeout.clearNetworkTimeout();\n\n    const json = await response.json();\n    if ('needConfirmation' in json) {\n      throw _makeTaggedError(auth, AuthErrorCode.NEED_CONFIRMATION, json);\n    }\n\n    if (response.ok && !('errorMessage' in json)) {\n      return json;\n    } else {\n      const errorMessage = response.ok ? json.errorMessage : json.error.message;\n      const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n      if (serverErrorCode === ServerError.FEDERATED_USER_ID_ALREADY_LINKED) {\n        throw _makeTaggedError(\n          auth,\n          AuthErrorCode.CREDENTIAL_ALREADY_IN_USE,\n          json\n        );\n      } else if (serverErrorCode === ServerError.EMAIL_EXISTS) {\n        throw _makeTaggedError(auth, AuthErrorCode.EMAIL_EXISTS, json);\n      } else if (serverErrorCode === ServerError.USER_DISABLED) {\n        throw _makeTaggedError(auth, AuthErrorCode.USER_DISABLED, json);\n      }\n      const authError =\n        errorMap[serverErrorCode as ServerError] ||\n        (serverErrorCode\n          .toLowerCase()\n          .replace(/[_\\s]+/g, '-') as unknown as AuthErrorCode);\n      if (serverErrorMessage) {\n        throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n      } else {\n        _fail(auth, authError);\n      }\n    }\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      throw e;\n    }\n    // Changing this to a different error code will log user out when there is a network error\n    // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n    // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n    _fail(auth, AuthErrorCode.NETWORK_REQUEST_FAILED, { 'message': String(e) });\n  }\n}\n\nexport async function _performSignInRequest<T, V extends IdTokenResponse>(\n  auth: Auth,\n  method: HttpMethod,\n  path: Endpoint,\n  request?: T,\n  customErrorMap: Partial<ServerErrorMap<ServerError>> = {}\n): Promise<V> {\n  const serverResponse = (await _performApiRequest<T, V | IdTokenMfaResponse>(\n    auth,\n    method,\n    path,\n    request,\n    customErrorMap\n  )) as V;\n  if ('mfaPendingCredential' in serverResponse) {\n    _fail(auth, AuthErrorCode.MFA_REQUIRED, {\n      _serverResponse: serverResponse\n    });\n  }\n\n  return serverResponse;\n}\n\nexport function _getFinalTarget(\n  auth: Auth,\n  host: string,\n  path: string,\n  query: string\n): string {\n  const base = `${host}${path}?${query}`;\n\n  if (!(auth as AuthInternal).config.emulator) {\n    return `${auth.config.apiScheme}://${base}`;\n  }\n\n  return _emulatorUrl(auth.config as ConfigInternal, base);\n}\n\nclass NetworkTimeout<T> {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timer: any | null = null;\n  readonly promise = new Promise<T>((_, reject) => {\n    this.timer = setTimeout(() => {\n      return reject(\n        _createError(this.auth, AuthErrorCode.NETWORK_REQUEST_FAILED)\n      );\n    }, DEFAULT_API_TIMEOUT_MS.get());\n  });\n\n  clearNetworkTimeout(): void {\n    clearTimeout(this.timer);\n  }\n\n  constructor(private readonly auth: Auth) {}\n}\n\ninterface PotentialResponse extends IdTokenResponse {\n  email?: string;\n  phoneNumber?: string;\n}\n\nexport function _makeTaggedError(\n  auth: Auth,\n  code: AuthErrorCode,\n  response: PotentialResponse\n): FirebaseError {\n  const errorParams: NamedErrorParams = {\n    appName: auth.name\n  };\n\n  if (response.email) {\n    errorParams.email = response.email;\n  }\n  if (response.phoneNumber) {\n    errorParams.phoneNumber = response.phoneNumber;\n  }\n\n  const error = _createError(auth, code, errorParams);\n\n  // We know customData is defined on error because errorParams is defined\n  (error.customData! as TaggedWithTokenResponse)._tokenResponse = response;\n  return error;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _performApiRequest,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\ninterface GetRecaptchaParamResponse {\n  recaptchaSiteKey?: string;\n}\n\nexport async function getRecaptchaParams(auth: Auth): Promise<string> {\n  return (\n    (\n      await _performApiRequest<void, GetRecaptchaParamResponse>(\n        auth,\n        HttpMethod.GET,\n        Endpoint.GET_RECAPTCHA_PARAM\n      )\n    ).recaptchaSiteKey || ''\n  );\n}\n\n// The following functions are for reCAPTCHA enterprise integration.\ninterface GetRecaptchaConfigRequest {\n  tenantId?: string;\n  clientType?: RecaptchaClientType;\n  version?: RecaptchaVersion;\n}\n\ninterface RecaptchaEnforcementState {\n  provider: string;\n  enforcementState: string;\n}\n\nexport interface GetRecaptchaConfigResponse {\n  recaptchaKey: string;\n  recaptchaEnforcementState: RecaptchaEnforcementState[];\n}\n\nexport async function getRecaptchaConfig(\n  auth: Auth,\n  request: GetRecaptchaConfigRequest\n): Promise<GetRecaptchaConfigResponse> {\n  return _performApiRequest<\n    GetRecaptchaConfigRequest,\n    GetRecaptchaConfigResponse\n  >(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_RECAPTCHA_CONFIG,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Endpoint, HttpMethod, _performApiRequest } from '../index';\nimport { MfaEnrollment } from './mfa';\nimport { Auth } from '../../model/public_types';\n\nexport interface DeleteAccountRequest {\n  idToken: string;\n}\n\nexport async function deleteAccount(\n  auth: Auth,\n  request: DeleteAccountRequest\n): Promise<void> {\n  return _performApiRequest<DeleteAccountRequest, void>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.DELETE_ACCOUNT,\n    request\n  );\n}\n\nexport interface ProviderUserInfo {\n  providerId: string;\n  rawId?: string;\n  email?: string;\n  displayName?: string;\n  photoUrl?: string;\n  phoneNumber?: string;\n}\n\nexport interface DeleteLinkedAccountsRequest {\n  idToken: string;\n  deleteProvider: string[];\n}\n\nexport interface DeleteLinkedAccountsResponse {\n  providerUserInfo: ProviderUserInfo[];\n}\n\nexport async function deleteLinkedAccounts(\n  auth: Auth,\n  request: DeleteLinkedAccountsRequest\n): Promise<DeleteLinkedAccountsResponse> {\n  return _performApiRequest<\n    DeleteLinkedAccountsRequest,\n    DeleteLinkedAccountsResponse\n  >(auth, HttpMethod.POST, Endpoint.SET_ACCOUNT_INFO, request);\n}\n\nexport interface APIUserInfo {\n  localId?: string;\n  displayName?: string;\n  photoUrl?: string;\n  email?: string;\n  emailVerified?: boolean;\n  phoneNumber?: string;\n  lastLoginAt?: number;\n  createdAt?: number;\n  tenantId?: string;\n  passwordHash?: string;\n  providerUserInfo?: ProviderUserInfo[];\n  mfaInfo?: MfaEnrollment[];\n}\n\nexport interface GetAccountInfoRequest {\n  idToken: string;\n}\n\nexport interface GetAccountInfoResponse {\n  users: APIUserInfo[];\n}\n\nexport async function getAccountInfo(\n  auth: Auth,\n  request: GetAccountInfoRequest\n): Promise<GetAccountInfoResponse> {\n  return _performApiRequest<GetAccountInfoRequest, GetAccountInfoResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.GET_ACCOUNT_INFO,\n    request\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function utcTimestampToDateString(\n  utcTimestamp?: string | number\n): string | undefined {\n  if (!utcTimestamp) {\n    return undefined;\n  }\n  try {\n    // Convert to date object.\n    const date = new Date(Number(utcTimestamp));\n    // Test date is valid.\n    if (!isNaN(date.getTime())) {\n      // Convert to UTC date string.\n      return date.toUTCString();\n    }\n  } catch (e) {\n    // Do nothing. undefined will be returned.\n  }\n  return undefined;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdTokenResult, ParsedToken, User } from '../../model/public_types';\nimport { base64Decode, getModularInstance } from '@firebase/util';\n\nimport { UserInternal } from '../../model/user';\nimport { _assert } from '../util/assert';\nimport { _logError } from '../util/log';\nimport { utcTimestampToDateString } from '../util/time';\nimport { AuthErrorCode } from '../errors';\n\n/**\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport function getIdToken(user: User, forceRefresh = false): Promise<string> {\n  return getModularInstance(user).getIdToken(forceRefresh);\n}\n\n/**\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getIdTokenResult(\n  user: User,\n  forceRefresh = false\n): Promise<IdTokenResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const token = await userInternal.getIdToken(forceRefresh);\n  const claims = _parseToken(token);\n\n  _assert(\n    claims && claims.exp && claims.auth_time && claims.iat,\n    userInternal.auth,\n    AuthErrorCode.INTERNAL_ERROR\n  );\n  const firebase =\n    typeof claims.firebase === 'object' ? claims.firebase : undefined;\n\n  const signInProvider: string | undefined = firebase?.['sign_in_provider'];\n\n  return {\n    claims,\n    token,\n    authTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.auth_time)\n    )!,\n    issuedAtTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.iat)\n    )!,\n    expirationTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.exp)\n    )!,\n    signInProvider: signInProvider || null,\n    signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n  };\n}\n\nfunction secondsStringToMilliseconds(seconds: string): number {\n  return Number(seconds) * 1000;\n}\n\nexport function _parseToken(token: string): ParsedToken | null {\n  const [algorithm, payload, signature] = token.split('.');\n  if (\n    algorithm === undefined ||\n    payload === undefined ||\n    signature === undefined\n  ) {\n    _logError('JWT malformed, contained fewer than 3 sections');\n    return null;\n  }\n\n  try {\n    const decoded = base64Decode(payload);\n    if (!decoded) {\n      _logError('Failed to decode base64 JWT payload');\n      return null;\n    }\n    return JSON.parse(decoded);\n  } catch (e) {\n    _logError(\n      'Caught error parsing JWT payload as JSON',\n      (e as Error)?.toString()\n    );\n    return null;\n  }\n}\n\n/**\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n */\nexport function _tokenExpiresIn(token: string): number {\n  const parsedToken = _parseToken(token);\n  _assert(parsedToken, AuthErrorCode.INTERNAL_ERROR);\n  _assert(typeof parsedToken.exp !== 'undefined', AuthErrorCode.INTERNAL_ERROR);\n  _assert(typeof parsedToken.iat !== 'undefined', AuthErrorCode.INTERNAL_ERROR);\n  return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\n\nexport async function _logoutIfInvalidated<T>(\n  user: UserInternal,\n  promise: Promise<T>,\n  bypassAuthState = false\n): Promise<T> {\n  if (bypassAuthState) {\n    return promise;\n  }\n  try {\n    return await promise;\n  } catch (e) {\n    if (e instanceof FirebaseError && isUserInvalidated(e)) {\n      if (user.auth.currentUser === user) {\n        await user.auth.signOut();\n      }\n    }\n\n    throw e;\n  }\n}\n\nfunction isUserInvalidated({ code }: FirebaseError): boolean {\n  return (\n    code === `auth/${AuthErrorCode.USER_DISABLED}` ||\n    code === `auth/${AuthErrorCode.TOKEN_EXPIRED}`\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\n\n// Refresh the token five minutes before expiration\nexport const enum Duration {\n  OFFSET = 5 * 1000 * 60,\n  RETRY_BACKOFF_MIN = 30 * 1000,\n  RETRY_BACKOFF_MAX = 16 * 60 * 1000\n}\n\nexport class ProactiveRefresh {\n  private isRunning = false;\n\n  // Node timers and browser timers return fundamentally different types.\n  // We don't actually care what the value is but TS won't accept unknown and\n  // we can't cast properly in both environments.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timerId: any | null = null;\n  private errorBackoff = Duration.RETRY_BACKOFF_MIN;\n\n  constructor(private readonly user: UserInternal) {}\n\n  _start(): void {\n    if (this.isRunning) {\n      return;\n    }\n\n    this.isRunning = true;\n    this.schedule();\n  }\n\n  _stop(): void {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.isRunning = false;\n    if (this.timerId !== null) {\n      clearTimeout(this.timerId);\n    }\n  }\n\n  private getInterval(wasError: boolean): number {\n    if (wasError) {\n      const interval = this.errorBackoff;\n      this.errorBackoff = Math.min(\n        this.errorBackoff * 2,\n        Duration.RETRY_BACKOFF_MAX\n      );\n      return interval;\n    } else {\n      // Reset the error backoff\n      this.errorBackoff = Duration.RETRY_BACKOFF_MIN;\n      const expTime = this.user.stsTokenManager.expirationTime ?? 0;\n      const interval = expTime - Date.now() - Duration.OFFSET;\n\n      return Math.max(0, interval);\n    }\n  }\n\n  private schedule(wasError = false): void {\n    if (!this.isRunning) {\n      // Just in case...\n      return;\n    }\n\n    const interval = this.getInterval(wasError);\n    this.timerId = setTimeout(async () => {\n      await this.iteration();\n    }, interval);\n  }\n\n  private async iteration(): Promise<void> {\n    try {\n      await this.user.getIdToken(true);\n    } catch (e) {\n      // Only retry on network errors\n      if (\n        (e as FirebaseError)?.code ===\n        `auth/${AuthErrorCode.NETWORK_REQUEST_FAILED}`\n      ) {\n        this.schedule(/* wasError */ true);\n      }\n\n      return;\n    }\n    this.schedule();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserMetadata as UserMetadataType } from '../../model/public_types';\n\nimport { utcTimestampToDateString } from '../util/time';\n\nexport class UserMetadata implements UserMetadataType {\n  creationTime?: string;\n  lastSignInTime?: string;\n\n  constructor(\n    private createdAt?: string | number,\n    private lastLoginAt?: string | number\n  ) {\n    this._initializeTime();\n  }\n\n  private _initializeTime(): void {\n    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n    this.creationTime = utcTimestampToDateString(this.createdAt);\n  }\n\n  _copy(metadata: UserMetadata): void {\n    this.createdAt = metadata.createdAt;\n    this.lastLoginAt = metadata.lastLoginAt;\n    this._initializeTime();\n  }\n\n  toJSON(): object {\n    return {\n      createdAt: this.createdAt,\n      lastLoginAt: this.lastLoginAt\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User, UserInfo } from '../../model/public_types';\n\nimport {\n  getAccountInfo,\n  ProviderUserInfo\n} from '../../api/account_management/account';\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { UserMetadata } from './user_metadata';\nimport { getModularInstance } from '@firebase/util';\n\nexport async function _reloadWithoutSaving(user: UserInternal): Promise<void> {\n  const auth = user.auth;\n  const idToken = await user.getIdToken();\n  const response = await _logoutIfInvalidated(\n    user,\n    getAccountInfo(auth, { idToken })\n  );\n\n  _assert(response?.users.length, auth, AuthErrorCode.INTERNAL_ERROR);\n\n  const coreAccount = response.users[0];\n\n  user._notifyReloadListener(coreAccount);\n\n  const newProviderData = coreAccount.providerUserInfo?.length\n    ? extractProviderData(coreAccount.providerUserInfo)\n    : [];\n\n  const providerData = mergeProviderData(user.providerData, newProviderData);\n\n  // Preserves the non-nonymous status of the stored user, even if no more\n  // credentials (federated or email/password) are linked to the user. If\n  // the user was previously anonymous, then use provider data to update.\n  // On the other hand, if it was not anonymous before, it should never be\n  // considered anonymous now.\n  const oldIsAnonymous = user.isAnonymous;\n  const newIsAnonymous =\n    !(user.email && coreAccount.passwordHash) && !providerData?.length;\n  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n\n  const updates: Partial<UserInternal> = {\n    uid: coreAccount.localId,\n    displayName: coreAccount.displayName || null,\n    photoURL: coreAccount.photoUrl || null,\n    email: coreAccount.email || null,\n    emailVerified: coreAccount.emailVerified || false,\n    phoneNumber: coreAccount.phoneNumber || null,\n    tenantId: coreAccount.tenantId || null,\n    providerData,\n    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n    isAnonymous\n  };\n\n  Object.assign(user, updates);\n}\n\n/**\n * Reloads user account data, if signed in.\n *\n * @param user - The user.\n *\n * @public\n */\nexport async function reload(user: User): Promise<void> {\n  const userInternal: UserInternal = getModularInstance(user) as UserInternal;\n  await _reloadWithoutSaving(userInternal);\n\n  // Even though the current user hasn't changed, update\n  // current user will trigger a persistence update w/ the\n  // new info.\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  userInternal.auth._notifyListenersIfCurrent(userInternal);\n}\n\nfunction mergeProviderData(\n  original: UserInfo[],\n  newData: UserInfo[]\n): UserInfo[] {\n  const deduped = original.filter(\n    o => !newData.some(n => n.providerId === o.providerId)\n  );\n  return [...deduped, ...newData];\n}\n\nfunction extractProviderData(providers: ProviderUserInfo[]): UserInfo[] {\n  return providers.map(({ providerId, ...provider }) => {\n    return {\n      providerId,\n      uid: provider.rawId || '',\n      displayName: provider.displayName || null,\n      email: provider.email || null,\n      phoneNumber: provider.phoneNumber || null,\n      photoURL: provider.photoUrl || null\n    };\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable camelcase */\n\nimport { querystring } from '@firebase/util';\n\nimport {\n  _getFinalTarget,\n  _performFetchWithErrorHandling,\n  HttpMethod,\n  HttpHeader\n} from '../index';\nimport { FetchProvider } from '../../core/util/fetch_provider';\nimport { Auth } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\n\nexport const enum Endpoint {\n  TOKEN = '/v1/token'\n}\n\n/** The server responses with snake_case; we convert to camelCase */\ninterface RequestStsTokenServerResponse {\n  access_token: string;\n  expires_in: string;\n  refresh_token: string;\n}\n\nexport interface RequestStsTokenResponse {\n  accessToken: string;\n  expiresIn: string;\n  refreshToken: string;\n}\n\nexport async function requestStsToken(\n  auth: Auth,\n  refreshToken: string\n): Promise<RequestStsTokenResponse> {\n  const response =\n    await _performFetchWithErrorHandling<RequestStsTokenServerResponse>(\n      auth,\n      {},\n      async () => {\n        const body = querystring({\n          'grant_type': 'refresh_token',\n          'refresh_token': refreshToken\n        }).slice(1);\n        const { tokenApiHost, apiKey } = auth.config;\n        const url = _getFinalTarget(\n          auth,\n          tokenApiHost,\n          Endpoint.TOKEN,\n          `key=${apiKey}`\n        );\n\n        const headers = await (auth as AuthInternal)._getAdditionalHeaders();\n        headers[HttpHeader.CONTENT_TYPE] = 'application/x-www-form-urlencoded';\n\n        return FetchProvider.fetch()(url, {\n          method: HttpMethod.POST,\n          headers,\n          body\n        });\n      }\n    );\n\n  // The response comes back in snake_case. Convert to camel:\n  return {\n    accessToken: response.access_token,\n    expiresIn: response.expires_in,\n    refreshToken: response.refresh_token\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\nimport { requestStsToken } from '../../api/authentication/token';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { PersistedBlob } from '../persistence';\nimport { _assert, debugFail } from '../util/assert';\nimport { _tokenExpiresIn } from './id_token_result';\n\n/**\n * The number of milliseconds before the official expiration time of a token\n * to refresh that token, to provide a buffer for RPCs to complete.\n */\nexport const enum Buffer {\n  TOKEN_REFRESH = 30_000\n}\n\n/**\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nexport class StsTokenManager {\n  refreshToken: string | null = null;\n  accessToken: string | null = null;\n  expirationTime: number | null = null;\n\n  get isExpired(): boolean {\n    return (\n      !this.expirationTime ||\n      Date.now() > this.expirationTime - Buffer.TOKEN_REFRESH\n    );\n  }\n\n  updateFromServerResponse(\n    response: IdTokenResponse | FinalizeMfaResponse\n  ): void {\n    _assert(response.idToken, AuthErrorCode.INTERNAL_ERROR);\n    _assert(\n      typeof response.idToken !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    _assert(\n      typeof response.refreshToken !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const expiresIn =\n      'expiresIn' in response && typeof response.expiresIn !== 'undefined'\n        ? Number(response.expiresIn)\n        : _tokenExpiresIn(response.idToken);\n    this.updateTokensAndExpiration(\n      response.idToken,\n      response.refreshToken,\n      expiresIn\n    );\n  }\n\n  async getToken(\n    auth: AuthInternal,\n    forceRefresh = false\n  ): Promise<string | null> {\n    _assert(\n      !this.accessToken || this.refreshToken,\n      auth,\n      AuthErrorCode.TOKEN_EXPIRED\n    );\n\n    if (!forceRefresh && this.accessToken && !this.isExpired) {\n      return this.accessToken;\n    }\n\n    if (this.refreshToken) {\n      await this.refresh(auth, this.refreshToken!);\n      return this.accessToken;\n    }\n\n    return null;\n  }\n\n  clearRefreshToken(): void {\n    this.refreshToken = null;\n  }\n\n  private async refresh(auth: AuthInternal, oldToken: string): Promise<void> {\n    const { accessToken, refreshToken, expiresIn } = await requestStsToken(\n      auth,\n      oldToken\n    );\n    this.updateTokensAndExpiration(\n      accessToken,\n      refreshToken,\n      Number(expiresIn)\n    );\n  }\n\n  private updateTokensAndExpiration(\n    accessToken: string,\n    refreshToken: string,\n    expiresInSec: number\n  ): void {\n    this.refreshToken = refreshToken || null;\n    this.accessToken = accessToken || null;\n    this.expirationTime = Date.now() + expiresInSec * 1000;\n  }\n\n  static fromJSON(appName: string, object: PersistedBlob): StsTokenManager {\n    const { refreshToken, accessToken, expirationTime } = object;\n\n    const manager = new StsTokenManager();\n    if (refreshToken) {\n      _assert(typeof refreshToken === 'string', AuthErrorCode.INTERNAL_ERROR, {\n        appName\n      });\n      manager.refreshToken = refreshToken;\n    }\n    if (accessToken) {\n      _assert(typeof accessToken === 'string', AuthErrorCode.INTERNAL_ERROR, {\n        appName\n      });\n      manager.accessToken = accessToken;\n    }\n    if (expirationTime) {\n      _assert(\n        typeof expirationTime === 'number',\n        AuthErrorCode.INTERNAL_ERROR,\n        {\n          appName\n        }\n      );\n      manager.expirationTime = expirationTime;\n    }\n    return manager;\n  }\n\n  toJSON(): object {\n    return {\n      refreshToken: this.refreshToken,\n      accessToken: this.accessToken,\n      expirationTime: this.expirationTime\n    };\n  }\n\n  _assign(stsTokenManager: StsTokenManager): void {\n    this.accessToken = stsTokenManager.accessToken;\n    this.refreshToken = stsTokenManager.refreshToken;\n    this.expirationTime = stsTokenManager.expirationTime;\n  }\n\n  _clone(): StsTokenManager {\n    return Object.assign(new StsTokenManager(), this.toJSON());\n  }\n\n  _performRefresh(): never {\n    return debugFail('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdTokenResult } from '../../model/public_types';\nimport { NextFn } from '@firebase/util';\n\nimport {\n  APIUserInfo,\n  deleteAccount\n} from '../../api/account_management/account';\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport {\n  MutableUserInfo,\n  UserInternal,\n  UserParameters\n} from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { PersistedBlob } from '../persistence';\nimport { _assert } from '../util/assert';\nimport { getIdTokenResult } from './id_token_result';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { ProactiveRefresh } from './proactive_refresh';\nimport { _reloadWithoutSaving, reload } from './reload';\nimport { StsTokenManager } from './token_manager';\nimport { UserMetadata } from './user_metadata';\nimport { ProviderId } from '../../model/enums';\n\nfunction assertStringOrUndefined(\n  assertion: unknown,\n  appName: string\n): asserts assertion is string | undefined {\n  _assert(\n    typeof assertion === 'string' || typeof assertion === 'undefined',\n    AuthErrorCode.INTERNAL_ERROR,\n    { appName }\n  );\n}\n\nexport class UserImpl implements UserInternal {\n  // For the user object, provider is always Firebase.\n  readonly providerId = ProviderId.FIREBASE;\n  stsTokenManager: StsTokenManager;\n  // Last known accessToken so we know when it changes\n  private accessToken: string | null;\n\n  uid: string;\n  auth: AuthInternal;\n  emailVerified: boolean;\n  isAnonymous: boolean;\n  tenantId: string | null;\n  readonly metadata: UserMetadata;\n  providerData: MutableUserInfo[];\n\n  // Optional fields from UserInfo\n  displayName: string | null;\n  email: string | null;\n  phoneNumber: string | null;\n  photoURL: string | null;\n\n  _redirectEventId?: string;\n  private readonly proactiveRefresh = new ProactiveRefresh(this);\n\n  constructor({ uid, auth, stsTokenManager, ...opt }: UserParameters) {\n    this.uid = uid;\n    this.auth = auth;\n    this.stsTokenManager = stsTokenManager;\n    this.accessToken = stsTokenManager.accessToken;\n    this.displayName = opt.displayName || null;\n    this.email = opt.email || null;\n    this.emailVerified = opt.emailVerified || false;\n    this.phoneNumber = opt.phoneNumber || null;\n    this.photoURL = opt.photoURL || null;\n    this.isAnonymous = opt.isAnonymous || false;\n    this.tenantId = opt.tenantId || null;\n    this.providerData = opt.providerData ? [...opt.providerData] : [];\n    this.metadata = new UserMetadata(\n      opt.createdAt || undefined,\n      opt.lastLoginAt || undefined\n    );\n  }\n\n  async getIdToken(forceRefresh?: boolean): Promise<string> {\n    const accessToken = await _logoutIfInvalidated(\n      this,\n      this.stsTokenManager.getToken(this.auth, forceRefresh)\n    );\n    _assert(accessToken, this.auth, AuthErrorCode.INTERNAL_ERROR);\n\n    if (this.accessToken !== accessToken) {\n      this.accessToken = accessToken;\n      await this.auth._persistUserIfCurrent(this);\n      this.auth._notifyListenersIfCurrent(this);\n    }\n\n    return accessToken;\n  }\n\n  getIdTokenResult(forceRefresh?: boolean): Promise<IdTokenResult> {\n    return getIdTokenResult(this, forceRefresh);\n  }\n\n  reload(): Promise<void> {\n    return reload(this);\n  }\n\n  private reloadUserInfo: APIUserInfo | null = null;\n  private reloadListener: NextFn<APIUserInfo> | null = null;\n\n  _assign(user: UserInternal): void {\n    if (this === user) {\n      return;\n    }\n    _assert(this.uid === user.uid, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.displayName = user.displayName;\n    this.photoURL = user.photoURL;\n    this.email = user.email;\n    this.emailVerified = user.emailVerified;\n    this.phoneNumber = user.phoneNumber;\n    this.isAnonymous = user.isAnonymous;\n    this.tenantId = user.tenantId;\n    this.providerData = user.providerData.map(userInfo => ({ ...userInfo }));\n    this.metadata._copy(user.metadata);\n    this.stsTokenManager._assign(user.stsTokenManager);\n  }\n\n  _clone(auth: AuthInternal): UserInternal {\n    const newUser = new UserImpl({\n      ...this,\n      auth,\n      stsTokenManager: this.stsTokenManager._clone()\n    });\n    newUser.metadata._copy(this.metadata);\n    return newUser;\n  }\n\n  _onReload(callback: NextFn<APIUserInfo>): void {\n    // There should only ever be one listener, and that is a single instance of MultiFactorUser\n    _assert(!this.reloadListener, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.reloadListener = callback;\n    if (this.reloadUserInfo) {\n      this._notifyReloadListener(this.reloadUserInfo);\n      this.reloadUserInfo = null;\n    }\n  }\n\n  _notifyReloadListener(userInfo: APIUserInfo): void {\n    if (this.reloadListener) {\n      this.reloadListener(userInfo);\n    } else {\n      // If no listener is subscribed yet, save the result so it's available when they do subscribe\n      this.reloadUserInfo = userInfo;\n    }\n  }\n\n  _startProactiveRefresh(): void {\n    this.proactiveRefresh._start();\n  }\n\n  _stopProactiveRefresh(): void {\n    this.proactiveRefresh._stop();\n  }\n\n  async _updateTokensIfNecessary(\n    response: IdTokenResponse | FinalizeMfaResponse,\n    reload = false\n  ): Promise<void> {\n    let tokensRefreshed = false;\n    if (\n      response.idToken &&\n      response.idToken !== this.stsTokenManager.accessToken\n    ) {\n      this.stsTokenManager.updateFromServerResponse(response);\n      tokensRefreshed = true;\n    }\n\n    if (reload) {\n      await _reloadWithoutSaving(this);\n    }\n\n    await this.auth._persistUserIfCurrent(this);\n    if (tokensRefreshed) {\n      this.auth._notifyListenersIfCurrent(this);\n    }\n  }\n\n  async delete(): Promise<void> {\n    const idToken = await this.getIdToken();\n    await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));\n    this.stsTokenManager.clearRefreshToken();\n\n    // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n    //       cancels pending actions...\n\n    return this.auth.signOut();\n  }\n\n  toJSON(): PersistedBlob {\n    return {\n      uid: this.uid,\n      email: this.email || undefined,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName || undefined,\n      isAnonymous: this.isAnonymous,\n      photoURL: this.photoURL || undefined,\n      phoneNumber: this.phoneNumber || undefined,\n      tenantId: this.tenantId || undefined,\n      providerData: this.providerData.map(userInfo => ({ ...userInfo })),\n      stsTokenManager: this.stsTokenManager.toJSON(),\n      // Redirect event ID must be maintained in case there is a pending\n      // redirect event.\n      _redirectEventId: this._redirectEventId,\n      ...this.metadata.toJSON(),\n\n      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n      apiKey: this.auth.config.apiKey,\n      appName: this.auth.name\n      // Missing authDomain will be tolerated by the legacy SDK.\n      // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n    };\n  }\n\n  get refreshToken(): string {\n    return this.stsTokenManager.refreshToken || '';\n  }\n\n  static _fromJSON(auth: AuthInternal, object: PersistedBlob): UserInternal {\n    const displayName = object.displayName ?? undefined;\n    const email = object.email ?? undefined;\n    const phoneNumber = object.phoneNumber ?? undefined;\n    const photoURL = object.photoURL ?? undefined;\n    const tenantId = object.tenantId ?? undefined;\n    const _redirectEventId = object._redirectEventId ?? undefined;\n    const createdAt = object.createdAt ?? undefined;\n    const lastLoginAt = object.lastLoginAt ?? undefined;\n    const {\n      uid,\n      emailVerified,\n      isAnonymous,\n      providerData,\n      stsTokenManager: plainObjectTokenManager\n    } = object;\n\n    _assert(uid && plainObjectTokenManager, auth, AuthErrorCode.INTERNAL_ERROR);\n\n    const stsTokenManager = StsTokenManager.fromJSON(\n      this.name,\n      plainObjectTokenManager as PersistedBlob\n    );\n\n    _assert(typeof uid === 'string', auth, AuthErrorCode.INTERNAL_ERROR);\n    assertStringOrUndefined(displayName, auth.name);\n    assertStringOrUndefined(email, auth.name);\n    _assert(\n      typeof emailVerified === 'boolean',\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    _assert(\n      typeof isAnonymous === 'boolean',\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    assertStringOrUndefined(phoneNumber, auth.name);\n    assertStringOrUndefined(photoURL, auth.name);\n    assertStringOrUndefined(tenantId, auth.name);\n    assertStringOrUndefined(_redirectEventId, auth.name);\n    assertStringOrUndefined(createdAt, auth.name);\n    assertStringOrUndefined(lastLoginAt, auth.name);\n    const user = new UserImpl({\n      uid,\n      auth,\n      email,\n      emailVerified,\n      displayName,\n      isAnonymous,\n      photoURL,\n      phoneNumber,\n      tenantId,\n      stsTokenManager,\n      createdAt,\n      lastLoginAt\n    });\n\n    if (providerData && Array.isArray(providerData)) {\n      user.providerData = providerData.map(userInfo => ({ ...userInfo }));\n    }\n\n    if (_redirectEventId) {\n      user._redirectEventId = _redirectEventId;\n    }\n\n    return user;\n  }\n\n  /**\n   * Initialize a User from an idToken server response\n   * @param auth\n   * @param idTokenResponse\n   */\n  static async _fromIdTokenResponse(\n    auth: AuthInternal,\n    idTokenResponse: IdTokenResponse,\n    isAnonymous: boolean = false\n  ): Promise<UserInternal> {\n    const stsTokenManager = new StsTokenManager();\n    stsTokenManager.updateFromServerResponse(idTokenResponse);\n\n    // Initialize the Firebase Auth user.\n    const user = new UserImpl({\n      uid: idTokenResponse.localId,\n      auth,\n      stsTokenManager,\n      isAnonymous\n    });\n\n    // Updates the user info and data and resolves with a user instance.\n    await _reloadWithoutSaving(user);\n    return user;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\n/**\n * Our API has a lot of one-off constants that are used to do things.\n * Unfortunately we can't export these as classes instantiated directly since\n * the constructor may side effect and therefore can't be proven to be safely\n * culled. Instead, we export these classes themselves as a lowerCamelCase\n * constant, and instantiate them under the hood.\n */\nexport interface SingletonInstantiator<T> {\n  new (): T;\n}\n\nconst instanceCache: Map<unknown, unknown> = new Map();\n\nexport function _getInstance<T>(cls: unknown): T {\n  debugAssert(cls instanceof Function, 'Expected a class definition');\n  let instance = instanceCache.get(cls) as T | undefined;\n\n  if (instance) {\n    debugAssert(\n      instance instanceof cls,\n      'Instance stored in cache mismatched with class'\n    );\n    return instance;\n  }\n\n  instance = new (cls as SingletonInstantiator<T>)();\n  instanceCache.set(cls, instance);\n  return instance;\n}\n\nexport function _clearInstanceMap(): void {\n  instanceCache.clear();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport {\n  PersistenceInternal,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener\n} from '../persistence';\n\nexport class InMemoryPersistence implements PersistenceInternal {\n  static type: 'NONE' = 'NONE';\n  readonly type = PersistenceType.NONE;\n  storage: Record<string, PersistenceValue> = {};\n\n  async _isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    this.storage[key] = value;\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const value = this.storage[key];\n    return value === undefined ? null : (value as T);\n  }\n\n  async _remove(key: string): Promise<void> {\n    delete this.storage[key];\n  }\n\n  _addListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n\n  _removeListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type 'NONE'.\n *\n * @public\n */\nexport const inMemoryPersistence: Persistence = InMemoryPersistence;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiKey, AppName, AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { PersistedBlob, PersistenceInternal } from '../persistence';\nimport { UserImpl } from '../user/user_impl';\nimport { _getInstance } from '../util/instantiator';\nimport { inMemoryPersistence } from './in_memory';\n\nexport const enum KeyName {\n  AUTH_USER = 'authUser',\n  AUTH_EVENT = 'authEvent',\n  REDIRECT_USER = 'redirectUser',\n  PERSISTENCE_USER = 'persistence'\n}\nexport const enum Namespace {\n  PERSISTENCE = 'firebase'\n}\n\nexport function _persistenceKeyName(\n  key: string,\n  apiKey: ApiKey,\n  appName: AppName\n): string {\n  return `${Namespace.PERSISTENCE}:${key}:${apiKey}:${appName}`;\n}\n\nexport class PersistenceUserManager {\n  private readonly fullUserKey: string;\n  private readonly fullPersistenceKey: string;\n  private readonly boundEventHandler: () => void;\n\n  private constructor(\n    public persistence: PersistenceInternal,\n    private readonly auth: AuthInternal,\n    private readonly userKey: string\n  ) {\n    const { config, name } = this.auth;\n    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n    this.fullPersistenceKey = _persistenceKeyName(\n      KeyName.PERSISTENCE_USER,\n      config.apiKey,\n      name\n    );\n    this.boundEventHandler = auth._onStorageEvent.bind(auth);\n    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n  }\n\n  setCurrentUser(user: UserInternal): Promise<void> {\n    return this.persistence._set(this.fullUserKey, user.toJSON());\n  }\n\n  async getCurrentUser(): Promise<UserInternal | null> {\n    const blob = await this.persistence._get<PersistedBlob>(this.fullUserKey);\n    return blob ? UserImpl._fromJSON(this.auth, blob) : null;\n  }\n\n  removeCurrentUser(): Promise<void> {\n    return this.persistence._remove(this.fullUserKey);\n  }\n\n  savePersistenceForRedirect(): Promise<void> {\n    return this.persistence._set(\n      this.fullPersistenceKey,\n      this.persistence.type\n    );\n  }\n\n  async setPersistence(newPersistence: PersistenceInternal): Promise<void> {\n    if (this.persistence === newPersistence) {\n      return;\n    }\n\n    const currentUser = await this.getCurrentUser();\n    await this.removeCurrentUser();\n\n    this.persistence = newPersistence;\n\n    if (currentUser) {\n      return this.setCurrentUser(currentUser);\n    }\n  }\n\n  delete(): void {\n    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n  }\n\n  static async create(\n    auth: AuthInternal,\n    persistenceHierarchy: PersistenceInternal[],\n    userKey = KeyName.AUTH_USER\n  ): Promise<PersistenceUserManager> {\n    if (!persistenceHierarchy.length) {\n      return new PersistenceUserManager(\n        _getInstance(inMemoryPersistence),\n        auth,\n        userKey\n      );\n    }\n\n    // Eliminate any persistences that are not available\n    const availablePersistences = (\n      await Promise.all(\n        persistenceHierarchy.map(async persistence => {\n          if (await persistence._isAvailable()) {\n            return persistence;\n          }\n          return undefined;\n        })\n      )\n    ).filter(persistence => persistence) as PersistenceInternal[];\n\n    // Fall back to the first persistence listed, or in memory if none available\n    let selectedPersistence =\n      availablePersistences[0] ||\n      _getInstance<PersistenceInternal>(inMemoryPersistence);\n\n    const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n\n    // Pull out the existing user, setting the chosen persistence to that\n    // persistence if the user exists.\n    let userToMigrate: UserInternal | null = null;\n    // Note, here we check for a user in _all_ persistences, not just the\n    // ones deemed available. If we can migrate a user out of a broken\n    // persistence, we will (but only if that persistence supports migration).\n    for (const persistence of persistenceHierarchy) {\n      try {\n        const blob = await persistence._get<PersistedBlob>(key);\n        if (blob) {\n          const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n          if (persistence !== selectedPersistence) {\n            userToMigrate = user;\n          }\n          selectedPersistence = persistence;\n          break;\n        }\n      } catch {}\n    }\n\n    // If we find the user in a persistence that does support migration, use\n    // that migration path (of only persistences that support migration)\n    const migrationHierarchy = availablePersistences.filter(\n      p => p._shouldAllowMigration\n    );\n\n    // If the persistence does _not_ allow migration, just finish off here\n    if (\n      !selectedPersistence._shouldAllowMigration ||\n      !migrationHierarchy.length\n    ) {\n      return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n\n    selectedPersistence = migrationHierarchy[0];\n    if (userToMigrate) {\n      // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n      // we'll just let it bubble to surface the error.\n      await selectedPersistence._set(key, userToMigrate.toJSON());\n    }\n\n    // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n    // such as users getting stuck with a previous account after signing out and refreshing the tab.\n    await Promise.all(\n      persistenceHierarchy.map(async persistence => {\n        if (persistence !== selectedPersistence) {\n          try {\n            await persistence._remove(key);\n          } catch {}\n        }\n      })\n    );\n    return new PersistenceUserManager(selectedPersistence, auth, userKey);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isIE, getUA } from '@firebase/util';\n\ninterface NavigatorStandalone extends Navigator {\n  standalone?: unknown;\n}\n\ninterface Document {\n  documentMode?: number;\n}\n\n/**\n * Enums for Browser name.\n */\nexport const enum BrowserName {\n  ANDROID = 'Android',\n  BLACKBERRY = 'Blackberry',\n  EDGE = 'Edge',\n  FIREFOX = 'Firefox',\n  IE = 'IE',\n  IEMOBILE = 'IEMobile',\n  OPERA = 'Opera',\n  OTHER = 'Other',\n  CHROME = 'Chrome',\n  SAFARI = 'Safari',\n  SILK = 'Silk',\n  WEBOS = 'Webos'\n}\n\n/**\n * Determine the browser for the purposes of reporting usage to the API\n */\nexport function _getBrowserName(userAgent: string): BrowserName | string {\n  const ua = userAgent.toLowerCase();\n  if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n    return BrowserName.OPERA;\n  } else if (_isIEMobile(ua)) {\n    // Windows phone IEMobile browser.\n    return BrowserName.IEMOBILE;\n  } else if (ua.includes('msie') || ua.includes('trident/')) {\n    return BrowserName.IE;\n  } else if (ua.includes('edge/')) {\n    return BrowserName.EDGE;\n  } else if (_isFirefox(ua)) {\n    return BrowserName.FIREFOX;\n  } else if (ua.includes('silk/')) {\n    return BrowserName.SILK;\n  } else if (_isBlackBerry(ua)) {\n    // Blackberry browser.\n    return BrowserName.BLACKBERRY;\n  } else if (_isWebOS(ua)) {\n    // WebOS default browser.\n    return BrowserName.WEBOS;\n  } else if (_isSafari(ua)) {\n    return BrowserName.SAFARI;\n  } else if (\n    (ua.includes('chrome/') || _isChromeIOS(ua)) &&\n    !ua.includes('edge/')\n  ) {\n    return BrowserName.CHROME;\n  } else if (_isAndroid(ua)) {\n    // Android stock browser.\n    return BrowserName.ANDROID;\n  } else {\n    // Most modern browsers have name/version at end of user agent string.\n    const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n    const matches = userAgent.match(re);\n    if (matches?.length === 2) {\n      return matches[1];\n    }\n  }\n  return BrowserName.OTHER;\n}\n\nexport function _isFirefox(ua = getUA()): boolean {\n  return /firefox\\//i.test(ua);\n}\n\nexport function _isSafari(userAgent = getUA()): boolean {\n  const ua = userAgent.toLowerCase();\n  return (\n    ua.includes('safari/') &&\n    !ua.includes('chrome/') &&\n    !ua.includes('crios/') &&\n    !ua.includes('android')\n  );\n}\n\nexport function _isChromeIOS(ua = getUA()): boolean {\n  return /crios\\//i.test(ua);\n}\n\nexport function _isIEMobile(ua = getUA()): boolean {\n  return /iemobile/i.test(ua);\n}\n\nexport function _isAndroid(ua = getUA()): boolean {\n  return /android/i.test(ua);\n}\n\nexport function _isBlackBerry(ua = getUA()): boolean {\n  return /blackberry/i.test(ua);\n}\n\nexport function _isWebOS(ua = getUA()): boolean {\n  return /webos/i.test(ua);\n}\n\nexport function _isIOS(ua = getUA()): boolean {\n  return (\n    /iphone|ipad|ipod/i.test(ua) ||\n    (/macintosh/i.test(ua) && /mobile/i.test(ua))\n  );\n}\n\nexport function _isIOS7Or8(ua = getUA()): boolean {\n  return (\n    /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) ||\n    /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua)\n  );\n}\n\nexport function _isIOSStandalone(ua = getUA()): boolean {\n  return _isIOS(ua) && !!(window.navigator as NavigatorStandalone)?.standalone;\n}\n\nexport function _isIE10(): boolean {\n  return isIE() && (document as Document).documentMode === 10;\n}\n\nexport function _isMobileBrowser(ua: string = getUA()): boolean {\n  // TODO: implement getBrowserName equivalent for OS.\n  return (\n    _isIOS(ua) ||\n    _isAndroid(ua) ||\n    _isWebOS(ua) ||\n    _isBlackBerry(ua) ||\n    /windows phone/i.test(ua) ||\n    _isIEMobile(ua)\n  );\n}\n\nexport function _isIframe(): boolean {\n  try {\n    // Check that the current window is not the top window.\n    // If so, return true.\n    return !!(window && window !== window.top);\n  } catch (e) {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { _getBrowserName } from './browser';\nimport { getUA } from '@firebase/util';\n\nexport const enum ClientImplementation {\n  CORE = 'JsCore'\n}\n\n/**\n * @internal\n */\nexport const enum ClientPlatform {\n  BROWSER = 'Browser',\n  NODE = 'Node',\n  REACT_NATIVE = 'ReactNative',\n  CORDOVA = 'Cordova',\n  WORKER = 'Worker'\n}\n\n/*\n * Determine the SDK version string\n */\nexport function _getClientVersion(\n  clientPlatform: ClientPlatform,\n  frameworks: readonly string[] = []\n): string {\n  let reportedPlatform: string;\n  switch (clientPlatform) {\n    case ClientPlatform.BROWSER:\n      // In a browser environment, report the browser name.\n      reportedPlatform = _getBrowserName(getUA());\n      break;\n    case ClientPlatform.WORKER:\n      // Technically a worker runs from a browser but we need to differentiate a\n      // worker from a browser.\n      // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n      reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;\n      break;\n    default:\n      reportedPlatform = clientPlatform;\n  }\n  const reportedFrameworks = frameworks.length\n    ? frameworks.join(',')\n    : 'FirebaseCore-web'; /* default value if no other framework is used */\n  return `${reportedPlatform}/${ClientImplementation.CORE}/${SDK_VERSION}/${reportedFrameworks}`;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthInternal } from '../../model/auth';\nimport { Unsubscribe, User } from '../../model/public_types';\nimport { AuthErrorCode } from '../errors';\n\ninterface MiddlewareEntry {\n  (user: User | null): Promise<void>;\n  onAbort?: () => void;\n}\n\nexport class AuthMiddlewareQueue {\n  private readonly queue: MiddlewareEntry[] = [];\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  pushCallback(\n    callback: (user: User | null) => void | Promise<void>,\n    onAbort?: () => void\n  ): Unsubscribe {\n    // The callback could be sync or async. Wrap it into a\n    // function that is always async.\n    const wrappedCallback: MiddlewareEntry = (\n      user: User | null\n    ): Promise<void> =>\n      new Promise((resolve, reject) => {\n        try {\n          const result = callback(user);\n          // Either resolve with existing promise or wrap a non-promise\n          // return value into a promise.\n          resolve(result);\n        } catch (e) {\n          // Sync callback throws.\n          reject(e);\n        }\n      });\n    // Attach the onAbort if present\n    wrappedCallback.onAbort = onAbort;\n    this.queue.push(wrappedCallback);\n\n    const index = this.queue.length - 1;\n    return () => {\n      // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n      // indexing of other elements.\n      this.queue[index] = () => Promise.resolve();\n    };\n  }\n\n  async runMiddleware(nextUser: User | null): Promise<void> {\n    if (this.auth.currentUser === nextUser) {\n      return;\n    }\n\n    // While running the middleware, build a temporary stack of onAbort\n    // callbacks to call if one middleware callback rejects.\n\n    const onAbortStack: Array<() => void> = [];\n    try {\n      for (const beforeStateCallback of this.queue) {\n        await beforeStateCallback(nextUser);\n\n        // Only push the onAbort if the callback succeeds\n        if (beforeStateCallback.onAbort) {\n          onAbortStack.push(beforeStateCallback.onAbort);\n        }\n      }\n    } catch (e) {\n      // Run all onAbort, with separate try/catch to ignore any errors and\n      // continue\n      onAbortStack.reverse();\n      for (const onAbort of onAbortStack) {\n        try {\n          onAbort();\n        } catch (_) {\n          /* swallow error */\n        }\n      }\n\n      throw this.auth._errorFactory.create(AuthErrorCode.LOGIN_BLOCKED, {\n        originalMessage: (e as Error)?.message\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performApiRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\n/**\n * Request object for fetching the password policy.\n */\nexport interface GetPasswordPolicyRequest {\n  tenantId?: string;\n}\n\n/**\n * Response object for fetching the password policy.\n */\nexport interface GetPasswordPolicyResponse {\n  customStrengthOptions: {\n    minPasswordLength?: number;\n    maxPasswordLength?: number;\n    containsLowercaseCharacter?: boolean;\n    containsUppercaseCharacter?: boolean;\n    containsNumericCharacter?: boolean;\n    containsNonAlphanumericCharacter?: boolean;\n  };\n  allowedNonAlphanumericCharacters?: string[];\n  enforcementState: string;\n  forceUpgradeOnSignin?: boolean;\n  schemaVersion: number;\n}\n\n/**\n * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n *\n * @param auth Auth object.\n * @param request Password policy request.\n * @returns Password policy response.\n */\nexport async function _getPasswordPolicy(\n  auth: Auth,\n  request: GetPasswordPolicyRequest = {}\n): Promise<GetPasswordPolicyResponse> {\n  return _performApiRequest<\n    GetPasswordPolicyRequest,\n    GetPasswordPolicyResponse\n  >(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_PASSWORD_POLICY,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GetPasswordPolicyResponse } from '../../api/password_policy/get_password_policy';\nimport {\n  PasswordPolicyCustomStrengthOptions,\n  PasswordPolicyInternal,\n  PasswordValidationStatusInternal\n} from '../../model/password_policy';\nimport { PasswordValidationStatus } from '../../model/public_types';\n\n// Minimum min password length enforced by the backend, even if no minimum length is set.\nconst MINIMUM_MIN_PASSWORD_LENGTH = 6;\n\n/**\n * Stores password policy requirements and provides password validation against the policy.\n *\n * @internal\n */\nexport class PasswordPolicyImpl implements PasswordPolicyInternal {\n  readonly customStrengthOptions: PasswordPolicyCustomStrengthOptions;\n  readonly allowedNonAlphanumericCharacters: string;\n  readonly enforcementState: string;\n  readonly forceUpgradeOnSignin: boolean;\n  readonly schemaVersion: number;\n\n  constructor(response: GetPasswordPolicyResponse) {\n    // Only include custom strength options defined in the response.\n    const responseOptions = response.customStrengthOptions;\n    this.customStrengthOptions = {};\n    // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n    this.customStrengthOptions.minPasswordLength =\n      responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;\n    if (responseOptions.maxPasswordLength) {\n      this.customStrengthOptions.maxPasswordLength =\n        responseOptions.maxPasswordLength;\n    }\n    if (responseOptions.containsLowercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsLowercaseLetter =\n        responseOptions.containsLowercaseCharacter;\n    }\n    if (responseOptions.containsUppercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsUppercaseLetter =\n        responseOptions.containsUppercaseCharacter;\n    }\n    if (responseOptions.containsNumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNumericCharacter =\n        responseOptions.containsNumericCharacter;\n    }\n    if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNonAlphanumericCharacter =\n        responseOptions.containsNonAlphanumericCharacter;\n    }\n\n    this.enforcementState = response.enforcementState;\n    if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n      this.enforcementState = 'OFF';\n    }\n\n    // Use an empty string if no non-alphanumeric characters are specified in the response.\n    this.allowedNonAlphanumericCharacters =\n      response.allowedNonAlphanumericCharacters?.join('') ?? '';\n\n    this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;\n    this.schemaVersion = response.schemaVersion;\n  }\n\n  validatePassword(password: string): PasswordValidationStatus {\n    const status: PasswordValidationStatusInternal = {\n      isValid: true,\n      passwordPolicy: this\n    };\n\n    // Check the password length and character options.\n    this.validatePasswordLengthOptions(password, status);\n    this.validatePasswordCharacterOptions(password, status);\n\n    // Combine the status into single isValid property.\n    status.isValid &&= status.meetsMinPasswordLength ?? true;\n    status.isValid &&= status.meetsMaxPasswordLength ?? true;\n    status.isValid &&= status.containsLowercaseLetter ?? true;\n    status.isValid &&= status.containsUppercaseLetter ?? true;\n    status.isValid &&= status.containsNumericCharacter ?? true;\n    status.isValid &&= status.containsNonAlphanumericCharacter ?? true;\n\n    return status;\n  }\n\n  /**\n   * Validates that the password meets the length options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  private validatePasswordLengthOptions(\n    password: string,\n    status: PasswordValidationStatusInternal\n  ): void {\n    const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n    const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n    if (minPasswordLength) {\n      status.meetsMinPasswordLength = password.length >= minPasswordLength;\n    }\n    if (maxPasswordLength) {\n      status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n    }\n  }\n\n  /**\n   * Validates that the password meets the character options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  private validatePasswordCharacterOptions(\n    password: string,\n    status: PasswordValidationStatusInternal\n  ): void {\n    // Assign statuses for requirements even if the password is an empty string.\n    this.updatePasswordCharacterOptionsStatuses(\n      status,\n      /* containsLowercaseCharacter= */ false,\n      /* containsUppercaseCharacter= */ false,\n      /* containsNumericCharacter= */ false,\n      /* containsNonAlphanumericCharacter= */ false\n    );\n\n    let passwordChar;\n    for (let i = 0; i < password.length; i++) {\n      passwordChar = password.charAt(i);\n      this.updatePasswordCharacterOptionsStatuses(\n        status,\n        /* containsLowercaseCharacter= */ passwordChar >= 'a' &&\n          passwordChar <= 'z',\n        /* containsUppercaseCharacter= */ passwordChar >= 'A' &&\n          passwordChar <= 'Z',\n        /* containsNumericCharacter= */ passwordChar >= '0' &&\n          passwordChar <= '9',\n        /* containsNonAlphanumericCharacter= */ this.allowedNonAlphanumericCharacters.includes(\n          passwordChar\n        )\n      );\n    }\n  }\n\n  /**\n   * Updates the running validation status with the statuses for the character options.\n   * Expected to be called each time a character is processed to update each option status\n   * based on the current character.\n   *\n   * @param status Validation status.\n   * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n   * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n   * @param containsNumericCharacter Whether the character is a numeric character.\n   * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n   */\n  private updatePasswordCharacterOptionsStatuses(\n    status: PasswordValidationStatusInternal,\n    containsLowercaseCharacter: boolean,\n    containsUppercaseCharacter: boolean,\n    containsNumericCharacter: boolean,\n    containsNonAlphanumericCharacter: boolean\n  ): void {\n    if (this.customStrengthOptions.containsLowercaseLetter) {\n      status.containsLowercaseLetter ||= containsLowercaseCharacter;\n    }\n    if (this.customStrengthOptions.containsUppercaseLetter) {\n      status.containsUppercaseLetter ||= containsUppercaseCharacter;\n    }\n    if (this.customStrengthOptions.containsNumericCharacter) {\n      status.containsNumericCharacter ||= containsNumericCharacter;\n    }\n    if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n      status.containsNonAlphanumericCharacter ||=\n        containsNonAlphanumericCharacter;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _FirebaseService, FirebaseApp } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport {\n  Auth,\n  AuthErrorMap,\n  AuthSettings,\n  EmulatorConfig,\n  NextOrObserver,\n  Persistence,\n  PopupRedirectResolver,\n  User,\n  UserCredential,\n  CompleteFn,\n  ErrorFn,\n  NextFn,\n  Unsubscribe,\n  PasswordValidationStatus\n} from '../../model/public_types';\nimport {\n  createSubscribe,\n  ErrorFactory,\n  FirebaseError,\n  getModularInstance,\n  Observer,\n  Subscribe\n} from '@firebase/util';\n\nimport { AuthInternal, ConfigInternal } from '../../model/auth';\nimport { PopupRedirectResolverInternal } from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport {\n  AuthErrorCode,\n  AuthErrorParams,\n  ErrorMapRetriever,\n  _DEFAULT_AUTH_ERROR_FACTORY\n} from '../errors';\nimport { PersistenceInternal } from '../persistence';\nimport {\n  KeyName,\n  PersistenceUserManager\n} from '../persistence/persistence_user_manager';\nimport { _reloadWithoutSaving } from '../user/reload';\nimport { _assert } from '../util/assert';\nimport { _getInstance } from '../util/instantiator';\nimport { _getUserLanguage } from '../util/navigator';\nimport { _getClientVersion } from '../util/version';\nimport { HttpHeader } from '../../api';\nimport { AuthMiddlewareQueue } from './middleware';\nimport { RecaptchaConfig } from '../../platform_browser/recaptcha/recaptcha';\nimport { _logWarn } from '../util/log';\nimport { _getPasswordPolicy } from '../../api/password_policy/get_password_policy';\nimport { PasswordPolicyInternal } from '../../model/password_policy';\nimport { PasswordPolicyImpl } from './password_policy_impl';\n\ninterface AsyncAction {\n  (): Promise<void>;\n}\n\nexport const enum DefaultConfig {\n  TOKEN_API_HOST = 'securetoken.googleapis.com',\n  API_HOST = 'identitytoolkit.googleapis.com',\n  API_SCHEME = 'https'\n}\n\nexport class AuthImpl implements AuthInternal, _FirebaseService {\n  currentUser: User | null = null;\n  emulatorConfig: EmulatorConfig | null = null;\n  private operations = Promise.resolve();\n  private persistenceManager?: PersistenceUserManager;\n  private redirectPersistenceManager?: PersistenceUserManager;\n  private authStateSubscription = new Subscription<User>(this);\n  private idTokenSubscription = new Subscription<User>(this);\n  private readonly beforeStateQueue = new AuthMiddlewareQueue(this);\n  private redirectUser: UserInternal | null = null;\n  private isProactiveRefreshEnabled = false;\n  private readonly EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION: number = 1;\n\n  // Any network calls will set this to true and prevent subsequent emulator\n  // initialization\n  _canInitEmulator = true;\n  _isInitialized = false;\n  _deleted = false;\n  _initializationPromise: Promise<void> | null = null;\n  _popupRedirectResolver: PopupRedirectResolverInternal | null = null;\n  _errorFactory: ErrorFactory<AuthErrorCode, AuthErrorParams> =\n    _DEFAULT_AUTH_ERROR_FACTORY;\n  _agentRecaptchaConfig: RecaptchaConfig | null = null;\n  _tenantRecaptchaConfigs: Record<string, RecaptchaConfig> = {};\n  _projectPasswordPolicy: PasswordPolicyInternal | null = null;\n  _tenantPasswordPolicies: Record<string, PasswordPolicyInternal> = {};\n  readonly name: string;\n\n  // Tracks the last notified UID for state change listeners to prevent\n  // repeated calls to the callbacks. Undefined means it's never been\n  // called, whereas null means it's been called with a signed out user\n  private lastNotifiedUid: string | null | undefined = undefined;\n\n  languageCode: string | null = null;\n  tenantId: string | null = null;\n  settings: AuthSettings = { appVerificationDisabledForTesting: false };\n\n  constructor(\n    public readonly app: FirebaseApp,\n    private readonly heartbeatServiceProvider: Provider<'heartbeat'>,\n    private readonly appCheckServiceProvider: Provider<AppCheckInternalComponentName>,\n    public readonly config: ConfigInternal\n  ) {\n    this.name = app.name;\n    this.clientVersion = config.sdkClientVersion;\n  }\n\n  _initializeWithPersistence(\n    persistenceHierarchy: PersistenceInternal[],\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    if (popupRedirectResolver) {\n      this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n    }\n\n    // Have to check for app deletion throughout initialization (after each\n    // promise resolution)\n    this._initializationPromise = this.queue(async () => {\n      if (this._deleted) {\n        return;\n      }\n\n      this.persistenceManager = await PersistenceUserManager.create(\n        this,\n        persistenceHierarchy\n      );\n\n      if (this._deleted) {\n        return;\n      }\n\n      // Initialize the resolver early if necessary (only applicable to web:\n      // this will cause the iframe to load immediately in certain cases)\n      if (this._popupRedirectResolver?._shouldInitProactively) {\n        // If this fails, don't halt auth loading\n        try {\n          await this._popupRedirectResolver._initialize(this);\n        } catch (e) {\n          /* Ignore the error */\n        }\n      }\n\n      await this.initializeCurrentUser(popupRedirectResolver);\n      this.lastNotifiedUid = this.currentUser?.uid || null;\n\n      if (this._deleted) {\n        return;\n      }\n\n      this._isInitialized = true;\n    });\n\n    return this._initializationPromise;\n  }\n\n  /**\n   * If the persistence is changed in another window, the user manager will let us know\n   */\n  async _onStorageEvent(): Promise<void> {\n    if (this._deleted) {\n      return;\n    }\n\n    const user = await this.assertedPersistence.getCurrentUser();\n\n    if (!this.currentUser && !user) {\n      // No change, do nothing (was signed out and remained signed out).\n      return;\n    }\n\n    // If the same user is to be synchronized.\n    if (this.currentUser && user && this.currentUser.uid === user.uid) {\n      // Data update, simply copy data changes.\n      this._currentUser._assign(user);\n      // If tokens changed from previous user tokens, this will trigger\n      // notifyAuthListeners_.\n      await this.currentUser.getIdToken();\n      return;\n    }\n\n    // Update current Auth state. Either a new login or logout.\n    // Skip blocking callbacks, they should not apply to a change in another tab.\n    await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);\n  }\n\n  private async initializeCurrentUser(\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    // First check to see if we have a pending redirect event.\n    const previouslyStoredUser =\n      (await this.assertedPersistence.getCurrentUser()) as UserInternal | null;\n    let futureCurrentUser = previouslyStoredUser;\n    let needsTocheckMiddleware = false;\n    if (popupRedirectResolver && this.config.authDomain) {\n      await this.getOrInitRedirectPersistenceManager();\n      const redirectUserEventId = this.redirectUser?._redirectEventId;\n      const storedUserEventId = futureCurrentUser?._redirectEventId;\n      const result = await this.tryRedirectSignIn(popupRedirectResolver);\n\n      // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n      // matches the redirect user, then we want to initially sign in with the\n      // new user object from result.\n      // TODO(samgho): More thoroughly test all of this\n      if (\n        (!redirectUserEventId || redirectUserEventId === storedUserEventId) &&\n        result?.user\n      ) {\n        futureCurrentUser = result.user as UserInternal;\n        needsTocheckMiddleware = true;\n      }\n    }\n\n    // If no user in persistence, there is no current user. Set to null.\n    if (!futureCurrentUser) {\n      return this.directlySetCurrentUser(null);\n    }\n\n    if (!futureCurrentUser._redirectEventId) {\n      // This isn't a redirect link operation, we can reload and bail.\n      // First though, ensure that we check the middleware is happy.\n      if (needsTocheckMiddleware) {\n        try {\n          await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n        } catch (e) {\n          futureCurrentUser = previouslyStoredUser;\n          // We know this is available since the bit is only set when the\n          // resolver is available\n          this._popupRedirectResolver!._overrideRedirectResult(this, () =>\n            Promise.reject(e)\n          );\n        }\n      }\n\n      if (futureCurrentUser) {\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n      } else {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    _assert(this._popupRedirectResolver, this, AuthErrorCode.ARGUMENT_ERROR);\n    await this.getOrInitRedirectPersistenceManager();\n\n    // If the redirect user's event ID matches the current user's event ID,\n    // DO NOT reload the current user, otherwise they'll be cleared from storage.\n    // This is important for the reauthenticateWithRedirect() flow.\n    if (\n      this.redirectUser &&\n      this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId\n    ) {\n      return this.directlySetCurrentUser(futureCurrentUser);\n    }\n\n    return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n  }\n\n  private async tryRedirectSignIn(\n    redirectResolver: PopupRedirectResolver\n  ): Promise<UserCredential | null> {\n    // The redirect user needs to be checked (and signed in if available)\n    // during auth initialization. All of the normal sign in and link/reauth\n    // flows call back into auth and push things onto the promise queue. We\n    // need to await the result of the redirect sign in *inside the promise\n    // queue*. This presents a problem: we run into deadlock. See:\n    //    ┌> [Initialization] ─────┐\n    //    ┌> [<other queue tasks>] │\n    //    └─ [getRedirectResult] <─┘\n    //    where [] are tasks on the queue and arrows denote awaits\n    // Initialization will never complete because it's waiting on something\n    // that's waiting for initialization to complete!\n    //\n    // Instead, this method calls getRedirectResult() (stored in\n    // _completeRedirectFn) with an optional parameter that instructs all of\n    // the underlying auth operations to skip anything that mutates auth state.\n\n    let result: UserCredential | null = null;\n    try {\n      // We know this._popupRedirectResolver is set since redirectResolver\n      // is passed in. The _completeRedirectFn expects the unwrapped extern.\n      result = await this._popupRedirectResolver!._completeRedirectFn(\n        this,\n        redirectResolver,\n        true\n      );\n    } catch (e) {\n      // Swallow any errors here; the code can retrieve them in\n      // getRedirectResult().\n      await this._setRedirectUser(null);\n    }\n\n    return result;\n  }\n\n  private async reloadAndSetCurrentUserOrClear(\n    user: UserInternal\n  ): Promise<void> {\n    try {\n      await _reloadWithoutSaving(user);\n    } catch (e) {\n      if (\n        (e as FirebaseError)?.code !==\n        `auth/${AuthErrorCode.NETWORK_REQUEST_FAILED}`\n      ) {\n        // Something's wrong with the user's token. Log them out and remove\n        // them from storage\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    return this.directlySetCurrentUser(user);\n  }\n\n  useDeviceLanguage(): void {\n    this.languageCode = _getUserLanguage();\n  }\n\n  async _delete(): Promise<void> {\n    this._deleted = true;\n  }\n\n  async updateCurrentUser(userExtern: User | null): Promise<void> {\n    // The public updateCurrentUser method needs to make a copy of the user,\n    // and also check that the project matches\n    const user = userExtern\n      ? (getModularInstance(userExtern) as UserInternal)\n      : null;\n    if (user) {\n      _assert(\n        user.auth.config.apiKey === this.config.apiKey,\n        this,\n        AuthErrorCode.INVALID_AUTH\n      );\n    }\n    return this._updateCurrentUser(user && user._clone(this));\n  }\n\n  async _updateCurrentUser(\n    user: User | null,\n    skipBeforeStateCallbacks: boolean = false\n  ): Promise<void> {\n    if (this._deleted) {\n      return;\n    }\n    if (user) {\n      _assert(\n        this.tenantId === user.tenantId,\n        this,\n        AuthErrorCode.TENANT_ID_MISMATCH\n      );\n    }\n\n    if (!skipBeforeStateCallbacks) {\n      await this.beforeStateQueue.runMiddleware(user);\n    }\n\n    return this.queue(async () => {\n      await this.directlySetCurrentUser(user as UserInternal | null);\n      this.notifyAuthListeners();\n    });\n  }\n\n  async signOut(): Promise<void> {\n    // Run first, to block _setRedirectUser() if any callbacks fail.\n    await this.beforeStateQueue.runMiddleware(null);\n    // Clear the redirect user when signOut is called\n    if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n      await this._setRedirectUser(null);\n    }\n\n    // Prevent callbacks from being called again in _updateCurrentUser, as\n    // they were already called in the first line.\n    return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);\n  }\n\n  setPersistence(persistence: Persistence): Promise<void> {\n    return this.queue(async () => {\n      await this.assertedPersistence.setPersistence(_getInstance(persistence));\n    });\n  }\n\n  _getRecaptchaConfig(): RecaptchaConfig | null {\n    if (this.tenantId == null) {\n      return this._agentRecaptchaConfig;\n    } else {\n      return this._tenantRecaptchaConfigs[this.tenantId];\n    }\n  }\n\n  async validatePassword(password: string): Promise<PasswordValidationStatus> {\n    if (!this._getPasswordPolicyInternal()) {\n      await this._updatePasswordPolicy();\n    }\n\n    // Password policy will be defined after fetching.\n    const passwordPolicy: PasswordPolicyInternal =\n      this._getPasswordPolicyInternal()!;\n\n    // Check that the policy schema version is supported by the SDK.\n    // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n    if (\n      passwordPolicy.schemaVersion !==\n      this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION\n    ) {\n      return Promise.reject(\n        this._errorFactory.create(\n          AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION,\n          {}\n        )\n      );\n    }\n\n    return passwordPolicy.validatePassword(password);\n  }\n\n  _getPasswordPolicyInternal(): PasswordPolicyInternal | null {\n    if (this.tenantId === null) {\n      return this._projectPasswordPolicy;\n    } else {\n      return this._tenantPasswordPolicies[this.tenantId];\n    }\n  }\n\n  async _updatePasswordPolicy(): Promise<void> {\n    const response = await _getPasswordPolicy(this);\n\n    const passwordPolicy: PasswordPolicyInternal = new PasswordPolicyImpl(\n      response\n    );\n\n    if (this.tenantId === null) {\n      this._projectPasswordPolicy = passwordPolicy;\n    } else {\n      this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n    }\n  }\n\n  _getPersistence(): string {\n    return this.assertedPersistence.persistence.type;\n  }\n\n  _updateErrorMap(errorMap: AuthErrorMap): void {\n    this._errorFactory = new ErrorFactory<AuthErrorCode, AuthErrorParams>(\n      'auth',\n      'Firebase',\n      (errorMap as ErrorMapRetriever)()\n    );\n  }\n\n  onAuthStateChanged(\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    return this.registerStateListener(\n      this.authStateSubscription,\n      nextOrObserver,\n      error,\n      completed\n    );\n  }\n\n  beforeAuthStateChanged(\n    callback: (user: User | null) => void | Promise<void>,\n    onAbort?: () => void\n  ): Unsubscribe {\n    return this.beforeStateQueue.pushCallback(callback, onAbort);\n  }\n\n  onIdTokenChanged(\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    return this.registerStateListener(\n      this.idTokenSubscription,\n      nextOrObserver,\n      error,\n      completed\n    );\n  }\n\n  authStateReady(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.currentUser) {\n        resolve();\n      } else {\n        const unsubscribe = this.onAuthStateChanged(() => {\n          unsubscribe();\n          resolve();\n        }, reject);\n      }\n    });\n  }\n\n  toJSON(): object {\n    return {\n      apiKey: this.config.apiKey,\n      authDomain: this.config.authDomain,\n      appName: this.name,\n      currentUser: this._currentUser?.toJSON()\n    };\n  }\n\n  async _setRedirectUser(\n    user: UserInternal | null,\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    const redirectManager = await this.getOrInitRedirectPersistenceManager(\n      popupRedirectResolver\n    );\n    return user === null\n      ? redirectManager.removeCurrentUser()\n      : redirectManager.setCurrentUser(user);\n  }\n\n  private async getOrInitRedirectPersistenceManager(\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<PersistenceUserManager> {\n    if (!this.redirectPersistenceManager) {\n      const resolver: PopupRedirectResolverInternal | null =\n        (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||\n        this._popupRedirectResolver;\n      _assert(resolver, this, AuthErrorCode.ARGUMENT_ERROR);\n      this.redirectPersistenceManager = await PersistenceUserManager.create(\n        this,\n        [_getInstance(resolver._redirectPersistence)],\n        KeyName.REDIRECT_USER\n      );\n      this.redirectUser =\n        await this.redirectPersistenceManager.getCurrentUser();\n    }\n\n    return this.redirectPersistenceManager;\n  }\n\n  async _redirectUserForId(id: string): Promise<UserInternal | null> {\n    // Make sure we've cleared any pending persistence actions if we're not in\n    // the initializer\n    if (this._isInitialized) {\n      await this.queue(async () => {});\n    }\n\n    if (this._currentUser?._redirectEventId === id) {\n      return this._currentUser;\n    }\n\n    if (this.redirectUser?._redirectEventId === id) {\n      return this.redirectUser;\n    }\n\n    return null;\n  }\n\n  async _persistUserIfCurrent(user: UserInternal): Promise<void> {\n    if (user === this.currentUser) {\n      return this.queue(async () => this.directlySetCurrentUser(user));\n    }\n  }\n\n  /** Notifies listeners only if the user is current */\n  _notifyListenersIfCurrent(user: UserInternal): void {\n    if (user === this.currentUser) {\n      this.notifyAuthListeners();\n    }\n  }\n\n  _key(): string {\n    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n  }\n\n  _startProactiveRefresh(): void {\n    this.isProactiveRefreshEnabled = true;\n    if (this.currentUser) {\n      this._currentUser._startProactiveRefresh();\n    }\n  }\n\n  _stopProactiveRefresh(): void {\n    this.isProactiveRefreshEnabled = false;\n    if (this.currentUser) {\n      this._currentUser._stopProactiveRefresh();\n    }\n  }\n\n  /** Returns the current user cast as the internal type */\n  get _currentUser(): UserInternal {\n    return this.currentUser as UserInternal;\n  }\n\n  private notifyAuthListeners(): void {\n    if (!this._isInitialized) {\n      return;\n    }\n\n    this.idTokenSubscription.next(this.currentUser);\n\n    const currentUid = this.currentUser?.uid ?? null;\n    if (this.lastNotifiedUid !== currentUid) {\n      this.lastNotifiedUid = currentUid;\n      this.authStateSubscription.next(this.currentUser);\n    }\n  }\n\n  private registerStateListener(\n    subscription: Subscription<User>,\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    if (this._deleted) {\n      return () => {};\n    }\n\n    const cb =\n      typeof nextOrObserver === 'function'\n        ? nextOrObserver\n        : nextOrObserver.next.bind(nextOrObserver);\n\n    let isUnsubscribed = false;\n\n    const promise = this._isInitialized\n      ? Promise.resolve()\n      : this._initializationPromise;\n    _assert(promise, this, AuthErrorCode.INTERNAL_ERROR);\n    // The callback needs to be called asynchronously per the spec.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    promise.then(() => {\n      if (isUnsubscribed) {\n        return;\n      }\n      cb(this.currentUser);\n    });\n\n    if (typeof nextOrObserver === 'function') {\n      const unsubscribe = subscription.addObserver(\n        nextOrObserver,\n        error,\n        completed\n      );\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    } else {\n      const unsubscribe = subscription.addObserver(nextOrObserver);\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    }\n  }\n\n  /**\n   * Unprotected (from race conditions) method to set the current user. This\n   * should only be called from within a queued callback. This is necessary\n   * because the queue shouldn't rely on another queued callback.\n   */\n  private async directlySetCurrentUser(\n    user: UserInternal | null\n  ): Promise<void> {\n    if (this.currentUser && this.currentUser !== user) {\n      this._currentUser._stopProactiveRefresh();\n    }\n    if (user && this.isProactiveRefreshEnabled) {\n      user._startProactiveRefresh();\n    }\n\n    this.currentUser = user;\n\n    if (user) {\n      await this.assertedPersistence.setCurrentUser(user);\n    } else {\n      await this.assertedPersistence.removeCurrentUser();\n    }\n  }\n\n  private queue(action: AsyncAction): Promise<void> {\n    // In case something errors, the callback still should be called in order\n    // to keep the promise chain alive\n    this.operations = this.operations.then(action, action);\n    return this.operations;\n  }\n\n  private get assertedPersistence(): PersistenceUserManager {\n    _assert(this.persistenceManager, this, AuthErrorCode.INTERNAL_ERROR);\n    return this.persistenceManager;\n  }\n\n  private frameworks: string[] = [];\n  private clientVersion: string;\n  _logFramework(framework: string): void {\n    if (!framework || this.frameworks.includes(framework)) {\n      return;\n    }\n    this.frameworks.push(framework);\n\n    // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n    // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n    this.frameworks.sort();\n    this.clientVersion = _getClientVersion(\n      this.config.clientPlatform,\n      this._getFrameworks()\n    );\n  }\n  _getFrameworks(): readonly string[] {\n    return this.frameworks;\n  }\n  async _getAdditionalHeaders(): Promise<Record<string, string>> {\n    // Additional headers on every request\n    const headers: Record<string, string> = {\n      [HttpHeader.X_CLIENT_VERSION]: this.clientVersion\n    };\n\n    if (this.app.options.appId) {\n      headers[HttpHeader.X_FIREBASE_GMPID] = this.app.options.appId;\n    }\n\n    // If the heartbeat service exists, add the heartbeat string\n    const heartbeatsHeader = await this.heartbeatServiceProvider\n      .getImmediate({\n        optional: true\n      })\n      ?.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers[HttpHeader.X_FIREBASE_CLIENT] = heartbeatsHeader;\n    }\n\n    // If the App Check service exists, add the App Check token in the headers\n    const appCheckToken = await this._getAppCheckToken();\n    if (appCheckToken) {\n      headers[HttpHeader.X_FIREBASE_APP_CHECK] = appCheckToken;\n    }\n\n    return headers;\n  }\n\n  async _getAppCheckToken(): Promise<string | undefined> {\n    const appCheckTokenResult = await this.appCheckServiceProvider\n      .getImmediate({ optional: true })\n      ?.getToken();\n    if (appCheckTokenResult?.error) {\n      // Context: appCheck.getToken() will never throw even if an error happened.\n      // In the error case, a dummy token will be returned along with an error field describing\n      // the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      _logWarn(\n        `Error while retrieving App Check token: ${appCheckTokenResult.error}`\n      );\n    }\n    return appCheckTokenResult?.token;\n  }\n}\n\n/**\n * Method to be used to cast down to our private implmentation of Auth.\n * It will also handle unwrapping from the compat type if necessary\n *\n * @param auth Auth object passed in from developer\n */\nexport function _castAuth(auth: Auth): AuthInternal {\n  return getModularInstance(auth) as AuthInternal;\n}\n\n/** Helper class to wrap subscriber logic */\nclass Subscription<T> {\n  private observer: Observer<T | null> | null = null;\n  readonly addObserver: Subscribe<T | null> = createSubscribe(\n    observer => (this.observer = observer)\n  );\n\n  constructor(readonly auth: AuthInternal) {}\n\n  get next(): NextFn<T | null> {\n    _assert(this.observer, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return this.observer.next.bind(this.observer);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../core/errors';\nimport { _createError } from '../core/util/assert';\n\nfunction getScriptParentElement(): HTMLDocument | HTMLHeadElement {\n  return document.getElementsByTagName('head')?.[0] ?? document;\n}\n\nexport function _loadJS(url: string): Promise<Event> {\n  // TODO: consider adding timeout support & cancellation\n  return new Promise((resolve, reject) => {\n    const el = document.createElement('script');\n    el.setAttribute('src', url);\n    el.onload = resolve;\n    el.onerror = e => {\n      const error = _createError(AuthErrorCode.INTERNAL_ERROR);\n      error.customData = e as unknown as Record<string, unknown>;\n      reject(error);\n    };\n    el.type = 'text/javascript';\n    el.charset = 'UTF-8';\n    getScriptParentElement().appendChild(el);\n  });\n}\n\nexport function _generateCallbackName(prefix: string): string {\n  return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n}\n","/* eslint-disable @typescript-eslint/no-require-imports */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isEnterprise, RecaptchaConfig } from './recaptcha';\nimport { getRecaptchaConfig } from '../../api/authentication/recaptcha';\nimport {\n  RecaptchaClientType,\n  RecaptchaVersion,\n  RecaptchaActionName\n} from '../../api';\n\nimport { Auth } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport * as jsHelpers from '../load_js';\n\nconst RECAPTCHA_ENTERPRISE_URL =\n  'https://www.google.com/recaptcha/enterprise.js?render=';\n\nexport const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\nexport const FAKE_TOKEN = 'NO_RECAPTCHA';\n\nexport class RecaptchaEnterpriseVerifier {\n  /**\n   * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n   */\n  readonly type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n\n  private readonly auth: AuthInternal;\n\n  /**\n   *\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   */\n  constructor(authExtern: Auth) {\n    this.auth = _castAuth(authExtern);\n  }\n\n  /**\n   * Executes the verification process.\n   *\n   * @returns A Promise for a token that can be used to assert the validity of a request.\n   */\n  async verify(\n    action: string = 'verify',\n    forceRefresh = false\n  ): Promise<string> {\n    async function retrieveSiteKey(auth: AuthInternal): Promise<string> {\n      if (!forceRefresh) {\n        if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n          return auth._agentRecaptchaConfig.siteKey;\n        }\n        if (\n          auth.tenantId != null &&\n          auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined\n        ) {\n          return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n        }\n      }\n\n      return new Promise<string>(async (resolve, reject) => {\n        getRecaptchaConfig(auth, {\n          clientType: RecaptchaClientType.WEB,\n          version: RecaptchaVersion.ENTERPRISE\n        })\n          .then(response => {\n            if (response.recaptchaKey === undefined) {\n              reject(new Error('recaptcha Enterprise site key undefined'));\n            } else {\n              const config = new RecaptchaConfig(response);\n              if (auth.tenantId == null) {\n                auth._agentRecaptchaConfig = config;\n              } else {\n                auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n              }\n              return resolve(config.siteKey);\n            }\n          })\n          .catch(error => {\n            reject(error);\n          });\n      });\n    }\n\n    function retrieveRecaptchaToken(\n      siteKey: string,\n      resolve: (value: string | PromiseLike<string>) => void,\n      reject: (reason?: unknown) => void\n    ): void {\n      const grecaptcha = window.grecaptcha;\n      if (isEnterprise(grecaptcha)) {\n        grecaptcha.enterprise.ready(() => {\n          grecaptcha.enterprise\n            .execute(siteKey, { action })\n            .then(token => {\n              resolve(token);\n            })\n            .catch(() => {\n              resolve(FAKE_TOKEN);\n            });\n        });\n      } else {\n        reject(Error('No reCAPTCHA enterprise script loaded.'));\n      }\n    }\n\n    return new Promise<string>((resolve, reject) => {\n      retrieveSiteKey(this.auth)\n        .then(siteKey => {\n          if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          } else {\n            if (typeof window === 'undefined') {\n              reject(\n                new Error('RecaptchaVerifier is only supported in browser')\n              );\n              return;\n            }\n            jsHelpers\n              ._loadJS(RECAPTCHA_ENTERPRISE_URL + siteKey)\n              .then(() => {\n                retrieveRecaptchaToken(siteKey, resolve, reject);\n              })\n              .catch(error => {\n                reject(error);\n              });\n          }\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n}\n\nexport async function injectRecaptchaFields<T>(\n  auth: AuthInternal,\n  request: T,\n  action: RecaptchaActionName,\n  captchaResp = false\n): Promise<T> {\n  const verifier = new RecaptchaEnterpriseVerifier(auth);\n  let captchaResponse;\n  try {\n    captchaResponse = await verifier.verify(action);\n  } catch (error) {\n    captchaResponse = await verifier.verify(action, true);\n  }\n  const newRequest = { ...request };\n  if (!captchaResp) {\n    Object.assign(newRequest, { captchaResponse });\n  } else {\n    Object.assign(newRequest, { 'captchaResp': captchaResponse });\n  }\n  Object.assign(newRequest, { 'clientType': RecaptchaClientType.WEB });\n  Object.assign(newRequest, {\n    'recaptchaVersion': RecaptchaVersion.ENTERPRISE\n  });\n  return newRequest;\n}\n\nexport async function _initializeRecaptchaConfig(auth: Auth): Promise<void> {\n  const authInternal = _castAuth(auth);\n\n  const response = await getRecaptchaConfig(authInternal, {\n    clientType: RecaptchaClientType.WEB,\n    version: RecaptchaVersion.ENTERPRISE\n  });\n\n  const config = new RecaptchaConfig(response);\n  if (authInternal.tenantId == null) {\n    authInternal._agentRecaptchaConfig = config;\n  } else {\n    authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n  }\n\n  if (config.emailPasswordEnabled) {\n    const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n    void verifier.verify();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp } from '@firebase/app';\nimport { deepEqual } from '@firebase/util';\nimport { Auth, Dependencies } from '../../model/public_types';\n\nimport { AuthErrorCode } from '../errors';\nimport { PersistenceInternal } from '../persistence';\nimport { _fail } from '../util/assert';\nimport { _getInstance } from '../util/instantiator';\nimport { AuthImpl } from './auth_impl';\n\n/**\n * Initializes an {@link Auth} instance with fine-grained control over\n * {@link Dependencies}.\n *\n * @remarks\n *\n * This function allows more control over the {@link Auth} instance than\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\n * need control over which persistence layer is used, or to minimize bundle\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n *\n * For example, if your app only uses anonymous accounts and you only want\n * accounts saved for the current session, initialize `Auth` with:\n *\n * ```js\n * const auth = initializeAuth(app, {\n *   persistence: browserSessionPersistence,\n *   popupRedirectResolver: undefined,\n * });\n * ```\n *\n * @public\n */\nexport function initializeAuth(app: FirebaseApp, deps?: Dependencies): Auth {\n  const provider = _getProvider(app, 'auth');\n\n  if (provider.isInitialized()) {\n    const auth = provider.getImmediate() as AuthImpl;\n    const initialOptions = provider.getOptions() as Dependencies;\n    if (deepEqual(initialOptions, deps ?? {})) {\n      return auth;\n    } else {\n      _fail(auth, AuthErrorCode.ALREADY_INITIALIZED);\n    }\n  }\n\n  const auth = provider.initialize({ options: deps }) as AuthImpl;\n\n  return auth;\n}\n\nexport function _initializeAuthInstance(\n  auth: AuthImpl,\n  deps?: Dependencies\n): void {\n  const persistence = deps?.persistence || [];\n  const hierarchy = (\n    Array.isArray(persistence) ? persistence : [persistence]\n  ).map<PersistenceInternal>(_getInstance);\n  if (deps?.errorMap) {\n    auth._updateErrorMap(deps.errorMap);\n  }\n\n  // This promise is intended to float; auth initialization happens in the\n  // background, meanwhile the auth object may be used by the app.\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Auth } from '../../model/public_types';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _castAuth } from './auth_impl';\n\n/**\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n * Firebase Auth services.\n *\n * @remarks\n * This must be called synchronously immediately following the first call to\n * {@link initializeAuth}.  Do not use with production credentials as emulator\n * traffic is not encrypted.\n *\n *\n * @example\n * ```javascript\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n * `true` to disable the warning banner attached to the DOM.\n *\n * @public\n */\nexport function connectAuthEmulator(\n  auth: Auth,\n  url: string,\n  options?: { disableWarnings: boolean }\n): void {\n  const authInternal = _castAuth(auth);\n  _assert(\n    authInternal._canInitEmulator,\n    authInternal,\n    AuthErrorCode.EMULATOR_CONFIG_FAILED\n  );\n\n  _assert(\n    /^https?:\\/\\//.test(url),\n    authInternal,\n    AuthErrorCode.INVALID_EMULATOR_SCHEME\n  );\n\n  const disableWarnings = !!options?.disableWarnings;\n\n  const protocol = extractProtocol(url);\n  const { host, port } = extractHostAndPort(url);\n  const portStr = port === null ? '' : `:${port}`;\n\n  // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n  authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };\n  authInternal.settings.appVerificationDisabledForTesting = true;\n  authInternal.emulatorConfig = Object.freeze({\n    host,\n    port,\n    protocol: protocol.replace(':', ''),\n    options: Object.freeze({ disableWarnings })\n  });\n\n  if (!disableWarnings) {\n    emitEmulatorWarning();\n  }\n}\n\nfunction extractProtocol(url: string): string {\n  const protocolEnd = url.indexOf(':');\n  return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n}\n\nfunction extractHostAndPort(url: string): {\n  host: string;\n  port: number | null;\n} {\n  const protocol = extractProtocol(url);\n  const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n  if (!authority) {\n    return { host: '', port: null };\n  }\n  const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n  const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n  if (bracketedIPv6) {\n    const host = bracketedIPv6[1];\n    return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };\n  } else {\n    const [host, port] = hostAndPort.split(':');\n    return { host, port: parsePort(port) };\n  }\n}\n\nfunction parsePort(portStr: string): number | null {\n  if (!portStr) {\n    return null;\n  }\n  const port = Number(portStr);\n  if (isNaN(port)) {\n    return null;\n  }\n  return port;\n}\n\nfunction emitEmulatorWarning(): void {\n  function attachBanner(): void {\n    const el = document.createElement('p');\n    const sty = el.style;\n    el.innerText =\n      'Running in emulator mode. Do not use with production credentials.';\n    sty.position = 'fixed';\n    sty.width = '100%';\n    sty.backgroundColor = '#ffffff';\n    sty.border = '.1em solid #000000';\n    sty.color = '#b50000';\n    sty.bottom = '0px';\n    sty.left = '0px';\n    sty.margin = '0px';\n    sty.zIndex = '10000';\n    sty.textAlign = 'center';\n    el.classList.add('firebase-emulator-warning');\n    document.body.appendChild(el);\n  }\n\n  if (typeof console !== 'undefined' && typeof console.info === 'function') {\n    console.info(\n      'WARNING: You are using the Auth Emulator,' +\n        ' which is intended for local testing only.  Do not use with' +\n        ' production credentials.'\n    );\n  }\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    if (document.readyState === 'loading') {\n      window.addEventListener('DOMContentLoaded', attachBanner);\n    } else {\n      attachBanner();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { debugFail } from '../util/assert';\n\n/**\n * Interface that represents the credentials returned by an {@link AuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nexport class AuthCredential {\n  /** @internal */\n  protected constructor(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    readonly providerId: string,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    readonly signInMethod: string\n  ) {}\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object {\n    return debugFail('not implemented');\n  }\n\n  /** @internal */\n  _getIdTokenResponse(_auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _linkToIdToken(\n    _auth: AuthInternal,\n    _idToken: string\n  ): Promise<IdTokenResponse> {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _getReauthenticationResolver(_auth: AuthInternal): Promise<IdTokenResponse> {\n    return debugFail('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeOperation, Auth } from '../../model/public_types';\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { MfaEnrollment } from './mfa';\n\nexport interface ResetPasswordRequest {\n  oobCode: string;\n  newPassword?: string;\n  tenantId?: string;\n}\n\nexport interface ResetPasswordResponse {\n  email: string;\n  newEmail?: string;\n  requestType?: ActionCodeOperation;\n  mfaInfo?: MfaEnrollment;\n}\n\nexport async function resetPassword(\n  auth: Auth,\n  request: ResetPasswordRequest\n): Promise<ResetPasswordResponse> {\n  return _performApiRequest<ResetPasswordRequest, ResetPasswordResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.RESET_PASSWORD,\n    _addTidIfNecessary(auth, request)\n  );\n}\nexport interface UpdateEmailPasswordRequest {\n  idToken: string;\n  returnSecureToken?: boolean;\n  email?: string;\n  password?: string;\n}\n\nexport interface UpdateEmailPasswordResponse extends IdTokenResponse {}\n\nexport async function updateEmailPassword(\n  auth: Auth,\n  request: UpdateEmailPasswordRequest\n): Promise<UpdateEmailPasswordResponse> {\n  return _performApiRequest<\n    UpdateEmailPasswordRequest,\n    UpdateEmailPasswordResponse\n  >(auth, HttpMethod.POST, Endpoint.SET_ACCOUNT_INFO, request);\n}\n\nexport interface ApplyActionCodeRequest {\n  oobCode: string;\n  tenantId?: string;\n}\n\nexport interface ApplyActionCodeResponse {}\n\nexport async function applyActionCode(\n  auth: Auth,\n  request: ApplyActionCodeRequest\n): Promise<ApplyActionCodeResponse> {\n  return _performApiRequest<ApplyActionCodeRequest, ApplyActionCodeResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SET_ACCOUNT_INFO,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeOperation, Auth } from '../../model/public_types';\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary,\n  _performApiRequest,\n  _performSignInRequest\n} from '../index';\nimport { IdToken, IdTokenResponse } from '../../model/id_token';\n\nexport interface SignInWithPasswordRequest {\n  returnSecureToken?: boolean;\n  email: string;\n  password: string;\n  tenantId?: string;\n  captchaResponse?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface SignInWithPasswordResponse extends IdTokenResponse {\n  email: string;\n  displayName: string;\n}\n\nexport async function signInWithPassword(\n  auth: Auth,\n  request: SignInWithPasswordRequest\n): Promise<SignInWithPasswordResponse> {\n  return _performSignInRequest<\n    SignInWithPasswordRequest,\n    SignInWithPasswordResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PASSWORD,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface GetOobCodeRequest {\n  email?: string; // Everything except VERIFY_AND_CHANGE_EMAIL\n  continueUrl?: string;\n  iOSBundleId?: string;\n  iosAppStoreId?: string;\n  androidPackageName?: string;\n  androidInstallApp?: boolean;\n  androidMinimumVersionCode?: string;\n  canHandleCodeInApp?: boolean;\n  dynamicLinkDomain?: string;\n  tenantId?: string;\n  targetProjectid?: string;\n}\n\nexport interface VerifyEmailRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.VERIFY_EMAIL;\n  idToken: IdToken;\n}\n\nexport interface PasswordResetRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.PASSWORD_RESET;\n  email: string;\n  captchaResp?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface EmailSignInRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.EMAIL_SIGNIN;\n  email: string;\n  captchaResp?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface VerifyAndChangeEmailRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL;\n  idToken: IdToken;\n  newEmail: string;\n}\n\ninterface GetOobCodeResponse {\n  email: string;\n}\n\nexport interface VerifyEmailResponse extends GetOobCodeResponse {}\nexport interface PasswordResetResponse extends GetOobCodeResponse {}\nexport interface EmailSignInResponse extends GetOobCodeResponse {}\nexport interface VerifyAndChangeEmailResponse extends GetOobCodeRequest {}\n\nasync function sendOobCode(\n  auth: Auth,\n  request: GetOobCodeRequest\n): Promise<GetOobCodeResponse> {\n  return _performApiRequest<GetOobCodeRequest, GetOobCodeResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SEND_OOB_CODE,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport async function sendEmailVerification(\n  auth: Auth,\n  request: VerifyEmailRequest\n): Promise<VerifyEmailResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function sendPasswordResetEmail(\n  auth: Auth,\n  request: PasswordResetRequest\n): Promise<PasswordResetResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function sendSignInLinkToEmail(\n  auth: Auth,\n  request: EmailSignInRequest\n): Promise<EmailSignInResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function verifyAndChangeEmail(\n  auth: Auth,\n  request: VerifyAndChangeEmailRequest\n): Promise<VerifyAndChangeEmailResponse> {\n  return sendOobCode(auth, request);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performSignInRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithEmailLinkRequest {\n  email: string;\n  oobCode: string;\n  tenantId?: string;\n}\n\nexport interface SignInWithEmailLinkResponse extends IdTokenResponse {\n  email: string;\n  isNewUser: boolean;\n}\n\nexport async function signInWithEmailLink(\n  auth: Auth,\n  request: SignInWithEmailLinkRequest\n): Promise<SignInWithEmailLinkResponse> {\n  return _performSignInRequest<\n    SignInWithEmailLinkRequest,\n    SignInWithEmailLinkResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_EMAIL_LINK,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface SignInWithEmailLinkForLinkingRequest\n  extends SignInWithEmailLinkRequest {\n  idToken: string;\n}\n\nexport async function signInWithEmailLinkForLinking(\n  auth: Auth,\n  request: SignInWithEmailLinkForLinkingRequest\n): Promise<SignInWithEmailLinkResponse> {\n  return _performSignInRequest<\n    SignInWithEmailLinkForLinkingRequest,\n    SignInWithEmailLinkResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_EMAIL_LINK,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\nimport { updateEmailPassword } from '../../api/account_management/email_and_password';\nimport {\n  signInWithPassword,\n  SignInWithPasswordRequest\n} from '../../api/authentication/email_and_password';\nimport {\n  signInWithEmailLink,\n  signInWithEmailLinkForLinking\n} from '../../api/authentication/email_link';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from '../util/assert';\nimport { AuthCredential } from './auth_credential';\nimport { injectRecaptchaFields } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { RecaptchaActionName, RecaptchaClientType } from '../../api';\n/**\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n * {@link ProviderId}.PASSWORD\n *\n * @remarks\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @public\n */\nexport class EmailAuthCredential extends AuthCredential {\n  /** @internal */\n  private constructor(\n    /** @internal */\n    readonly _email: string,\n    /** @internal */\n    readonly _password: string,\n    signInMethod: SignInMethod,\n    /** @internal */\n    readonly _tenantId: string | null = null\n  ) {\n    super(ProviderId.PASSWORD, signInMethod);\n  }\n\n  /** @internal */\n  static _fromEmailAndPassword(\n    email: string,\n    password: string\n  ): EmailAuthCredential {\n    return new EmailAuthCredential(\n      email,\n      password,\n      SignInMethod.EMAIL_PASSWORD\n    );\n  }\n\n  /** @internal */\n  static _fromEmailAndCode(\n    email: string,\n    oobCode: string,\n    tenantId: string | null = null\n  ): EmailAuthCredential {\n    return new EmailAuthCredential(\n      email,\n      oobCode,\n      SignInMethod.EMAIL_LINK,\n      tenantId\n    );\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON(): object {\n    return {\n      email: this._email,\n      password: this._password,\n      signInMethod: this.signInMethod,\n      tenantId: this._tenantId\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n   *\n   * @param json - Either `object` or the stringified representation of the object. When string is\n   * provided, `JSON.parse` would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n   */\n  static fromJSON(json: object | string): EmailAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    if (obj?.email && obj?.password) {\n      if (obj.signInMethod === SignInMethod.EMAIL_PASSWORD) {\n        return this._fromEmailAndPassword(obj.email, obj.password);\n      } else if (obj.signInMethod === SignInMethod.EMAIL_LINK) {\n        return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n      }\n    }\n    return null;\n  }\n\n  /** @internal */\n  async _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    switch (this.signInMethod) {\n      case SignInMethod.EMAIL_PASSWORD:\n        const request: SignInWithPasswordRequest = {\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: RecaptchaClientType.WEB\n        };\n        if (auth._getRecaptchaConfig()?.emailPasswordEnabled) {\n          const requestWithRecaptcha = await injectRecaptchaFields(\n            auth,\n            request,\n            RecaptchaActionName.SIGN_IN_WITH_PASSWORD\n          );\n          return signInWithPassword(auth, requestWithRecaptcha);\n        } else {\n          return signInWithPassword(auth, request).catch(async error => {\n            if (\n              error.code === `auth/${AuthErrorCode.MISSING_RECAPTCHA_TOKEN}`\n            ) {\n              console.log(\n                'Sign-in with email address and password is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-in flow.'\n              );\n              const requestWithRecaptcha = await injectRecaptchaFields(\n                auth,\n                request,\n                RecaptchaActionName.SIGN_IN_WITH_PASSWORD\n              );\n              return signInWithPassword(auth, requestWithRecaptcha);\n            } else {\n              return Promise.reject(error);\n            }\n          });\n        }\n      case SignInMethod.EMAIL_LINK:\n        return signInWithEmailLink(auth, {\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  /** @internal */\n  async _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    switch (this.signInMethod) {\n      case SignInMethod.EMAIL_PASSWORD:\n        return updateEmailPassword(auth, {\n          idToken,\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password\n        });\n      case SignInMethod.EMAIL_LINK:\n        return signInWithEmailLinkForLinking(auth, {\n          idToken,\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return this._getIdTokenResponse(auth);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdToken, IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithIdpRequest {\n  requestUri: string;\n  postBody?: string;\n  sessionId?: string;\n  tenantId?: string;\n  returnSecureToken: boolean;\n  returnIdpCredential?: boolean;\n  idToken?: IdToken;\n  autoCreate?: boolean;\n  pendingToken?: string;\n}\n\n/**\n * @internal\n */\nexport interface SignInWithIdpResponse extends IdTokenResponse {\n  oauthAccessToken?: string;\n  oauthTokenSecret?: string;\n  nonce?: string;\n  oauthIdToken?: string;\n  pendingToken?: string;\n}\n\nexport async function signInWithIdp(\n  auth: Auth,\n  request: SignInWithIdpRequest\n): Promise<SignInWithIdpResponse> {\n  return _performSignInRequest<SignInWithIdpRequest, SignInWithIdpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_IDP,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystring } from '@firebase/util';\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from '../util/assert';\nimport { AuthCredential } from './auth_credential';\n\nconst IDP_REQUEST_URI = 'http://localhost';\n\nexport interface OAuthCredentialParams {\n  // OAuth 2 uses either id token or access token\n  idToken?: string | null;\n  accessToken?: string | null;\n\n  // These fields are used with OAuth 1\n  oauthToken?: string;\n  secret?: string;\n  oauthTokenSecret?: string;\n\n  // Nonce is only set if pendingToken is not present\n  nonce?: string;\n  pendingToken?: string;\n\n  // Utilities\n  providerId: string;\n  signInMethod: string;\n}\n\n/**\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nexport class OAuthCredential extends AuthCredential {\n  /**\n   * The OAuth ID token associated with the credential if it belongs to an OIDC provider,\n   * such as `google.com`.\n   * @readonly\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token associated with the credential if it belongs to an\n   * {@link OAuthProvider}, such as `facebook.com`, `twitter.com`, etc.\n   * @readonly\n   */\n  accessToken?: string;\n  /**\n   * The OAuth access token secret associated with the credential if it belongs to an OAuth 1.0\n   * provider, such as `twitter.com`.\n   * @readonly\n   */\n  secret?: string;\n\n  private nonce?: string;\n  private pendingToken: string | null = null;\n\n  /** @internal */\n  static _fromParams(params: OAuthCredentialParams): OAuthCredential {\n    const cred = new OAuthCredential(params.providerId, params.signInMethod);\n\n    if (params.idToken || params.accessToken) {\n      // OAuth 2 and either ID token or access token.\n      if (params.idToken) {\n        cred.idToken = params.idToken;\n      }\n\n      if (params.accessToken) {\n        cred.accessToken = params.accessToken;\n      }\n\n      // Add nonce if available and no pendingToken is present.\n      if (params.nonce && !params.pendingToken) {\n        cred.nonce = params.nonce;\n      }\n\n      if (params.pendingToken) {\n        cred.pendingToken = params.pendingToken;\n      }\n    } else if (params.oauthToken && params.oauthTokenSecret) {\n      // OAuth 1 and OAuth token with token secret\n      cred.accessToken = params.oauthToken;\n      cred.secret = params.oauthTokenSecret;\n    } else {\n      _fail(AuthErrorCode.ARGUMENT_ERROR);\n    }\n\n    return cred;\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON(): object {\n    return {\n      idToken: this.idToken,\n      accessToken: this.accessToken,\n      secret: this.secret,\n      nonce: this.nonce,\n      pendingToken: this.pendingToken,\n      providerId: this.providerId,\n      signInMethod: this.signInMethod\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json: string | object): OAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const { providerId, signInMethod, ...rest }: OAuthCredentialParams = obj;\n    if (!providerId || !signInMethod) {\n      return null;\n    }\n\n    const cred = new OAuthCredential(providerId, signInMethod);\n    cred.idToken = rest.idToken || undefined;\n    cred.accessToken = rest.accessToken || undefined;\n    cred.secret = rest.secret;\n    cred.nonce = rest.nonce;\n    cred.pendingToken = rest.pendingToken || null;\n    return cred;\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n\n  private buildRequest(): SignInWithIdpRequest {\n    const request: SignInWithIdpRequest = {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true\n    };\n\n    if (this.pendingToken) {\n      request.pendingToken = this.pendingToken;\n    } else {\n      const postBody: Record<string, string> = {};\n      if (this.idToken) {\n        postBody['id_token'] = this.idToken;\n      }\n      if (this.accessToken) {\n        postBody['access_token'] = this.accessToken;\n      }\n      if (this.secret) {\n        postBody['oauth_token_secret'] = this.secret;\n      }\n\n      postBody['providerId'] = this.providerId;\n      if (this.nonce && !this.pendingToken) {\n        postBody['nonce'] = this.nonce;\n      }\n\n      request.postBody = querystring(postBody);\n    }\n\n    return request;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _makeTaggedError,\n  _performApiRequest,\n  _performSignInRequest\n} from '../index';\nimport { AuthErrorCode } from '../../core/errors';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { ServerError, ServerErrorMap } from '../errors';\nimport { Auth } from '../../model/public_types';\n\nexport interface SendPhoneVerificationCodeRequest {\n  phoneNumber: string;\n  recaptchaToken: string;\n  tenantId?: string;\n}\n\nexport interface SendPhoneVerificationCodeResponse {\n  sessionInfo: string;\n}\n\nexport async function sendPhoneVerificationCode(\n  auth: Auth,\n  request: SendPhoneVerificationCodeRequest\n): Promise<SendPhoneVerificationCodeResponse> {\n  return _performApiRequest<\n    SendPhoneVerificationCodeRequest,\n    SendPhoneVerificationCodeResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SEND_VERIFICATION_CODE,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\n/**\n * @internal\n */\nexport interface SignInWithPhoneNumberRequest {\n  temporaryProof?: string;\n  phoneNumber?: string;\n  sessionInfo?: string;\n  code?: string;\n  tenantId?: string;\n}\n\nexport interface LinkWithPhoneNumberRequest\n  extends SignInWithPhoneNumberRequest {\n  idToken: string;\n}\n\n/**\n * @internal\n */\nexport interface SignInWithPhoneNumberResponse extends IdTokenResponse {\n  temporaryProof?: string;\n  phoneNumber?: string;\n}\n\nexport async function signInWithPhoneNumber(\n  auth: Auth,\n  request: SignInWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  return _performSignInRequest<\n    SignInWithPhoneNumberRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport async function linkWithPhoneNumber(\n  auth: Auth,\n  request: LinkWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  const response = await _performSignInRequest<\n    LinkWithPhoneNumberRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, request)\n  );\n  if (response.temporaryProof) {\n    throw _makeTaggedError(auth, AuthErrorCode.NEED_CONFIRMATION, response);\n  }\n  return response;\n}\n\ninterface VerifyPhoneNumberForExistingRequest\n  extends SignInWithPhoneNumberRequest {\n  operation: 'REAUTH';\n}\n\nconst VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_: Partial<\n  ServerErrorMap<ServerError>\n> = {\n  [ServerError.USER_NOT_FOUND]: AuthErrorCode.USER_DELETED\n};\n\nexport async function verifyPhoneNumberForExisting(\n  auth: Auth,\n  request: SignInWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  const apiRequest: VerifyPhoneNumberForExistingRequest = {\n    ...request,\n    operation: 'REAUTH'\n  };\n  return _performSignInRequest<\n    VerifyPhoneNumberForExistingRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, apiRequest),\n    VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport {\n  linkWithPhoneNumber,\n  signInWithPhoneNumber,\n  SignInWithPhoneNumberRequest,\n  verifyPhoneNumberForExisting\n} from '../../api/authentication/sms';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthCredential } from './auth_credential';\n\nexport interface PhoneAuthCredentialParameters {\n  verificationId?: string;\n  verificationCode?: string;\n  phoneNumber?: string;\n  temporaryProof?: string;\n}\n\n/**\n * Represents the credentials returned by {@link PhoneAuthProvider}.\n *\n * @public\n */\nexport class PhoneAuthCredential extends AuthCredential {\n  private constructor(private readonly params: PhoneAuthCredentialParameters) {\n    super(ProviderId.PHONE, SignInMethod.PHONE);\n  }\n\n  /** @internal */\n  static _fromVerification(\n    verificationId: string,\n    verificationCode: string\n  ): PhoneAuthCredential {\n    return new PhoneAuthCredential({ verificationId, verificationCode });\n  }\n\n  /** @internal */\n  static _fromTokenResponse(\n    phoneNumber: string,\n    temporaryProof: string\n  ): PhoneAuthCredential {\n    return new PhoneAuthCredential({ phoneNumber, temporaryProof });\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return signInWithPhoneNumber(auth, this._makeVerificationRequest());\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    return linkWithPhoneNumber(auth, {\n      idToken,\n      ...this._makeVerificationRequest()\n    });\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n  }\n\n  /** @internal */\n  _makeVerificationRequest(): SignInWithPhoneNumberRequest {\n    const { temporaryProof, phoneNumber, verificationId, verificationCode } =\n      this.params;\n    if (temporaryProof && phoneNumber) {\n      return { temporaryProof, phoneNumber };\n    }\n\n    return {\n      sessionInfo: verificationId,\n      code: verificationCode\n    };\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON(): object {\n    const obj: Record<string, string> = {\n      providerId: this.providerId\n    };\n    if (this.params.phoneNumber) {\n      obj.phoneNumber = this.params.phoneNumber;\n    }\n    if (this.params.temporaryProof) {\n      obj.temporaryProof = this.params.temporaryProof;\n    }\n    if (this.params.verificationCode) {\n      obj.verificationCode = this.params.verificationCode;\n    }\n    if (this.params.verificationId) {\n      obj.verificationId = this.params.verificationId;\n    }\n\n    return obj;\n  }\n\n  /** Generates a phone credential based on a plain object or a JSON string. */\n  static fromJSON(json: object | string): PhoneAuthCredential | null {\n    if (typeof json === 'string') {\n      json = JSON.parse(json);\n    }\n\n    const { verificationId, verificationCode, phoneNumber, temporaryProof } =\n      json as { [key: string]: string };\n    if (\n      !verificationCode &&\n      !verificationId &&\n      !phoneNumber &&\n      !temporaryProof\n    ) {\n      return null;\n    }\n\n    return new PhoneAuthCredential({\n      verificationId,\n      verificationCode,\n      phoneNumber,\n      temporaryProof\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { extractQuerystring, querystringDecode } from '@firebase/util';\nimport { ActionCodeOperation } from '../model/public_types';\nimport { AuthErrorCode } from './errors';\nimport { _assert } from './util/assert';\n\n/**\n * Enums for fields in URL query string.\n *\n * @enum {string}\n */\nconst enum QueryField {\n  API_KEY = 'apiKey',\n  CODE = 'oobCode',\n  CONTINUE_URL = 'continueUrl',\n  LANGUAGE_CODE = 'languageCode',\n  MODE = 'mode',\n  TENANT_ID = 'tenantId'\n}\n\n/**\n * Maps the mode string in action code URL to Action Code Info operation.\n *\n * @param mode\n */\nfunction parseMode(mode: string | null): ActionCodeOperation | null {\n  switch (mode) {\n    case 'recoverEmail':\n      return ActionCodeOperation.RECOVER_EMAIL;\n    case 'resetPassword':\n      return ActionCodeOperation.PASSWORD_RESET;\n    case 'signIn':\n      return ActionCodeOperation.EMAIL_SIGNIN;\n    case 'verifyEmail':\n      return ActionCodeOperation.VERIFY_EMAIL;\n    case 'verifyAndChangeEmail':\n      return ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL;\n    case 'revertSecondFactorAddition':\n      return ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION;\n    default:\n      return null;\n  }\n}\n\n/**\n * Helper to parse FDL links\n *\n * @param url\n */\nfunction parseDeepLink(url: string): string {\n  const link = querystringDecode(extractQuerystring(url))['link'];\n\n  // Double link case (automatic redirect).\n  const doubleDeepLink = link\n    ? querystringDecode(extractQuerystring(link))['deep_link_id']\n    : null;\n  // iOS custom scheme links.\n  const iOSDeepLink = querystringDecode(extractQuerystring(url))[\n    'deep_link_id'\n  ];\n  const iOSDoubleDeepLink = iOSDeepLink\n    ? querystringDecode(extractQuerystring(iOSDeepLink))['link']\n    : null;\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n\n/**\n * A utility class to parse email action URLs such as password reset, email verification,\n * email link sign in, etc.\n *\n * @public\n */\nexport class ActionCodeURL {\n  /**\n   * The API key of the email action link.\n   */\n  readonly apiKey: string;\n  /**\n   * The action code of the email action link.\n   */\n  readonly code: string;\n  /**\n   * The continue URL of the email action link. Null if not provided.\n   */\n  readonly continueUrl: string | null;\n  /**\n   * The language code of the email action link. Null if not provided.\n   */\n  readonly languageCode: string | null;\n  /**\n   * The action performed by the email action link. It returns from one of the types from\n   * {@link ActionCodeInfo}\n   */\n  readonly operation: string;\n  /**\n   * The tenant ID of the email action link. Null if the email action is from the parent project.\n   */\n  readonly tenantId: string | null;\n\n  /**\n   * @param actionLink - The link from which to extract the URL.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @internal\n   */\n  constructor(actionLink: string) {\n    const searchParams = querystringDecode(extractQuerystring(actionLink));\n    const apiKey = searchParams[QueryField.API_KEY] ?? null;\n    const code = searchParams[QueryField.CODE] ?? null;\n    const operation = parseMode(searchParams[QueryField.MODE] ?? null);\n    // Validate API key, code and mode.\n    _assert(apiKey && code && operation, AuthErrorCode.ARGUMENT_ERROR);\n    this.apiKey = apiKey;\n    this.operation = operation;\n    this.code = code;\n    this.continueUrl = searchParams[QueryField.CONTINUE_URL] ?? null;\n    this.languageCode = searchParams[QueryField.LANGUAGE_CODE] ?? null;\n    this.tenantId = searchParams[QueryField.TENANT_ID] ?? null;\n  }\n\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n   * otherwise returns null.\n   *\n   * @param link  - The email action link string.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @public\n   */\n  static parseLink(link: string): ActionCodeURL | null {\n    const actionLink = parseDeepLink(link);\n    try {\n      return new ActionCodeURL(actionLink);\n    } catch {\n      return null;\n    }\n  }\n}\n\n/**\n * Parses the email action link string and returns an {@link ActionCodeURL} if\n * the link is valid, otherwise returns null.\n *\n * @public\n */\nexport function parseActionCodeURL(link: string): ActionCodeURL | null {\n  return ActionCodeURL.parseLink(link);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\nimport { AuthProvider } from '../../model/public_types';\n\nimport { ActionCodeURL } from '../action_code_url';\nimport { EmailAuthCredential } from '../credentials/email';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\n\n/**\n * Provider for generating {@link EmailAuthCredential}.\n *\n * @public\n */\nexport class EmailAuthProvider implements AuthProvider {\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  static readonly PROVIDER_ID: 'password' = ProviderId.PASSWORD;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  static readonly EMAIL_PASSWORD_SIGN_IN_METHOD: 'password' =\n    SignInMethod.EMAIL_PASSWORD;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  static readonly EMAIL_LINK_SIGN_IN_METHOD: 'emailLink' =\n    SignInMethod.EMAIL_LINK;\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  readonly providerId = EmailAuthProvider.PROVIDER_ID;\n\n  /**\n   * Initialize an {@link AuthCredential} using an email and password.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credential(email, password);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n   * ```\n   *\n   * @param email - Email address.\n   * @param password - User account password.\n   * @returns The auth provider credential.\n   */\n  static credential(email: string, password: string): EmailAuthCredential {\n    return EmailAuthCredential._fromEmailAndPassword(email, password);\n  }\n\n  /**\n   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n   * email link operation.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * await sendSignInLinkToEmail(auth, email);\n   * // Obtain emailLink from user.\n   * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance used to verify the link.\n   * @param email - Email address.\n   * @param emailLink - Sign-in email link.\n   * @returns - The auth provider credential.\n   */\n  static credentialWithLink(\n    email: string,\n    emailLink: string\n  ): EmailAuthCredential {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    _assert(actionCodeUrl, AuthErrorCode.ARGUMENT_ERROR);\n\n    return EmailAuthCredential._fromEmailAndCode(\n      email,\n      actionCodeUrl.code,\n      actionCodeUrl.tenantId\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider } from '../../model/public_types';\n\n/**\n * Map of OAuth Custom Parameters.\n *\n * @public\n */\nexport type CustomParameters = Record<string, string>;\n\n/**\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\n *\n * This class is not meant to be instantiated directly.\n *\n * @public\n */\nexport abstract class FederatedAuthProvider implements AuthProvider {\n  /** @internal */\n  defaultLanguageCode: string | null = null;\n  /** @internal */\n  private customParameters: CustomParameters = {};\n\n  /**\n   * Constructor for generic OAuth providers.\n   *\n   * @param providerId - Provider for which credentials should be generated.\n   */\n  constructor(readonly providerId: string) {}\n\n  /**\n   * Set the language gode.\n   *\n   * @param languageCode - language code\n   */\n  setDefaultLanguage(languageCode: string | null): void {\n    this.defaultLanguageCode = languageCode;\n  }\n\n  /**\n   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n   * operations.\n   *\n   * @remarks\n   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n   *\n   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n   */\n  setCustomParameters(customOAuthParameters: CustomParameters): AuthProvider {\n    this.customParameters = customOAuthParameters;\n    return this;\n  }\n\n  /**\n   * Retrieve the current list of {@link CustomParameters}.\n   */\n  getCustomParameters(): CustomParameters {\n    return this.customParameters;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, UserCredential } from '../../model/public_types';\n\nimport { _assert } from '../util/assert';\nimport { AuthErrorCode } from '../errors';\n\nimport { OAuthCredential, OAuthCredentialParams } from '../credentials/oauth';\nimport { UserCredentialInternal } from '../../model/user';\nimport { FirebaseError } from '@firebase/util';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { SignInWithIdpResponse } from '../../../internal';\nimport { FederatedAuthProvider } from './federated';\n\n/**\n * Defines the options for initializing an {@link OAuthCredential}.\n *\n * @remarks\n * For ID tokens with nonce claim, the raw nonce has to also be provided.\n *\n * @public\n */\nexport interface OAuthCredentialOptions {\n  /**\n   * The OAuth ID token used to initialize the {@link OAuthCredential}.\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token used to initialize the {@link OAuthCredential}.\n   */\n  accessToken?: string;\n  /**\n   * The raw nonce associated with the ID token.\n   *\n   * @remarks\n   * It is required when an ID token with a nonce field is provided. The SHA-256 hash of the\n   * raw nonce must match the nonce field in the ID token.\n   */\n  rawNonce?: string;\n}\n\n/**\n * Common code to all OAuth providers. This is separate from the\n * {@link OAuthProvider} so that child providers (like\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n * Instead, they rely on a static `credential` method.\n */\nexport abstract class BaseOAuthProvider\n  extends FederatedAuthProvider\n  implements AuthProvider\n{\n  /** @internal */\n  private scopes: string[] = [];\n\n  /**\n   * Add an OAuth scope to the credential.\n   *\n   * @param scope - Provider OAuth scope to add.\n   */\n  addScope(scope: string): AuthProvider {\n    // If not already added, add scope to list.\n    if (!this.scopes.includes(scope)) {\n      this.scopes.push(scope);\n    }\n    return this;\n  }\n\n  /**\n   * Retrieve the current list of OAuth scopes.\n   */\n  getScopes(): string[] {\n    return [...this.scopes];\n  }\n}\n\n/**\n * Provider for generating generic {@link OAuthCredential}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new OAuthProvider('google.com');\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a OAuth Access Token for the provider.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new OAuthProvider('google.com');\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a OAuth Access Token for the provider.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nexport class OAuthProvider extends BaseOAuthProvider {\n  /**\n   * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json: object | string): OAuthCredential {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    _assert(\n      'providerId' in obj && 'signInMethod' in obj,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    return OAuthCredential._fromParams(obj);\n  }\n\n  /**\n   * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n   *\n   * @remarks\n   * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n   * the raw nonce must match the nonce field in the ID token.\n   *\n   * @example\n   * ```javascript\n   * // `googleUser` from the onsuccess Google Sign In callback.\n   * // Initialize a generate OAuth provider with a `google.com` providerId.\n   * const provider = new OAuthProvider('google.com');\n   * const credential = provider.credential({\n   *   idToken: googleUser.getAuthResponse().id_token,\n   * });\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param params - Either the options object containing the ID token, access token and raw nonce\n   * or the ID token string.\n   */\n  credential(params: OAuthCredentialOptions): OAuthCredential {\n    return this._credential({ ...params, nonce: params.rawNonce });\n  }\n\n  /** An internal credential method that accepts more permissive options */\n  private _credential(\n    params: Omit<OAuthCredentialParams, 'signInMethod' | 'providerId'>\n  ): OAuthCredential {\n    _assert(params.idToken || params.accessToken, AuthErrorCode.ARGUMENT_ERROR);\n    // For OAuthCredential, sign in method is same as providerId.\n    return OAuthCredential._fromParams({\n      ...params,\n      providerId: this.providerId,\n      signInMethod: this.providerId\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return OAuthProvider.oauthCredentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return OAuthProvider.oauthCredentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static oauthCredentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const {\n      oauthIdToken,\n      oauthAccessToken,\n      oauthTokenSecret,\n      pendingToken,\n      nonce,\n      providerId\n    } = tokenResponse as SignInWithIdpResponse;\n    if (\n      !oauthAccessToken &&\n      !oauthTokenSecret &&\n      !oauthIdToken &&\n      !pendingToken\n    ) {\n      return null;\n    }\n\n    if (!providerId) {\n      return null;\n    }\n\n    try {\n      return new OAuthProvider(providerId)._credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        nonce,\n        pendingToken\n      });\n    } catch (e) {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('user_birthday');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * provider.addScope('user_birthday');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = FacebookAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nexport class FacebookAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  static readonly FACEBOOK_SIGN_IN_METHOD: 'facebook.com' =\n    SignInMethod.FACEBOOK;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  static readonly PROVIDER_ID: 'facebook.com' = ProviderId.FACEBOOK;\n\n  constructor() {\n    super(ProviderId.FACEBOOK);\n  }\n\n  /**\n   * Creates a credential for Facebook.\n   *\n   * @example\n   * ```javascript\n   * // `event` from the Facebook auth.authResponseChange callback.\n   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param accessToken - Facebook access token.\n   */\n  static credential(accessToken: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: FacebookAuthProvider.PROVIDER_ID,\n      signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return FacebookAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return FacebookAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n\n    try {\n      return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GoogleAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Google Access Token.\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GoogleAuthProvider();\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Google Access Token.\n * const credential = GoogleAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nexport class GoogleAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  static readonly GOOGLE_SIGN_IN_METHOD: 'google.com' = SignInMethod.GOOGLE;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  static readonly PROVIDER_ID: 'google.com' = ProviderId.GOOGLE;\n\n  constructor() {\n    super(ProviderId.GOOGLE);\n    this.addScope('profile');\n  }\n\n  /**\n   * Creates a credential for Google. At least one of ID token and access token is required.\n   *\n   * @example\n   * ```javascript\n   * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param idToken - Google ID token.\n   * @param accessToken - Google access token.\n   */\n  static credential(\n    idToken?: string | null,\n    accessToken?: string | null\n  ): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: GoogleAuthProvider.PROVIDER_ID,\n      signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n      idToken,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return GoogleAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return GoogleAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const { oauthIdToken, oauthAccessToken } =\n      tokenResponse as SignInWithIdpResponse;\n    if (!oauthIdToken && !oauthAccessToken) {\n      // This could be an oauth 1 credential or a phone credential\n      return null;\n    }\n\n    try {\n      return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n *\n * @remarks\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n * the {@link signInWithPopup} handler:\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GithubAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('repo');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Github Access Token.\n *   const credential = GithubAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GithubAuthProvider();\n * provider.addScope('repo');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Github Access Token.\n * const credential = GithubAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nexport class GithubAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  static readonly GITHUB_SIGN_IN_METHOD: 'github.com' = SignInMethod.GITHUB;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  static readonly PROVIDER_ID: 'github.com' = ProviderId.GITHUB;\n\n  constructor() {\n    super(ProviderId.GITHUB);\n  }\n\n  /**\n   * Creates a credential for Github.\n   *\n   * @param accessToken - Github access token.\n   */\n  static credential(accessToken: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: GithubAuthProvider.PROVIDER_ID,\n      signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return GithubAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return GithubAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n\n    try {\n      return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents the SAML credentials returned by an {@link SAMLAuthProvider}.\n *\n * @public\n */\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthCredential } from './auth_credential';\n\nconst IDP_REQUEST_URI = 'http://localhost';\n\n/**\n * @public\n */\nexport class SAMLAuthCredential extends AuthCredential {\n  /** @internal */\n  private constructor(\n    providerId: string,\n    private readonly pendingToken: string\n  ) {\n    super(providerId, providerId);\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON(): object {\n    return {\n      signInMethod: this.signInMethod,\n      providerId: this.providerId,\n      pendingToken: this.pendingToken\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json: string | object): SAMLAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const { providerId, signInMethod, pendingToken }: Record<string, string> =\n      obj;\n    if (\n      !providerId ||\n      !signInMethod ||\n      !pendingToken ||\n      providerId !== signInMethod\n    ) {\n      return null;\n    }\n\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n\n  /**\n   * Helper static method to avoid exposing the constructor to end users.\n   *\n   * @internal\n   */\n  static _create(providerId: string, pendingToken: string): SAMLAuthCredential {\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n\n  private buildRequest(): SignInWithIdpRequest {\n    return {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true,\n      pendingToken: this.pendingToken\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @license\n * Copyright 2020 Twitter LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new TwitterAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Twitter Access Token and Secret.\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n *   const secret = credential.secret;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new TwitterAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Twitter Access Token and Secret.\n * const credential = TwitterAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * const secret = credential.secret;\n * ```\n *\n * @public\n */\nexport class TwitterAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  static readonly TWITTER_SIGN_IN_METHOD: 'twitter.com' = SignInMethod.TWITTER;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  static readonly PROVIDER_ID: 'twitter.com' = ProviderId.TWITTER;\n\n  constructor() {\n    super(ProviderId.TWITTER);\n  }\n\n  /**\n   * Creates a credential for Twitter.\n   *\n   * @param token - Twitter access token.\n   * @param secret - Twitter secret.\n   */\n  static credential(token: string, secret: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: TwitterAuthProvider.PROVIDER_ID,\n      signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n      oauthToken: token,\n      oauthTokenSecret: secret\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return TwitterAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return TwitterAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { oauthAccessToken, oauthTokenSecret } =\n      tokenResponse as SignInWithIdpResponse;\n    if (!oauthAccessToken || !oauthTokenSecret) {\n      return null;\n    }\n\n    try {\n      return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignUpRequest {\n  returnSecureToken?: boolean;\n  email?: string;\n  password?: string;\n  tenantId?: string;\n  captchaResponse?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface SignUpResponse extends IdTokenResponse {\n  displayName?: string;\n  email?: string;\n}\n\nexport async function signUp(\n  auth: Auth,\n  request: SignUpRequest\n): Promise<SignUpResponse> {\n  return _performSignInRequest<SignUpRequest, SignUpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_UP,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { UserImpl } from './user_impl';\nimport { AuthInternal } from '../../model/auth';\nimport { OperationType, ProviderId } from '../../model/enums';\n\ninterface UserCredentialParams {\n  readonly user: UserInternal;\n  readonly providerId: ProviderId | string | null;\n  readonly _tokenResponse?: PhoneOrOauthTokenResponse;\n  readonly operationType: OperationType;\n}\n\nexport class UserCredentialImpl\n  implements UserCredentialInternal, UserCredentialParams\n{\n  readonly user: UserInternal;\n  readonly providerId: ProviderId | string | null;\n  readonly _tokenResponse: PhoneOrOauthTokenResponse | undefined;\n  readonly operationType: OperationType;\n\n  constructor(params: UserCredentialParams) {\n    this.user = params.user;\n    this.providerId = params.providerId;\n    this._tokenResponse = params._tokenResponse;\n    this.operationType = params.operationType;\n  }\n\n  static async _fromIdTokenResponse(\n    auth: AuthInternal,\n    operationType: OperationType,\n    idTokenResponse: IdTokenResponse,\n    isAnonymous: boolean = false\n  ): Promise<UserCredentialInternal> {\n    const user = await UserImpl._fromIdTokenResponse(\n      auth,\n      idTokenResponse,\n      isAnonymous\n    );\n    const providerId = providerIdForResponse(idTokenResponse);\n    const userCred = new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: idTokenResponse,\n      operationType\n    });\n    return userCred;\n  }\n\n  static async _forOperation(\n    user: UserInternal,\n    operationType: OperationType,\n    response: PhoneOrOauthTokenResponse\n  ): Promise<UserCredentialImpl> {\n    await user._updateTokensIfNecessary(response, /* reload */ true);\n    const providerId = providerIdForResponse(response);\n    return new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: response,\n      operationType\n    });\n  }\n}\n\nfunction providerIdForResponse(\n  response: IdTokenResponse\n): ProviderId | string | null {\n  if (response.providerId) {\n    return response.providerId;\n  }\n\n  if ('phoneNumber' in response) {\n    return ProviderId.PHONE;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, UserCredential } from '../../model/public_types';\nimport { signUp } from '../../api/authentication/sign_up';\nimport { UserInternal } from '../../model/user';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { OperationType } from '../../model/enums';\n\n/**\n * Asynchronously signs in as an anonymous user.\n *\n * @remarks\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n * new anonymous user identity will be created and returned.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport async function signInAnonymously(auth: Auth): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  await authInternal._initializationPromise;\n  if (authInternal.currentUser?.isAnonymous) {\n    // If an anonymous user is already signed in, no need to sign them in again.\n    return new UserCredentialImpl({\n      user: authInternal.currentUser as UserInternal,\n      providerId: null,\n      operationType: OperationType.SIGN_IN\n    });\n  }\n  const response = await signUp(authInternal, {\n    returnSecureToken: true\n  });\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response,\n    true\n  );\n  await authInternal._updateCurrentUser(userCredential.user);\n  return userCredential;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MultiFactorError as MultiFactorErrorPublic } from '../model/public_types';\nimport { FirebaseError } from '@firebase/util';\nimport { AuthInternal } from '../model/auth';\nimport { IdTokenResponse } from '../model/id_token';\nimport { AuthErrorCode } from '../core/errors';\nimport { UserInternal } from '../model/user';\nimport { AuthCredential } from '../core/credentials';\nimport { IdTokenMfaResponse } from '../api/authentication/mfa';\nimport { OperationType } from '../model/enums';\n\nexport type MultiFactorErrorData = MultiFactorErrorPublic['customData'] & {\n  _serverResponse: IdTokenMfaResponse;\n};\n\nexport class MultiFactorError\n  extends FirebaseError\n  implements MultiFactorErrorPublic\n{\n  readonly customData: MultiFactorErrorData;\n\n  private constructor(\n    auth: AuthInternal,\n    error: FirebaseError,\n    readonly operationType: OperationType,\n    readonly user?: UserInternal\n  ) {\n    super(error.code, error.message);\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, MultiFactorError.prototype);\n    this.customData = {\n      appName: auth.name,\n      tenantId: auth.tenantId ?? undefined,\n      _serverResponse: error.customData!._serverResponse as IdTokenMfaResponse,\n      operationType\n    };\n  }\n\n  static _fromErrorAndOperation(\n    auth: AuthInternal,\n    error: FirebaseError,\n    operationType: OperationType,\n    user?: UserInternal\n  ): MultiFactorError {\n    return new MultiFactorError(auth, error, operationType, user);\n  }\n}\n\nexport function _processCredentialSavingMfaContextIfNecessary(\n  auth: AuthInternal,\n  operationType: OperationType,\n  credential: AuthCredential,\n  user?: UserInternal\n): Promise<IdTokenResponse> {\n  const idTokenProvider =\n    operationType === OperationType.REAUTHENTICATE\n      ? credential._getReauthenticationResolver(auth)\n      : credential._getIdTokenResponse(auth);\n\n  return idTokenProvider.catch(error => {\n    if (error.code === `auth/${AuthErrorCode.MFA_REQUIRED}`) {\n      throw MultiFactorError._fromErrorAndOperation(\n        auth,\n        error,\n        operationType,\n        user\n      );\n    }\n\n    throw error;\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../../model/public_types';\n\nimport { deleteLinkedAccounts } from '../../api/account_management/account';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { providerDataAsNames } from '../util/providers';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { _reloadWithoutSaving } from './reload';\nimport { UserCredentialImpl } from './user_credential_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType, ProviderId } from '../../model/enums';\n\n/**\n * Unlinks a provider from a user account.\n *\n * @param user - The user.\n * @param providerId - The provider to unlink.\n *\n * @public\n */\nexport async function unlink(user: User, providerId: string): Promise<User> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  await _assertLinkedStatus(true, userInternal, providerId);\n  const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {\n    idToken: await userInternal.getIdToken(),\n    deleteProvider: [providerId]\n  });\n\n  const providersLeft = providerDataAsNames(providerUserInfo || []);\n\n  userInternal.providerData = userInternal.providerData.filter(pd =>\n    providersLeft.has(pd.providerId)\n  );\n  if (!providersLeft.has(ProviderId.PHONE)) {\n    userInternal.phoneNumber = null;\n  }\n\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  return userInternal;\n}\n\nexport async function _link(\n  user: UserInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredentialInternal> {\n  const response = await _logoutIfInvalidated(\n    user,\n    credential._linkToIdToken(user.auth, await user.getIdToken()),\n    bypassAuthState\n  );\n  return UserCredentialImpl._forOperation(user, OperationType.LINK, response);\n}\n\nexport async function _assertLinkedStatus(\n  expected: boolean,\n  user: UserInternal,\n  provider: string\n): Promise<void> {\n  await _reloadWithoutSaving(user);\n  const providerIds = providerDataAsNames(user.providerData);\n\n  const code =\n    expected === false\n      ? AuthErrorCode.PROVIDER_ALREADY_LINKED\n      : AuthErrorCode.NO_SUCH_PROVIDER;\n  _assert(providerIds.has(provider) === expected, user.auth, code);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { _processCredentialSavingMfaContextIfNecessary } from '../../mfa/mfa_error';\nimport { OperationType } from '../../model/enums';\nimport { UserInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { AuthErrorCode } from '../errors';\nimport { _assert, _fail } from '../util/assert';\nimport { _parseToken } from './id_token_result';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { UserCredentialImpl } from './user_credential_impl';\n\nexport async function _reauthenticate(\n  user: UserInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredentialImpl> {\n  const { auth } = user;\n  const operationType = OperationType.REAUTHENTICATE;\n\n  try {\n    const response = await _logoutIfInvalidated(\n      user,\n      _processCredentialSavingMfaContextIfNecessary(\n        auth,\n        operationType,\n        credential,\n        user\n      ),\n      bypassAuthState\n    );\n    _assert(response.idToken, auth, AuthErrorCode.INTERNAL_ERROR);\n    const parsed = _parseToken(response.idToken);\n    _assert(parsed, auth, AuthErrorCode.INTERNAL_ERROR);\n\n    const { sub: localId } = parsed;\n    _assert(user.uid === localId, auth, AuthErrorCode.USER_MISMATCH);\n\n    return UserCredentialImpl._forOperation(user, operationType, response);\n  } catch (e) {\n    // Convert user deleted error into user mismatch\n    if ((e as FirebaseError)?.code === `auth/${AuthErrorCode.USER_DELETED}`) {\n      _fail(auth, AuthErrorCode.USER_MISMATCH);\n    }\n    throw e;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential, Auth, User } from '../../model/public_types';\n\nimport { _processCredentialSavingMfaContextIfNecessary } from '../../mfa/mfa_error';\nimport { AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { _assertLinkedStatus, _link } from '../user/link_unlink';\nimport { _reauthenticate } from '../user/reauthenticate';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../../model/enums';\n\nexport async function _signInWithCredential(\n  auth: AuthInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredential> {\n  const operationType = OperationType.SIGN_IN;\n  const response = await _processCredentialSavingMfaContextIfNecessary(\n    auth,\n    operationType,\n    credential\n  );\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    auth,\n    operationType,\n    response\n  );\n\n  if (!bypassAuthState) {\n    await auth._updateCurrentUser(userCredential.user);\n  }\n  return userCredential;\n}\n\n/**\n * Asynchronously signs in with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param auth - The {@link Auth} instance.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function signInWithCredential(\n  auth: Auth,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  return _signInWithCredential(_castAuth(auth), credential);\n}\n\n/**\n * Links the user account with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function linkWithCredential(\n  user: User,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n\n  await _assertLinkedStatus(false, userInternal, credential.providerId);\n\n  return _link(userInternal, credential);\n}\n\n/**\n * Re-authenticates a user using a fresh credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n * or a `TOKEN_EXPIRED` error.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function reauthenticateWithCredential(\n  user: User,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  return _reauthenticate(getModularInstance(user) as UserInternal, credential);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeInfo,\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  UserCredential\n} from '../../model/public_types';\n\nimport * as account from '../../api/account_management/email_and_password';\nimport * as authentication from '../../api/authentication/email_and_password';\nimport { signUp, SignUpRequest } from '../../api/authentication/sign_up';\nimport { MultiFactorInfoImpl } from '../../mfa/mfa_info';\nimport { EmailAuthProvider } from '../providers/email';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _assert } from '../util/assert';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { signInWithCredential } from './credential';\nimport { _castAuth } from '../auth/auth_impl';\nimport { AuthErrorCode } from '../errors';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../../model/enums';\nimport { injectRecaptchaFields } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { RecaptchaActionName, RecaptchaClientType } from '../../api';\n\n/**\n * Updates the password policy cached in the {@link Auth} instance if a policy is already\n * cached for the project or tenant.\n *\n * @remarks\n * We only fetch the password policy if the password did not meet policy requirements and\n * there is an existing policy cached. A developer must call validatePassword at least\n * once for the cache to be automatically updated.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @private\n */\nasync function recachePasswordPolicy(auth: Auth): Promise<void> {\n  const authInternal = _castAuth(auth);\n  if (authInternal._getPasswordPolicyInternal()) {\n    await authInternal._updatePasswordPolicy();\n  }\n}\n\n/**\n * Sends a password reset email to the given email address.\n *\n * @remarks\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n * the email sent to the user, along with the new password specified by the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain code from user.\n * await confirmPasswordReset('user@example.com', code);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendPasswordResetEmail(\n  auth: Auth,\n  email: string,\n  actionCodeSettings?: ActionCodeSettings\n): Promise<void> {\n  const authInternal = _castAuth(auth);\n  const request: authentication.PasswordResetRequest = {\n    requestType: ActionCodeOperation.PASSWORD_RESET,\n    email,\n    clientType: RecaptchaClientType.WEB\n  };\n  if (authInternal._getRecaptchaConfig()?.emailPasswordEnabled) {\n    const requestWithRecaptcha = await injectRecaptchaFields(\n      authInternal,\n      request,\n      RecaptchaActionName.GET_OOB_CODE,\n      true\n    );\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(\n        authInternal,\n        requestWithRecaptcha,\n        actionCodeSettings\n      );\n    }\n    await authentication.sendPasswordResetEmail(\n      authInternal,\n      requestWithRecaptcha\n    );\n  } else {\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(\n        authInternal,\n        request,\n        actionCodeSettings\n      );\n    }\n    await authentication\n      .sendPasswordResetEmail(authInternal, request)\n      .catch(async error => {\n        if (error.code === `auth/${AuthErrorCode.MISSING_RECAPTCHA_TOKEN}`) {\n          console.log(\n            'Password resets are protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the password reset flow.'\n          );\n          const requestWithRecaptcha = await injectRecaptchaFields(\n            authInternal,\n            request,\n            RecaptchaActionName.GET_OOB_CODE,\n            true\n          );\n          if (actionCodeSettings) {\n            _setActionCodeSettingsOnRequest(\n              authInternal,\n              requestWithRecaptcha,\n              actionCodeSettings\n            );\n          }\n          await authentication.sendPasswordResetEmail(\n            authInternal,\n            requestWithRecaptcha\n          );\n        } else {\n          return Promise.reject(error);\n        }\n      });\n  }\n}\n\n/**\n * Completes the password reset process, given a confirmation code and new password.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A confirmation code sent to the user.\n * @param newPassword - The new password.\n *\n * @public\n */\nexport async function confirmPasswordReset(\n  auth: Auth,\n  oobCode: string,\n  newPassword: string\n): Promise<void> {\n  await account\n    .resetPassword(getModularInstance(auth), {\n      oobCode,\n      newPassword\n    })\n    .catch(async error => {\n      if (\n        error.code ===\n        `auth/${AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS}`\n      ) {\n        void recachePasswordPolicy(auth);\n      }\n\n      throw error;\n    });\n  // Do not return the email.\n}\n\n/**\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nexport async function applyActionCode(\n  auth: Auth,\n  oobCode: string\n): Promise<void> {\n  await account.applyActionCode(getModularInstance(auth), { oobCode });\n}\n\n/**\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @returns metadata about the code.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nexport async function checkActionCode(\n  auth: Auth,\n  oobCode: string\n): Promise<ActionCodeInfo> {\n  const authModular = getModularInstance(auth);\n  const response = await account.resetPassword(authModular, { oobCode });\n\n  // Email could be empty only if the request type is EMAIL_SIGNIN or\n  // VERIFY_AND_CHANGE_EMAIL.\n  // New email should not be empty if the request type is\n  // VERIFY_AND_CHANGE_EMAIL.\n  // Multi-factor info could not be empty if the request type is\n  // REVERT_SECOND_FACTOR_ADDITION.\n  const operation = response.requestType;\n  _assert(operation, authModular, AuthErrorCode.INTERNAL_ERROR);\n  switch (operation) {\n    case ActionCodeOperation.EMAIL_SIGNIN:\n      break;\n    case ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL:\n      _assert(response.newEmail, authModular, AuthErrorCode.INTERNAL_ERROR);\n      break;\n    case ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION:\n      _assert(response.mfaInfo, authModular, AuthErrorCode.INTERNAL_ERROR);\n    // fall through\n    default:\n      _assert(response.email, authModular, AuthErrorCode.INTERNAL_ERROR);\n  }\n\n  // The multi-factor info for revert second factor addition\n  let multiFactorInfo: MultiFactorInfoImpl | null = null;\n  if (response.mfaInfo) {\n    multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(\n      _castAuth(authModular),\n      response.mfaInfo\n    );\n  }\n\n  return {\n    data: {\n      email:\n        (response.requestType === ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL\n          ? response.newEmail\n          : response.email) || null,\n      previousEmail:\n        (response.requestType === ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL\n          ? response.email\n          : response.newEmail) || null,\n      multiFactorInfo\n    },\n    operation\n  };\n}\n\n/**\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n *\n * @returns the user's email address if valid.\n *\n * @param auth - The {@link Auth} instance.\n * @param code - A verification code sent to the user.\n *\n * @public\n */\nexport async function verifyPasswordResetCode(\n  auth: Auth,\n  code: string\n): Promise<string> {\n  const { data } = await checkActionCode(getModularInstance(auth), code);\n  // Email should always be present since a code was sent to it\n  return data.email!;\n}\n\n/**\n * Creates a new user account associated with the specified email address and password.\n *\n * @remarks\n * On successful creation of the user account, this user will also be signed in to your application.\n *\n * User account creation can fail if the account already exists or the password is invalid.\n *\n * Note: The email address acts as a unique identifier for the user and enables an email-based\n * password reset. This function will create a new user account and set the initial user password.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param password - The user's chosen password.\n *\n * @public\n */\nexport async function createUserWithEmailAndPassword(\n  auth: Auth,\n  email: string,\n  password: string\n): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  const request: SignUpRequest = {\n    returnSecureToken: true,\n    email,\n    password,\n    clientType: RecaptchaClientType.WEB\n  };\n  let signUpResponse: Promise<IdTokenResponse>;\n  if (authInternal._getRecaptchaConfig()?.emailPasswordEnabled) {\n    const requestWithRecaptcha = await injectRecaptchaFields(\n      authInternal,\n      request,\n      RecaptchaActionName.SIGN_UP_PASSWORD\n    );\n    signUpResponse = signUp(authInternal, requestWithRecaptcha);\n  } else {\n    signUpResponse = signUp(authInternal, request).catch(async error => {\n      if (error.code === `auth/${AuthErrorCode.MISSING_RECAPTCHA_TOKEN}`) {\n        console.log(\n          'Sign-up is protected by reCAPTCHA for this project. Automatically triggering the reCAPTCHA flow and restarting the sign-up flow.'\n        );\n        const requestWithRecaptcha = await injectRecaptchaFields(\n          authInternal,\n          request,\n          RecaptchaActionName.SIGN_UP_PASSWORD\n        );\n        return signUp(authInternal, requestWithRecaptcha);\n      }\n\n      throw error;\n    });\n  }\n\n  const response = await signUpResponse.catch(error => {\n    if (\n      error.code === `auth/${AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS}`\n    ) {\n      void recachePasswordPolicy(auth);\n    }\n\n    throw error;\n  });\n\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response\n  );\n  await authInternal._updateCurrentUser(userCredential.user);\n\n  return userCredential;\n}\n\n/**\n * Asynchronously signs in using an email and password.\n *\n * @remarks\n * Fails with an error if the email address and password do not match.\n *\n * Note: The user's password is NOT the password used to access the user's email account. The\n * email address serves as a unique identifier for the user, and the password is used to access\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The users email address.\n * @param password - The users password.\n *\n * @public\n */\nexport function signInWithEmailAndPassword(\n  auth: Auth,\n  email: string,\n  password: string\n): Promise<UserCredential> {\n  return signInWithCredential(\n    getModularInstance(auth),\n    EmailAuthProvider.credential(email, password)\n  ).catch(async error => {\n    if (\n      error.code === `auth/${AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS}`\n    ) {\n      void recachePasswordPolicy(auth);\n    }\n\n    throw error;\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance } from '@firebase/util';\nimport {\n  Auth,\n  NextOrObserver,\n  Persistence,\n  User,\n  CompleteFn,\n  ErrorFn,\n  Unsubscribe,\n  PasswordValidationStatus\n} from '../model/public_types';\nimport { _initializeRecaptchaConfig } from '../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { _castAuth } from '../core/auth/auth_impl';\n\nexport {\n  debugErrorMap,\n  prodErrorMap,\n  AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY as AuthErrorCodes\n} from './errors';\n\n// Non-optional auth methods.\n/**\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\n * `Auth` session and applies this type of persistence for future sign-in requests, including\n * sign-in with redirect requests.\n *\n * @remarks\n * This makes it easy for a user signing in to specify whether their session should be\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n * that are shared by other users or have sensitive data.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * setPersistence(auth, browserSessionPersistence);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param persistence - The {@link Persistence} to use.\n * @returns A `Promise` that resolves once the persistence change has completed\n *\n * @public\n */\nexport function setPersistence(\n  auth: Auth,\n  persistence: Persistence\n): Promise<void> {\n  return getModularInstance(auth).setPersistence(persistence);\n}\n\n/**\n * Loads the reCAPTCHA configuration into the `Auth` instance.\n *\n * @remarks\n * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n * verification flow should be triggered for each auth provider, into the\n * current Auth session.\n *\n * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n * verification, the SDK will transparently load the reCAPTCHA config and restart the\n * auth flows.\n *\n * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * initializeRecaptchaConfig(auth);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function initializeRecaptchaConfig(auth: Auth): Promise<void> {\n  return _initializeRecaptchaConfig(auth);\n}\n\n/**\n * Validates the password against the password policy configured for the project or tenant.\n *\n * @remarks\n * If no tenant ID is set on the `Auth` instance, then this method will use the password\n * policy configured for the project. Otherwise, this method will use the policy configured\n * for the tenant. If a password policy has not been configured, then the default policy\n * configured for all projects will be used.\n *\n * If an auth flow fails because a submitted password does not meet the password policy\n * requirements and this method has previously been called, then this method will use the\n * most recent policy available when called again.\n *\n * @example\n * ```javascript\n * validatePassword(auth, 'some-password');\n * ```\n *\n * @param auth The {@link Auth} instance.\n * @param password The password to validate.\n *\n * @public\n */\nexport async function validatePassword(\n  auth: Auth,\n  password: string\n): Promise<PasswordValidationStatus> {\n  const authInternal = _castAuth(auth);\n  return authInternal.validatePassword(password);\n}\n\n/**\n * Adds an observer for changes to the signed-in user's ID token.\n *\n * @remarks\n * This includes sign-in, sign-out, and token refresh events.\n * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nexport function onIdTokenChanged(\n  auth: Auth,\n  nextOrObserver: NextOrObserver<User>,\n  error?: ErrorFn,\n  completed?: CompleteFn\n): Unsubscribe {\n  return getModularInstance(auth).onIdTokenChanged(\n    nextOrObserver,\n    error,\n    completed\n  );\n}\n/**\n * Adds a blocking callback that runs before an auth state change\n * sets a new user.\n *\n * @param auth - The {@link Auth} instance.\n * @param callback - callback triggered before new user value is set.\n *   If this throws, it blocks the user from being set.\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n *   callback throws, allowing you to undo any side effects.\n */\nexport function beforeAuthStateChanged(\n  auth: Auth,\n  callback: (user: User | null) => void | Promise<void>,\n  onAbort?: () => void\n): Unsubscribe {\n  return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n}\n/**\n * Adds an observer for changes to the user's sign-in state.\n *\n * @remarks\n * To keep the old behavior, see {@link onIdTokenChanged}.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nexport function onAuthStateChanged(\n  auth: Auth,\n  nextOrObserver: NextOrObserver<User>,\n  error?: ErrorFn,\n  completed?: CompleteFn\n): Unsubscribe {\n  return getModularInstance(auth).onAuthStateChanged(\n    nextOrObserver,\n    error,\n    completed\n  );\n}\n/**\n * Sets the current language to the default device/browser preference.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function useDeviceLanguage(auth: Auth): void {\n  getModularInstance(auth).useDeviceLanguage();\n}\n/**\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n * {@link Auth} instance.\n *\n * @remarks\n * A new instance copy of the user provided will be made and set as currentUser.\n *\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n * like other sign in methods.\n *\n * The operation fails with an error if the user to be updated belongs to a different Firebase\n * project.\n *\n * @param auth - The {@link Auth} instance.\n * @param user - The new {@link User}.\n *\n * @public\n */\nexport function updateCurrentUser(\n  auth: Auth,\n  user: User | null\n): Promise<void> {\n  return getModularInstance(auth).updateCurrentUser(user);\n}\n/**\n * Signs out the current user.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function signOut(auth: Auth): Promise<void> {\n  return getModularInstance(auth).signOut();\n}\n\nexport { initializeAuth } from './auth/initialize';\nexport { connectAuthEmulator } from './auth/emulator';\n\n// credentials\nexport { AuthCredential } from './credentials';\nexport { EmailAuthCredential } from './credentials/email';\nexport { OAuthCredential } from './credentials/oauth';\nexport { PhoneAuthCredential } from './credentials/phone';\n\n// persistence\nexport { inMemoryPersistence } from './persistence/in_memory';\n\n// providers\nexport { EmailAuthProvider } from './providers/email';\nexport { FacebookAuthProvider } from './providers/facebook';\nexport { CustomParameters } from './providers/federated';\nexport { GoogleAuthProvider } from './providers/google';\nexport { GithubAuthProvider } from './providers/github';\nexport { OAuthProvider, OAuthCredentialOptions } from './providers/oauth';\nexport { SAMLAuthProvider } from './providers/saml';\nexport { TwitterAuthProvider } from './providers/twitter';\n\n// strategies\nexport { signInAnonymously } from './strategies/anonymous';\nexport {\n  signInWithCredential,\n  linkWithCredential,\n  reauthenticateWithCredential\n} from './strategies/credential';\nexport { signInWithCustomToken } from './strategies/custom_token';\nexport {\n  sendPasswordResetEmail,\n  confirmPasswordReset,\n  applyActionCode,\n  checkActionCode,\n  verifyPasswordResetCode,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword\n} from './strategies/email_and_password';\nexport {\n  sendSignInLinkToEmail,\n  isSignInWithEmailLink,\n  signInWithEmailLink\n} from './strategies/email_link';\nexport {\n  fetchSignInMethodsForEmail,\n  sendEmailVerification,\n  verifyBeforeUpdateEmail\n} from './strategies/email';\n\n// core\nexport { ActionCodeURL, parseActionCodeURL } from './action_code_url';\n\n// user\nexport {\n  updateProfile,\n  updateEmail,\n  updatePassword\n} from './user/account_info';\nexport { getIdToken, getIdTokenResult } from './user/id_token_result';\nexport { unlink } from './user/link_unlink';\nexport { getAdditionalUserInfo } from './user/additional_user_info';\n\n// Non-optional user methods.\nexport { reload } from './user/reload';\n/**\n * Deletes and signs out the user.\n *\n * @remarks\n * Important: this is a security-sensitive operation that requires the user to have recently\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n *\n * @public\n */\nexport async function deleteUser(user: User): Promise<void> {\n  return getModularInstance(user).delete();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { SignInWithPhoneNumberRequest } from '../authentication/sms';\nimport { FinalizeMfaResponse } from '../authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\n\n/**\n * MFA Info as returned by the API.\n */\ninterface BaseMfaEnrollment {\n  mfaEnrollmentId: string;\n  enrolledAt: number;\n  displayName?: string;\n}\n\n/**\n * An MFA provided by SMS verification.\n */\nexport interface PhoneMfaEnrollment extends BaseMfaEnrollment {\n  phoneInfo: string;\n}\n\n/**\n * An MFA provided by TOTP (Time-based One Time Password).\n */\nexport interface TotpMfaEnrollment extends BaseMfaEnrollment {}\n\n/**\n * MfaEnrollment can be any subtype of BaseMfaEnrollment, currently only PhoneMfaEnrollment and TotpMfaEnrollment are supported.\n */\nexport type MfaEnrollment = PhoneMfaEnrollment | TotpMfaEnrollment;\n\nexport interface StartPhoneMfaEnrollmentRequest {\n  idToken: string;\n  phoneEnrollmentInfo: {\n    phoneNumber: string;\n    recaptchaToken: string;\n  };\n  tenantId?: string;\n}\n\nexport interface StartPhoneMfaEnrollmentResponse {\n  phoneSessionInfo: {\n    sessionInfo: string;\n  };\n}\n\nexport function startEnrollPhoneMfa(\n  auth: AuthInternal,\n  request: StartPhoneMfaEnrollmentRequest\n): Promise<StartPhoneMfaEnrollmentResponse> {\n  return _performApiRequest<\n    StartPhoneMfaEnrollmentRequest,\n    StartPhoneMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface FinalizePhoneMfaEnrollmentRequest {\n  idToken: string;\n  phoneVerificationInfo: SignInWithPhoneNumberRequest;\n  displayName?: string | null;\n  tenantId?: string;\n}\n\nexport interface FinalizePhoneMfaEnrollmentResponse\n  extends FinalizeMfaResponse {}\n\nexport function finalizeEnrollPhoneMfa(\n  auth: AuthInternal,\n  request: FinalizePhoneMfaEnrollmentRequest\n): Promise<FinalizePhoneMfaEnrollmentResponse> {\n  return _performApiRequest<\n    FinalizePhoneMfaEnrollmentRequest,\n    FinalizePhoneMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\nexport interface StartTotpMfaEnrollmentRequest {\n  idToken: string;\n  totpEnrollmentInfo: {};\n  tenantId?: string;\n}\n\nexport interface StartTotpMfaEnrollmentResponse {\n  totpSessionInfo: {\n    sharedSecretKey: string;\n    verificationCodeLength: number;\n    hashingAlgorithm: string;\n    periodSec: number;\n    sessionInfo: string;\n    finalizeEnrollmentTime: number;\n  };\n}\n\nexport function startEnrollTotpMfa(\n  auth: AuthInternal,\n  request: StartTotpMfaEnrollmentRequest\n): Promise<StartTotpMfaEnrollmentResponse> {\n  return _performApiRequest<\n    StartTotpMfaEnrollmentRequest,\n    StartTotpMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface TotpVerificationInfo {\n  sessionInfo: string;\n  verificationCode: string;\n}\nexport interface FinalizeTotpMfaEnrollmentRequest {\n  idToken: string;\n  totpVerificationInfo: TotpVerificationInfo;\n  displayName?: string | null;\n  tenantId?: string;\n}\n\nexport interface FinalizeTotpMfaEnrollmentResponse\n  extends FinalizeMfaResponse {}\n\nexport function finalizeEnrollTotpMfa(\n  auth: AuthInternal,\n  request: FinalizeTotpMfaEnrollmentRequest\n): Promise<FinalizeTotpMfaEnrollmentResponse> {\n  return _performApiRequest<\n    FinalizeTotpMfaEnrollmentRequest,\n    FinalizeTotpMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface WithdrawMfaRequest {\n  idToken: string;\n  mfaEnrollmentId: string;\n  tenantId?: string;\n}\n\nexport interface WithdrawMfaResponse extends FinalizeMfaResponse {}\n\nexport function withdrawMfa(\n  auth: AuthInternal,\n  request: WithdrawMfaRequest\n): Promise<WithdrawMfaResponse> {\n  return _performApiRequest<WithdrawMfaRequest, WithdrawMfaResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.WITHDRAW_MFA,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  MultiFactorAssertion,\n  MultiFactorInfo,\n  MultiFactorSession,\n  MultiFactorUser,\n  User\n} from '../model/public_types';\n\nimport { withdrawMfa } from '../api/account_management/mfa';\nimport { _logoutIfInvalidated } from '../core/user/invalidation';\nimport { UserInternal } from '../model/user';\nimport { MultiFactorAssertionImpl } from './mfa_assertion';\nimport { MultiFactorInfoImpl } from './mfa_info';\nimport { MultiFactorSessionImpl } from './mfa_session';\nimport { getModularInstance } from '@firebase/util';\n\nexport class MultiFactorUserImpl implements MultiFactorUser {\n  enrolledFactors: MultiFactorInfo[] = [];\n\n  private constructor(readonly user: UserInternal) {\n    user._onReload(userInfo => {\n      if (userInfo.mfaInfo) {\n        this.enrolledFactors = userInfo.mfaInfo.map(enrollment =>\n          MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment)\n        );\n      }\n    });\n  }\n\n  static _fromUser(user: UserInternal): MultiFactorUserImpl {\n    return new MultiFactorUserImpl(user);\n  }\n\n  async getSession(): Promise<MultiFactorSession> {\n    return MultiFactorSessionImpl._fromIdtoken(\n      await this.user.getIdToken(),\n      this.user\n    );\n  }\n\n  async enroll(\n    assertionExtern: MultiFactorAssertion,\n    displayName?: string | null\n  ): Promise<void> {\n    const assertion = assertionExtern as MultiFactorAssertionImpl;\n    const session = (await this.getSession()) as MultiFactorSessionImpl;\n    const finalizeMfaResponse = await _logoutIfInvalidated(\n      this.user,\n      assertion._process(this.user.auth, session, displayName)\n    );\n    // New tokens will be issued after enrollment of the new second factors.\n    // They need to be updated on the user.\n    await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n    // The user needs to be reloaded to get the new multi-factor information\n    // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n    // will be updated.\n    return this.user.reload();\n  }\n\n  async unenroll(infoOrUid: MultiFactorInfo | string): Promise<void> {\n    const mfaEnrollmentId =\n      typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n    const idToken = await this.user.getIdToken();\n    try {\n      const idTokenResponse = await _logoutIfInvalidated(\n        this.user,\n        withdrawMfa(this.user.auth, {\n          idToken,\n          mfaEnrollmentId\n        })\n      );\n      // Remove the second factor from the user's list.\n      this.enrolledFactors = this.enrolledFactors.filter(\n        ({ uid }) => uid !== mfaEnrollmentId\n      );\n      // Depending on whether the backend decided to revoke the user's session,\n      // the tokenResponse may be empty. If the tokens were not updated (and they\n      // are now invalid), reloading the user will discover this and invalidate\n      // the user's state accordingly.\n      await this.user._updateTokensIfNecessary(idTokenResponse);\n      await this.user.reload();\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n\nconst multiFactorUserCache = new WeakMap<User, MultiFactorUser>();\n\n/**\n * The {@link MultiFactorUser} corresponding to the user.\n *\n * @remarks\n * This is used to access all multi-factor properties and operations related to the user.\n *\n * @param user - The user.\n *\n * @public\n */\nexport function multiFactor(user: User): MultiFactorUser {\n  const userModular = getModularInstance(user);\n  if (!multiFactorUserCache.has(userModular)) {\n    multiFactorUserCache.set(\n      userModular,\n      MultiFactorUserImpl._fromUser(userModular as UserInternal)\n    );\n  }\n  return multiFactorUserCache.get(userModular)!;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Persistence } from '../../model/public_types';\n\nexport const enum PersistenceType {\n  SESSION = 'SESSION',\n  LOCAL = 'LOCAL',\n  NONE = 'NONE'\n}\n\nexport type PersistedBlob = Record<string, unknown>;\n\nexport interface Instantiator<T> {\n  (blob: PersistedBlob): T;\n}\n\nexport type PersistenceValue = PersistedBlob | string;\n\nexport const STORAGE_AVAILABLE_KEY = '__sak';\n\nexport interface StorageEventListener {\n  (value: PersistenceValue | null): void;\n}\n\nexport interface PersistenceInternal extends Persistence {\n  type: PersistenceType;\n  _isAvailable(): Promise<boolean>;\n  _set(key: string, value: PersistenceValue): Promise<void>;\n  _get<T extends PersistenceValue>(key: string): Promise<T | null>;\n  _remove(key: string): Promise<void>;\n  _addListener(key: string, listener: StorageEventListener): void;\n  _removeListener(key: string, listener: StorageEventListener): void;\n  // Should this persistence allow migration up the chosen hierarchy?\n  _shouldAllowMigration?: boolean;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PersistenceValue,\n  STORAGE_AVAILABLE_KEY,\n  PersistenceType\n} from '../../core/persistence';\n\n// There are two different browser persistence types: local and session.\n// Both have the same implementation but use a different underlying storage\n// object.\n\nexport abstract class BrowserPersistenceClass {\n  protected constructor(\n    protected readonly storageRetriever: () => Storage,\n    readonly type: PersistenceType\n  ) {}\n\n  _isAvailable(): Promise<boolean> {\n    try {\n      if (!this.storage) {\n        return Promise.resolve(false);\n      }\n      this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\n      this.storage.removeItem(STORAGE_AVAILABLE_KEY);\n      return Promise.resolve(true);\n    } catch {\n      return Promise.resolve(false);\n    }\n  }\n\n  _set(key: string, value: PersistenceValue): Promise<void> {\n    this.storage.setItem(key, JSON.stringify(value));\n    return Promise.resolve();\n  }\n\n  _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const json = this.storage.getItem(key);\n    return Promise.resolve(json ? JSON.parse(json) : null);\n  }\n\n  _remove(key: string): Promise<void> {\n    this.storage.removeItem(key);\n    return Promise.resolve();\n  }\n\n  protected get storage(): Storage {\n    return this.storageRetriever();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport { getUA } from '@firebase/util';\nimport {\n  _isSafari,\n  _isIOS,\n  _isIframe,\n  _isMobileBrowser,\n  _isIE10\n} from '../../core/util/browser';\nimport {\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener\n} from '../../core/persistence';\nimport { BrowserPersistenceClass } from './browser';\n\nfunction _iframeCannotSyncWebStorage(): boolean {\n  const ua = getUA();\n  return _isSafari(ua) || _isIOS(ua);\n}\n\n// The polling period in case events are not supported\nexport const _POLLING_INTERVAL_MS = 1000;\n\n// The IE 10 localStorage cross tab synchronization delay in milliseconds\nconst IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\n\nclass BrowserLocalPersistence\n  extends BrowserPersistenceClass\n  implements InternalPersistence\n{\n  static type: 'LOCAL' = 'LOCAL';\n\n  constructor() {\n    super(() => window.localStorage, PersistenceType.LOCAL);\n  }\n\n  private readonly boundEventHandler = (\n    event: StorageEvent,\n    poll?: boolean\n  ): void => this.onStorageEvent(event, poll);\n  private readonly listeners: Record<string, Set<StorageEventListener>> = {};\n  private readonly localCache: Record<string, string | null> = {};\n  // setTimeout return value is platform specific\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private pollTimer: any | null = null;\n\n  // Safari or iOS browser and embedded in an iframe.\n  private readonly safariLocalStorageNotSynced =\n    _iframeCannotSyncWebStorage() && _isIframe();\n  // Whether to use polling instead of depending on window events\n  private readonly fallbackToPolling = _isMobileBrowser();\n  readonly _shouldAllowMigration = true;\n\n  private forAllChangedKeys(\n    cb: (key: string, oldValue: string | null, newValue: string | null) => void\n  ): void {\n    // Check all keys with listeners on them.\n    for (const key of Object.keys(this.listeners)) {\n      // Get value from localStorage.\n      const newValue = this.storage.getItem(key);\n      const oldValue = this.localCache[key];\n      // If local map value does not match, trigger listener with storage event.\n      // Differentiate this simulated event from the real storage event.\n      if (newValue !== oldValue) {\n        cb(key, oldValue, newValue);\n      }\n    }\n  }\n\n  private onStorageEvent(event: StorageEvent, poll = false): void {\n    // Key would be null in some situations, like when localStorage is cleared\n    if (!event.key) {\n      this.forAllChangedKeys(\n        (key: string, _oldValue: string | null, newValue: string | null) => {\n          this.notifyListeners(key, newValue);\n        }\n      );\n      return;\n    }\n\n    const key = event.key;\n\n    // Check the mechanism how this event was detected.\n    // The first event will dictate the mechanism to be used.\n    if (poll) {\n      // Environment detects storage changes via polling.\n      // Remove storage event listener to prevent possible event duplication.\n      this.detachListener();\n    } else {\n      // Environment detects storage changes via storage event listener.\n      // Remove polling listener to prevent possible event duplication.\n      this.stopPolling();\n    }\n\n    // Safari embedded iframe. Storage event will trigger with the delta\n    // changes but no changes will be applied to the iframe localStorage.\n    if (this.safariLocalStorageNotSynced) {\n      // Get current iframe page value.\n      const storedValue = this.storage.getItem(key);\n      // Value not synchronized, synchronize manually.\n      if (event.newValue !== storedValue) {\n        if (event.newValue !== null) {\n          // Value changed from current value.\n          this.storage.setItem(key, event.newValue);\n        } else {\n          // Current value deleted.\n          this.storage.removeItem(key);\n        }\n      } else if (this.localCache[key] === event.newValue && !poll) {\n        // Already detected and processed, do not trigger listeners again.\n        return;\n      }\n    }\n\n    const triggerListeners = (): void => {\n      // Keep local map up to date in case storage event is triggered before\n      // poll.\n      const storedValue = this.storage.getItem(key);\n      if (!poll && this.localCache[key] === storedValue) {\n        // Real storage event which has already been detected, do nothing.\n        // This seems to trigger in some IE browsers for some reason.\n        return;\n      }\n      this.notifyListeners(key, storedValue);\n    };\n\n    const storedValue = this.storage.getItem(key);\n    if (\n      _isIE10() &&\n      storedValue !== event.newValue &&\n      event.newValue !== event.oldValue\n    ) {\n      // IE 10 has this weird bug where a storage event would trigger with the\n      // correct key, oldValue and newValue but localStorage.getItem(key) does\n      // not yield the updated value until a few milliseconds. This ensures\n      // this recovers from that situation.\n      setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\n    } else {\n      triggerListeners();\n    }\n  }\n\n  private notifyListeners(key: string, value: string | null): void {\n    this.localCache[key] = value;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(value ? JSON.parse(value) : value);\n      }\n    }\n  }\n\n  private startPolling(): void {\n    this.stopPolling();\n\n    this.pollTimer = setInterval(() => {\n      this.forAllChangedKeys(\n        (key: string, oldValue: string | null, newValue: string | null) => {\n          this.onStorageEvent(\n            new StorageEvent('storage', {\n              key,\n              oldValue,\n              newValue\n            }),\n            /* poll */ true\n          );\n        }\n      );\n    }, _POLLING_INTERVAL_MS);\n  }\n\n  private stopPolling(): void {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n\n  private attachListener(): void {\n    window.addEventListener('storage', this.boundEventHandler);\n  }\n\n  private detachListener(): void {\n    window.removeEventListener('storage', this.boundEventHandler);\n  }\n\n  _addListener(key: string, listener: StorageEventListener): void {\n    if (Object.keys(this.listeners).length === 0) {\n      // Whether browser can detect storage event when it had already been pushed to the background.\n      // This may happen in some mobile browsers. A localStorage change in the foreground window\n      // will not be detected in the background window via the storage event.\n      // This was detected in iOS 7.x mobile browsers\n      if (this.fallbackToPolling) {\n        this.startPolling();\n      } else {\n        this.attachListener();\n      }\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = new Set();\n      // Populate the cache to avoid spuriously triggering on first poll.\n      this.localCache[key] = this.storage.getItem(key);\n    }\n    this.listeners[key].add(listener);\n  }\n\n  _removeListener(key: string, listener: StorageEventListener): void {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n\n    if (Object.keys(this.listeners).length === 0) {\n      this.detachListener();\n      this.stopPolling();\n    }\n  }\n\n  // Update local cache on base operations:\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    await super._set(key, value);\n    this.localCache[key] = JSON.stringify(value);\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const value = await super._get<T>(key);\n    this.localCache[key] = JSON.stringify(value);\n    return value;\n  }\n\n  async _remove(key: string): Promise<void> {\n    await super._remove(key);\n    delete this.localCache[key];\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\n * for the underlying storage.\n *\n * @public\n */\nexport const browserLocalPersistence: Persistence = BrowserLocalPersistence;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport {\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  StorageEventListener\n} from '../../core/persistence';\nimport { BrowserPersistenceClass } from './browser';\n\nclass BrowserSessionPersistence\n  extends BrowserPersistenceClass\n  implements InternalPersistence\n{\n  static type: 'SESSION' = 'SESSION';\n\n  constructor() {\n    super(() => window.sessionStorage, PersistenceType.SESSION);\n  }\n\n  _addListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for session storage since it cannot be shared across windows\n    return;\n  }\n\n  _removeListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for session storage since it cannot be shared across windows\n    return;\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\n * for the underlying storage.\n *\n * @public\n */\nexport const browserSessionPersistence: Persistence = BrowserSessionPersistence;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** TODO: remove this once tslib has a polyfill for Promise.allSettled */\ninterface PromiseFulfilledResult<T> {\n  fulfilled: true;\n  value: T;\n}\n\ninterface PromiseRejectedResult {\n  fulfilled: false;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason: any;\n}\n\nexport type PromiseSettledResult<T> =\n  | PromiseFulfilledResult<T>\n  | PromiseRejectedResult;\n\n/**\n * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\n *\n * @param promises - Array of promises to wait on.\n */\nexport function _allSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<Array<PromiseSettledResult<T>>> {\n  return Promise.all(\n    promises.map(async promise => {\n      try {\n        const value = await promise;\n        return {\n          fulfilled: true,\n          value\n        } as PromiseFulfilledResult<T>;\n      } catch (reason) {\n        return {\n          fulfilled: false,\n          reason\n        } as PromiseRejectedResult;\n      }\n    })\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ReceiverHandler,\n  _EventType,\n  _ReceiverResponse,\n  SenderMessageEvent,\n  _Status,\n  _SenderRequest\n} from './index';\nimport { _allSettled } from './promise';\n\n/**\n * Interface class for receiving messages.\n *\n */\nexport class Receiver {\n  private static readonly receivers: Receiver[] = [];\n  private readonly boundEventHandler: EventListener;\n\n  private readonly handlersMap: {\n    // Typescript doesn't have existential types :(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [eventType: string]: Set<ReceiverHandler<any, any>>;\n  } = {};\n\n  constructor(private readonly eventTarget: EventTarget) {\n    this.boundEventHandler = this.handleEvent.bind(this);\n  }\n\n  /**\n   * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\n   *\n   * @param eventTarget - An event target (such as window or self) through which the underlying\n   * messages will be received.\n   */\n  static _getInstance(eventTarget: EventTarget): Receiver {\n    // The results are stored in an array since objects can't be keys for other\n    // objects. In addition, setting a unique property on an event target as a\n    // hash map key may not be allowed due to CORS restrictions.\n    const existingInstance = this.receivers.find(receiver =>\n      receiver.isListeningto(eventTarget)\n    );\n    if (existingInstance) {\n      return existingInstance;\n    }\n    const newInstance = new Receiver(eventTarget);\n    this.receivers.push(newInstance);\n    return newInstance;\n  }\n\n  private isListeningto(eventTarget: EventTarget): boolean {\n    return this.eventTarget === eventTarget;\n  }\n\n  /**\n   * Fans out a MessageEvent to the appropriate listeners.\n   *\n   * @remarks\n   * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\n   * finished processing.\n   *\n   * @param event - The MessageEvent.\n   *\n   */\n  private async handleEvent<\n    T extends _ReceiverResponse,\n    S extends _SenderRequest\n  >(event: Event): Promise<void> {\n    const messageEvent = event as MessageEvent<SenderMessageEvent<S>>;\n    const { eventId, eventType, data } = messageEvent.data;\n\n    const handlers: Set<ReceiverHandler<T, S>> | undefined =\n      this.handlersMap[eventType];\n    if (!handlers?.size) {\n      return;\n    }\n\n    messageEvent.ports[0].postMessage({\n      status: _Status.ACK,\n      eventId,\n      eventType\n    });\n\n    const promises = Array.from(handlers).map(async handler =>\n      handler(messageEvent.origin, data)\n    );\n    const response = await _allSettled(promises);\n    messageEvent.ports[0].postMessage({\n      status: _Status.DONE,\n      eventId,\n      eventType,\n      response\n    });\n  }\n\n  /**\n   * Subscribe an event handler for a particular event.\n   *\n   * @param eventType - Event name to subscribe to.\n   * @param eventHandler - The event handler which should receive the events.\n   *\n   */\n  _subscribe<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    eventHandler: ReceiverHandler<T, S>\n  ): void {\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.addEventListener('message', this.boundEventHandler);\n    }\n\n    if (!this.handlersMap[eventType]) {\n      this.handlersMap[eventType] = new Set();\n    }\n\n    this.handlersMap[eventType].add(eventHandler);\n  }\n\n  /**\n   * Unsubscribe an event handler from a particular event.\n   *\n   * @param eventType - Event name to unsubscribe from.\n   * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.\n   *\n   */\n  _unsubscribe<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    eventHandler?: ReceiverHandler<T, S>\n  ): void {\n    if (this.handlersMap[eventType] && eventHandler) {\n      this.handlersMap[eventType].delete(eventHandler);\n    }\n    if (!eventHandler || this.handlersMap[eventType].size === 0) {\n      delete this.handlersMap[eventType];\n    }\n\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.removeEventListener('message', this.boundEventHandler);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function _generateEventId(prefix = '', digits = 10): string {\n  let random = '';\n  for (let i = 0; i < digits; i++) {\n    random += Math.floor(Math.random() * 10);\n  }\n  return prefix + random;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _generateEventId } from '../../core/util/event_id';\nimport {\n  _SenderRequest,\n  _EventType,\n  ReceiverMessageEvent,\n  _MessageError,\n  SenderMessageEvent,\n  _Status,\n  _ReceiverMessageResponse,\n  _ReceiverResponse,\n  _TimeoutDuration\n} from './index';\n\ninterface MessageHandler {\n  messageChannel: MessageChannel;\n  onMessage: EventListenerOrEventListenerObject;\n}\n\n/**\n * Interface for sending messages and waiting for a completion response.\n *\n */\nexport class Sender {\n  private readonly handlers = new Set<MessageHandler>();\n\n  constructor(private readonly target: ServiceWorker) {}\n\n  /**\n   * Unsubscribe the handler and remove it from our tracking Set.\n   *\n   * @param handler - The handler to unsubscribe.\n   */\n  private removeMessageHandler(handler: MessageHandler): void {\n    if (handler.messageChannel) {\n      handler.messageChannel.port1.removeEventListener(\n        'message',\n        handler.onMessage\n      );\n      handler.messageChannel.port1.close();\n    }\n    this.handlers.delete(handler);\n  }\n\n  /**\n   * Send a message to the Receiver located at {@link target}.\n   *\n   * @remarks\n   * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\n   * receiver has had a chance to fully process the event.\n   *\n   * @param eventType - Type of event to send.\n   * @param data - The payload of the event.\n   * @param timeout - Timeout for waiting on an ACK from the receiver.\n   *\n   * @returns An array of settled promises from all the handlers that were listening on the receiver.\n   */\n  async _send<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    data: S,\n    timeout = _TimeoutDuration.ACK\n  ): Promise<_ReceiverMessageResponse<T>> {\n    const messageChannel =\n      typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\n    if (!messageChannel) {\n      throw new Error(_MessageError.CONNECTION_UNAVAILABLE);\n    }\n    // Node timers and browser timers return fundamentally different types.\n    // We don't actually care what the value is but TS won't accept unknown and\n    // we can't cast properly in both environments.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let completionTimer: any;\n    let handler: MessageHandler;\n    return new Promise<_ReceiverMessageResponse<T>>((resolve, reject) => {\n      const eventId = _generateEventId('', 20);\n      messageChannel.port1.start();\n      const ackTimer = setTimeout(() => {\n        reject(new Error(_MessageError.UNSUPPORTED_EVENT));\n      }, timeout);\n      handler = {\n        messageChannel,\n        onMessage(event: Event): void {\n          const messageEvent = event as MessageEvent<ReceiverMessageEvent<T>>;\n          if (messageEvent.data.eventId !== eventId) {\n            return;\n          }\n          switch (messageEvent.data.status) {\n            case _Status.ACK:\n              // The receiver should ACK first.\n              clearTimeout(ackTimer);\n              completionTimer = setTimeout(() => {\n                reject(new Error(_MessageError.TIMEOUT));\n              }, _TimeoutDuration.COMPLETION);\n              break;\n            case _Status.DONE:\n              // Once the receiver's handlers are finished we will get the results.\n              clearTimeout(completionTimer);\n              resolve(messageEvent.data.response);\n              break;\n            default:\n              clearTimeout(ackTimer);\n              clearTimeout(completionTimer);\n              reject(new Error(_MessageError.INVALID_RESPONSE));\n              break;\n          }\n        }\n      };\n      this.handlers.add(handler);\n      messageChannel.port1.addEventListener('message', handler.onMessage);\n      this.target.postMessage(\n        {\n          eventType,\n          eventId,\n          data\n        } as SenderMessageEvent<S>,\n        [messageChannel.port2]\n      );\n    }).finally(() => {\n      if (handler) {\n        this.removeMessageHandler(handler);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Recaptcha, GreCAPTCHATopLevel } from './recaptcha/recaptcha';\n\n/**\n * A specialized window type that melds the normal window type plus the\n * various bits we need. The three different blocks that are &'d together\n * cant be defined in the same block together.\n */\nexport type AuthWindow = {\n  // Standard window types\n  [T in keyof Window]: Window[T];\n} & {\n  // Any known / named properties we want to add\n  grecaptcha?: Recaptcha | GreCAPTCHATopLevel;\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  ___jsl?: Record<string, any>;\n  gapi?: typeof gapi;\n} & {\n  // A final catch-all for callbacks (which will have random names) that\n  // we will stick on the window.\n  [callback: string]: (...args: unknown[]) => void;\n};\n\n/**\n * Lazy accessor for window, since the compat layer won't tree shake this out,\n * we need to make sure not to mess with window unless we have to\n */\nexport function _window(): AuthWindow {\n  return window as unknown as AuthWindow;\n}\n\nexport function _setWindowLocation(url: string): void {\n  _window().location.href = url;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _window } from '../auth_window';\n\nexport function _isWorker(): boolean {\n  return (\n    typeof _window()['WorkerGlobalScope'] !== 'undefined' &&\n    typeof _window()['importScripts'] === 'function'\n  );\n}\n\nexport async function _getActiveServiceWorker(): Promise<ServiceWorker | null> {\n  if (!navigator?.serviceWorker) {\n    return null;\n  }\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    return registration.active;\n  } catch {\n    return null;\n  }\n}\n\nexport function _getServiceWorkerController(): ServiceWorker | null {\n  return navigator?.serviceWorker?.controller || null;\n}\n\nexport function _getWorkerGlobalScope(): ServiceWorker | null {\n  return _isWorker() ? (self as unknown as ServiceWorker) : null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\nimport {\n  PersistedBlob,\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener,\n  STORAGE_AVAILABLE_KEY\n} from '../../core/persistence/';\nimport {\n  _EventType,\n  _PingResponse,\n  KeyChangedResponse,\n  KeyChangedRequest,\n  PingRequest,\n  _TimeoutDuration\n} from '../messagechannel/index';\nimport { Receiver } from '../messagechannel/receiver';\nimport { Sender } from '../messagechannel/sender';\nimport {\n  _isWorker,\n  _getActiveServiceWorker,\n  _getServiceWorkerController,\n  _getWorkerGlobalScope\n} from '../util/worker';\n\nexport const DB_NAME = 'firebaseLocalStorageDb';\nconst DB_VERSION = 1;\nconst DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\nconst DB_DATA_KEYPATH = 'fbase_key';\n\ninterface DBObject {\n  [DB_DATA_KEYPATH]: string;\n  value: PersistedBlob;\n}\n\n/**\n * Promise wrapper for IDBRequest\n *\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\n *\n */\nclass DBPromise<T> {\n  constructor(private readonly request: IDBRequest) {}\n\n  toPromise(): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      this.request.addEventListener('success', () => {\n        resolve(this.request.result);\n      });\n      this.request.addEventListener('error', () => {\n        reject(this.request.error);\n      });\n    });\n  }\n}\n\nfunction getObjectStore(db: IDBDatabase, isReadWrite: boolean): IDBObjectStore {\n  return db\n    .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')\n    .objectStore(DB_OBJECTSTORE_NAME);\n}\n\nexport async function _clearDatabase(db: IDBDatabase): Promise<void> {\n  const objectStore = getObjectStore(db, true);\n  return new DBPromise<void>(objectStore.clear()).toPromise();\n}\n\nexport function _deleteDatabase(): Promise<void> {\n  const request = indexedDB.deleteDatabase(DB_NAME);\n  return new DBPromise<void>(request).toPromise();\n}\n\nexport function _openDatabase(): Promise<IDBDatabase> {\n  const request = indexedDB.open(DB_NAME, DB_VERSION);\n  return new Promise((resolve, reject) => {\n    request.addEventListener('error', () => {\n      reject(request.error);\n    });\n\n    request.addEventListener('upgradeneeded', () => {\n      const db = request.result;\n\n      try {\n        db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\n      } catch (e) {\n        reject(e);\n      }\n    });\n\n    request.addEventListener('success', async () => {\n      const db: IDBDatabase = request.result;\n      // Strange bug that occurs in Firefox when multiple tabs are opened at the\n      // same time. The only way to recover seems to be deleting the database\n      // and re-initializing it.\n      // https://github.com/firebase/firebase-js-sdk/issues/634\n\n      if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\n        // Need to close the database or else you get a `blocked` event\n        db.close();\n        await _deleteDatabase();\n        resolve(await _openDatabase());\n      } else {\n        resolve(db);\n      }\n    });\n  });\n}\n\nexport async function _putObject(\n  db: IDBDatabase,\n  key: string,\n  value: PersistenceValue | string\n): Promise<void> {\n  const request = getObjectStore(db, true).put({\n    [DB_DATA_KEYPATH]: key,\n    value\n  });\n  return new DBPromise<void>(request).toPromise();\n}\n\nasync function getObject(\n  db: IDBDatabase,\n  key: string\n): Promise<PersistedBlob | null> {\n  const request = getObjectStore(db, false).get(key);\n  const data = await new DBPromise<DBObject | undefined>(request).toPromise();\n  return data === undefined ? null : data.value;\n}\n\nexport function _deleteObject(db: IDBDatabase, key: string): Promise<void> {\n  const request = getObjectStore(db, true).delete(key);\n  return new DBPromise<void>(request).toPromise();\n}\n\nexport const _POLLING_INTERVAL_MS = 800;\nexport const _TRANSACTION_RETRY_COUNT = 3;\n\nclass IndexedDBLocalPersistence implements InternalPersistence {\n  static type: 'LOCAL' = 'LOCAL';\n\n  type = PersistenceType.LOCAL;\n  db?: IDBDatabase;\n  readonly _shouldAllowMigration = true;\n\n  private readonly listeners: Record<string, Set<StorageEventListener>> = {};\n  private readonly localCache: Record<string, PersistenceValue | null> = {};\n  // setTimeout return value is platform specific\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private pollTimer: any | null = null;\n  private pendingWrites = 0;\n\n  private receiver: Receiver | null = null;\n  private sender: Sender | null = null;\n  private serviceWorkerReceiverAvailable = false;\n  private activeServiceWorker: ServiceWorker | null = null;\n  // Visible for testing only\n  readonly _workerInitializationPromise: Promise<void>;\n\n  constructor() {\n    // Fire & forget the service worker registration as it may never resolve\n    this._workerInitializationPromise =\n      this.initializeServiceWorkerMessaging().then(\n        () => {},\n        () => {}\n      );\n  }\n\n  async _openDb(): Promise<IDBDatabase> {\n    if (this.db) {\n      return this.db;\n    }\n    this.db = await _openDatabase();\n    return this.db;\n  }\n\n  async _withRetries<T>(op: (db: IDBDatabase) => Promise<T>): Promise<T> {\n    let numAttempts = 0;\n\n    while (true) {\n      try {\n        const db = await this._openDb();\n        return await op(db);\n      } catch (e) {\n        if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\n          throw e;\n        }\n        if (this.db) {\n          this.db.close();\n          this.db = undefined;\n        }\n        // TODO: consider adding exponential backoff\n      }\n    }\n  }\n\n  /**\n   * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\n   * postMessage interface to send these events to the worker ourselves.\n   */\n  private async initializeServiceWorkerMessaging(): Promise<void> {\n    return _isWorker() ? this.initializeReceiver() : this.initializeSender();\n  }\n\n  /**\n   * As the worker we should listen to events from the main window.\n   */\n  private async initializeReceiver(): Promise<void> {\n    this.receiver = Receiver._getInstance(_getWorkerGlobalScope()!);\n    // Refresh from persistence if we receive a KeyChanged message.\n    this.receiver._subscribe(\n      _EventType.KEY_CHANGED,\n      async (_origin: string, data: KeyChangedRequest) => {\n        const keys = await this._poll();\n        return {\n          keyProcessed: keys.includes(data.key)\n        };\n      }\n    );\n    // Let the sender know that we are listening so they give us more timeout.\n    this.receiver._subscribe(\n      _EventType.PING,\n      async (_origin: string, _data: PingRequest) => {\n        return [_EventType.KEY_CHANGED];\n      }\n    );\n  }\n\n  /**\n   * As the main window, we should let the worker know when keys change (set and remove).\n   *\n   * @remarks\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\n   * may not resolve.\n   */\n  private async initializeSender(): Promise<void> {\n    // Check to see if there's an active service worker.\n    this.activeServiceWorker = await _getActiveServiceWorker();\n    if (!this.activeServiceWorker) {\n      return;\n    }\n    this.sender = new Sender(this.activeServiceWorker);\n    // Ping the service worker to check what events they can handle.\n    const results = await this.sender._send<_PingResponse, PingRequest>(\n      _EventType.PING,\n      {},\n      _TimeoutDuration.LONG_ACK\n    );\n    if (!results) {\n      return;\n    }\n    if (\n      results[0]?.fulfilled &&\n      results[0]?.value.includes(_EventType.KEY_CHANGED)\n    ) {\n      this.serviceWorkerReceiverAvailable = true;\n    }\n  }\n\n  /**\n   * Let the worker know about a changed key, the exact key doesn't technically matter since the\n   * worker will just trigger a full sync anyway.\n   *\n   * @remarks\n   * For now, we only support one service worker per page.\n   *\n   * @param key - Storage key which changed.\n   */\n  private async notifyServiceWorker(key: string): Promise<void> {\n    if (\n      !this.sender ||\n      !this.activeServiceWorker ||\n      _getServiceWorkerController() !== this.activeServiceWorker\n    ) {\n      return;\n    }\n    try {\n      await this.sender._send<KeyChangedResponse, KeyChangedRequest>(\n        _EventType.KEY_CHANGED,\n        { key },\n        // Use long timeout if receiver has previously responded to a ping from us.\n        this.serviceWorkerReceiverAvailable\n          ? _TimeoutDuration.LONG_ACK\n          : _TimeoutDuration.ACK\n      );\n    } catch {\n      // This is a best effort approach. Ignore errors.\n    }\n  }\n\n  async _isAvailable(): Promise<boolean> {\n    try {\n      if (!indexedDB) {\n        return false;\n      }\n      const db = await _openDatabase();\n      await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\n      await _deleteObject(db, STORAGE_AVAILABLE_KEY);\n      return true;\n    } catch {}\n    return false;\n  }\n\n  private async _withPendingWrite(write: () => Promise<void>): Promise<void> {\n    this.pendingWrites++;\n    try {\n      await write();\n    } finally {\n      this.pendingWrites--;\n    }\n  }\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db: IDBDatabase) => _putObject(db, key, value));\n      this.localCache[key] = value;\n      return this.notifyServiceWorker(key);\n    });\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const obj = (await this._withRetries((db: IDBDatabase) =>\n      getObject(db, key)\n    )) as T;\n    this.localCache[key] = obj;\n    return obj;\n  }\n\n  async _remove(key: string): Promise<void> {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db: IDBDatabase) => _deleteObject(db, key));\n      delete this.localCache[key];\n      return this.notifyServiceWorker(key);\n    });\n  }\n\n  private async _poll(): Promise<string[]> {\n    // TODO: check if we need to fallback if getAll is not supported\n    const result = await this._withRetries((db: IDBDatabase) => {\n      const getAllRequest = getObjectStore(db, false).getAll();\n      return new DBPromise<DBObject[] | null>(getAllRequest).toPromise();\n    });\n\n    if (!result) {\n      return [];\n    }\n\n    // If we have pending writes in progress abort, we'll get picked up on the next poll\n    if (this.pendingWrites !== 0) {\n      return [];\n    }\n\n    const keys = [];\n    const keysInResult = new Set();\n    for (const { fbase_key: key, value } of result) {\n      keysInResult.add(key);\n      if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\n        this.notifyListeners(key, value as PersistenceValue);\n        keys.push(key);\n      }\n    }\n    for (const localKey of Object.keys(this.localCache)) {\n      if (this.localCache[localKey] && !keysInResult.has(localKey)) {\n        // Deleted\n        this.notifyListeners(localKey, null);\n        keys.push(localKey);\n      }\n    }\n    return keys;\n  }\n\n  private notifyListeners(\n    key: string,\n    newValue: PersistenceValue | null\n  ): void {\n    this.localCache[key] = newValue;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(newValue);\n      }\n    }\n  }\n\n  private startPolling(): void {\n    this.stopPolling();\n\n    this.pollTimer = setInterval(\n      async () => this._poll(),\n      _POLLING_INTERVAL_MS\n    );\n  }\n\n  private stopPolling(): void {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n\n  _addListener(key: string, listener: StorageEventListener): void {\n    if (Object.keys(this.listeners).length === 0) {\n      this.startPolling();\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = new Set();\n      // Populate the cache to avoid spuriously triggering on first poll.\n      void this._get(key); // This can happen in the background async and we can return immediately.\n    }\n    this.listeners[key].add(listener);\n  }\n\n  _removeListener(key: string, listener: StorageEventListener): void {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n\n    if (Object.keys(this.listeners).length === 0) {\n      this.stopPolling();\n    }\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\n * for the underlying storage.\n *\n * @public\n */\nexport const indexedDBLocalPersistence: Persistence = IndexedDBLocalPersistence;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performApiRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { MfaEnrollment } from '../account_management/mfa';\nimport { SignInWithIdpResponse } from './idp';\nimport {\n  SignInWithPhoneNumberRequest,\n  SignInWithPhoneNumberResponse\n} from './sms';\n\nexport interface FinalizeMfaResponse {\n  idToken: string;\n  refreshToken: string;\n}\n\n/**\n * @internal\n */\nexport interface IdTokenMfaResponse extends IdTokenResponse {\n  mfaPendingCredential?: string;\n  mfaInfo?: MfaEnrollment[];\n}\n\nexport interface StartPhoneMfaSignInRequest {\n  mfaPendingCredential: string;\n  mfaEnrollmentId: string;\n  phoneSignInInfo: {\n    recaptchaToken: string;\n  };\n  tenantId?: string;\n}\n\nexport interface StartPhoneMfaSignInResponse {\n  phoneResponseInfo: {\n    sessionInfo: string;\n  };\n}\n\nexport function startSignInPhoneMfa(\n  auth: Auth,\n  request: StartPhoneMfaSignInRequest\n): Promise<StartPhoneMfaSignInResponse> {\n  return _performApiRequest<\n    StartPhoneMfaSignInRequest,\n    StartPhoneMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface FinalizePhoneMfaSignInRequest {\n  mfaPendingCredential: string;\n  phoneVerificationInfo: SignInWithPhoneNumberRequest;\n  tenantId?: string;\n}\n\n// TOTP MFA Sign in only has a finalize phase. Phone MFA has a start phase to initiate sending an\n// SMS and a finalize phase to complete sign in. With TOTP, the user already has the OTP in the\n// TOTP/Authenticator app.\nexport interface FinalizeTotpMfaSignInRequest {\n  mfaPendingCredential: string;\n  totpVerificationInfo: { verificationCode: string };\n  tenantId?: string;\n  mfaEnrollmentId: string;\n}\n\nexport interface FinalizePhoneMfaSignInResponse extends FinalizeMfaResponse {}\n\nexport interface FinalizeTotpMfaSignInResponse extends FinalizeMfaResponse {}\n\nexport function finalizeSignInPhoneMfa(\n  auth: Auth,\n  request: FinalizePhoneMfaSignInRequest\n): Promise<FinalizePhoneMfaSignInResponse> {\n  return _performApiRequest<\n    FinalizePhoneMfaSignInRequest,\n    FinalizePhoneMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport function finalizeSignInTotpMfa(\n  auth: Auth,\n  request: FinalizeTotpMfaSignInRequest\n): Promise<FinalizeTotpMfaSignInResponse> {\n  return _performApiRequest<\n    FinalizeTotpMfaSignInRequest,\n    FinalizeTotpMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\n/**\n * @internal\n */\nexport type PhoneOrOauthTokenResponse =\n  | SignInWithPhoneNumberResponse\n  | SignInWithIdpResponse\n  | IdTokenResponse;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystring } from '@firebase/util';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert, _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as jsHelpers from '../load_js';\nimport { Recaptcha, isV2 } from './recaptcha';\nimport { MockReCaptcha } from './recaptcha_mock';\n\n// ReCaptcha will load using the same callback, so the callback function needs\n// to be kept around\nexport const _JSLOAD_CALLBACK = jsHelpers._generateCallbackName('rcb');\nconst NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\nconst RECAPTCHA_BASE = 'https://www.google.com/recaptcha/api.js?';\n\n/**\n * We need to mark this interface as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nexport interface ReCaptchaLoader {\n  load(auth: AuthInternal, hl?: string): Promise<Recaptcha>;\n  clearedOneInstance(): void;\n}\n\n/**\n * Loader for the GReCaptcha library. There should only ever be one of this.\n */\nexport class ReCaptchaLoaderImpl implements ReCaptchaLoader {\n  private hostLanguage = '';\n  private counter = 0;\n  /**\n   * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\n   * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\n   * `window.grecaptcha.render()` will not. Another load will add it.\n   */\n  private readonly librarySeparatelyLoaded = !!_window().grecaptcha?.render;\n\n  load(auth: AuthInternal, hl = ''): Promise<Recaptcha> {\n    _assert(isHostLanguageValid(hl), auth, AuthErrorCode.ARGUMENT_ERROR);\n\n    if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n      return Promise.resolve(_window().grecaptcha! as Recaptcha);\n    }\n    return new Promise<Recaptcha>((resolve, reject) => {\n      const networkTimeout = _window().setTimeout(() => {\n        reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n      }, NETWORK_TIMEOUT_DELAY.get());\n\n      _window()[_JSLOAD_CALLBACK] = () => {\n        _window().clearTimeout(networkTimeout);\n        delete _window()[_JSLOAD_CALLBACK];\n\n        const recaptcha = _window().grecaptcha as Recaptcha;\n\n        if (!recaptcha || !isV2(recaptcha)) {\n          reject(_createError(auth, AuthErrorCode.INTERNAL_ERROR));\n          return;\n        }\n\n        // Wrap the greptcha render function so that we know if the developer has\n        // called it separately\n        const render = recaptcha.render;\n        recaptcha.render = (container, params) => {\n          const widgetId = render(container, params);\n          this.counter++;\n          return widgetId;\n        };\n\n        this.hostLanguage = hl;\n        resolve(recaptcha);\n      };\n\n      const url = `${RECAPTCHA_BASE}?${querystring({\n        onload: _JSLOAD_CALLBACK,\n        render: 'explicit',\n        hl\n      })}`;\n\n      jsHelpers._loadJS(url).catch(() => {\n        clearTimeout(networkTimeout);\n        reject(_createError(auth, AuthErrorCode.INTERNAL_ERROR));\n      });\n    });\n  }\n\n  clearedOneInstance(): void {\n    this.counter--;\n  }\n\n  private shouldResolveImmediately(hl: string): boolean {\n    // We can resolve immediately if:\n    //   • grecaptcha is already defined AND (\n    //     1. the requested language codes are the same OR\n    //     2. there exists already a ReCaptcha on the page\n    //     3. the library was already loaded by the app\n    // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n    // that are already in the page\n    return (\n      !!_window().grecaptcha?.render &&\n      (hl === this.hostLanguage ||\n        this.counter > 0 ||\n        this.librarySeparatelyLoaded)\n    );\n  }\n}\n\nfunction isHostLanguageValid(hl: string): boolean {\n  return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n}\n\nexport class MockReCaptchaLoaderImpl implements ReCaptchaLoader {\n  async load(auth: AuthInternal): Promise<Recaptcha> {\n    return new MockReCaptcha(auth);\n  }\n\n  clearedOneInstance(): void {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, RecaptchaParameters } from '../../model/public_types';\nimport { getRecaptchaParams } from '../../api/authentication/recaptcha';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\nimport { _isHttpOrHttps } from '../../core/util/location';\nimport { ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport { _isWorker } from '../util/worker';\nimport { Recaptcha } from './recaptcha';\nimport {\n  MockReCaptchaLoaderImpl,\n  ReCaptchaLoader,\n  ReCaptchaLoaderImpl\n} from './recaptcha_loader';\n\nexport const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\n\nconst DEFAULT_PARAMS: RecaptchaParameters = {\n  theme: 'light',\n  type: 'image'\n};\n\ntype TokenCallback = (token: string) => void;\n\n/**\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n *\n * @remarks\n * `RecaptchaVerifier` does not work in a Node.js environment.\n *\n * @public\n */\nexport class RecaptchaVerifier implements ApplicationVerifierInternal {\n  /**\n   * The application verifier type.\n   *\n   * @remarks\n   * For a reCAPTCHA verifier, this is 'recaptcha'.\n   */\n  readonly type = RECAPTCHA_VERIFIER_TYPE;\n  private destroyed = false;\n  private widgetId: number | null = null;\n  private readonly container: HTMLElement;\n  private readonly isInvisible: boolean;\n  private readonly tokenChangeListeners = new Set<TokenCallback>();\n  private renderPromise: Promise<number> | null = null;\n  private readonly auth: AuthInternal;\n\n  /** @internal */\n  readonly _recaptchaLoader: ReCaptchaLoader;\n  private recaptcha: Recaptcha | null = null;\n\n  /**\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   * @param containerOrId - The reCAPTCHA container parameter.\n   *\n   * @remarks\n   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n   * an element ID. The corresponding element must also must be in the DOM at the time of\n   * initialization.\n   *\n   * @param parameters - The optional reCAPTCHA parameters.\n   *\n   * @remarks\n   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n   * 'invisible'.\n   */\n  constructor(\n    authExtern: Auth,\n    containerOrId: HTMLElement | string,\n    private readonly parameters: RecaptchaParameters = {\n      ...DEFAULT_PARAMS\n    }\n  ) {\n    this.auth = _castAuth(authExtern);\n    this.isInvisible = this.parameters.size === 'invisible';\n    _assert(\n      typeof document !== 'undefined',\n      this.auth,\n      AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    const container =\n      typeof containerOrId === 'string'\n        ? document.getElementById(containerOrId)\n        : containerOrId;\n    _assert(container, this.auth, AuthErrorCode.ARGUMENT_ERROR);\n\n    this.container = container;\n    this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n\n    this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting\n      ? new MockReCaptchaLoaderImpl()\n      : new ReCaptchaLoaderImpl();\n\n    this.validateStartingState();\n    // TODO: Figure out if sdk version is needed\n  }\n\n  /**\n   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n   *\n   * @returns A Promise for the reCAPTCHA token.\n   */\n  async verify(): Promise<string> {\n    this.assertNotDestroyed();\n    const id = await this.render();\n    const recaptcha = this.getAssertedRecaptcha();\n\n    const response = recaptcha.getResponse(id);\n    if (response) {\n      return response;\n    }\n\n    return new Promise<string>(resolve => {\n      const tokenChange = (token: string): void => {\n        if (!token) {\n          return; // Ignore token expirations.\n        }\n        this.tokenChangeListeners.delete(tokenChange);\n        resolve(token);\n      };\n\n      this.tokenChangeListeners.add(tokenChange);\n      if (this.isInvisible) {\n        recaptcha.execute(id);\n      }\n    });\n  }\n\n  /**\n   * Renders the reCAPTCHA widget on the page.\n   *\n   * @returns A Promise that resolves with the reCAPTCHA widget ID.\n   */\n  render(): Promise<number> {\n    try {\n      this.assertNotDestroyed();\n    } catch (e) {\n      // This method returns a promise. Since it's not async (we want to return the\n      // _same_ promise if rendering is still occurring), the API surface should\n      // reject with the error rather than just throw\n      return Promise.reject(e);\n    }\n\n    if (this.renderPromise) {\n      return this.renderPromise;\n    }\n\n    this.renderPromise = this.makeRenderPromise().catch(e => {\n      this.renderPromise = null;\n      throw e;\n    });\n\n    return this.renderPromise;\n  }\n\n  /** @internal */\n  _reset(): void {\n    this.assertNotDestroyed();\n    if (this.widgetId !== null) {\n      this.getAssertedRecaptcha().reset(this.widgetId);\n    }\n  }\n\n  /**\n   * Clears the reCAPTCHA widget from the page and destroys the instance.\n   */\n  clear(): void {\n    this.assertNotDestroyed();\n    this.destroyed = true;\n    this._recaptchaLoader.clearedOneInstance();\n    if (!this.isInvisible) {\n      this.container.childNodes.forEach(node => {\n        this.container.removeChild(node);\n      });\n    }\n  }\n\n  private validateStartingState(): void {\n    _assert(!this.parameters.sitekey, this.auth, AuthErrorCode.ARGUMENT_ERROR);\n    _assert(\n      this.isInvisible || !this.container.hasChildNodes(),\n      this.auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    _assert(\n      typeof document !== 'undefined',\n      this.auth,\n      AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n  }\n\n  private makeTokenCallback(\n    existing: TokenCallback | string | undefined\n  ): TokenCallback {\n    return token => {\n      this.tokenChangeListeners.forEach(listener => listener(token));\n      if (typeof existing === 'function') {\n        existing(token);\n      } else if (typeof existing === 'string') {\n        const globalFunc = _window()[existing];\n        if (typeof globalFunc === 'function') {\n          globalFunc(token);\n        }\n      }\n    };\n  }\n\n  private assertNotDestroyed(): void {\n    _assert(!this.destroyed, this.auth, AuthErrorCode.INTERNAL_ERROR);\n  }\n\n  private async makeRenderPromise(): Promise<number> {\n    await this.init();\n    if (!this.widgetId) {\n      let container = this.container;\n      if (!this.isInvisible) {\n        const guaranteedEmpty = document.createElement('div');\n        container.appendChild(guaranteedEmpty);\n        container = guaranteedEmpty;\n      }\n\n      this.widgetId = this.getAssertedRecaptcha().render(\n        container,\n        this.parameters\n      );\n    }\n\n    return this.widgetId;\n  }\n\n  private async init(): Promise<void> {\n    _assert(\n      _isHttpOrHttps() && !_isWorker(),\n      this.auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n\n    await domReady();\n    this.recaptcha = await this._recaptchaLoader.load(\n      this.auth,\n      this.auth.languageCode || undefined\n    );\n\n    const siteKey = await getRecaptchaParams(this.auth);\n    _assert(siteKey, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.parameters.sitekey = siteKey;\n  }\n\n  private getAssertedRecaptcha(): Recaptcha {\n    _assert(this.recaptcha, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return this.recaptcha;\n  }\n}\n\nfunction domReady(): Promise<void> {\n  let resolver: (() => void) | null = null;\n  return new Promise<void>(resolve => {\n    if (document.readyState === 'complete') {\n      resolve();\n      return;\n    }\n\n    // Document not ready, wait for load before resolving.\n    // Save resolver, so we can remove listener in case it was externally\n    // cancelled.\n    resolver = () => resolve();\n    window.addEventListener('load', resolver);\n  }).catch(e => {\n    if (resolver) {\n      window.removeEventListener('load', resolver);\n    }\n\n    throw e;\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApplicationVerifier,\n  Auth,\n  ConfirmationResult,\n  PhoneInfoOptions,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { startEnrollPhoneMfa } from '../../api/account_management/mfa';\nimport { startSignInPhoneMfa } from '../../api/authentication/mfa';\nimport { sendPhoneVerificationCode } from '../../api/authentication/sms';\nimport { ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { PhoneAuthCredential } from '../../core/credentials/phone';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assertLinkedStatus, _link } from '../../core/user/link_unlink';\nimport { _assert } from '../../core/util/assert';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  linkWithCredential,\n  reauthenticateWithCredential,\n  signInWithCredential\n} from '../../core/strategies/credential';\nimport {\n  MultiFactorSessionImpl,\n  MultiFactorSessionType\n} from '../../mfa/mfa_session';\nimport { UserInternal } from '../../model/user';\nimport { RECAPTCHA_VERIFIER_TYPE } from '../recaptcha/recaptcha_verifier';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { ProviderId } from '../../model/enums';\n\ninterface OnConfirmationCallback {\n  (credential: PhoneAuthCredential): Promise<UserCredential>;\n}\n\nclass ConfirmationResultImpl implements ConfirmationResult {\n  constructor(\n    readonly verificationId: string,\n    private readonly onConfirmation: OnConfirmationCallback\n  ) {}\n\n  confirm(verificationCode: string): Promise<UserCredential> {\n    const authCredential = PhoneAuthCredential._fromVerification(\n      this.verificationId,\n      verificationCode\n    );\n    return this.onConfirmation(authCredential);\n  }\n}\n\n/**\n * Asynchronously signs in using a phone number.\n *\n * @remarks\n * This method sends a code via SMS to the given\n * phone number, and returns a {@link ConfirmationResult}. After the user\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\n * with the code to sign the user in.\n *\n * For abuse prevention, this method also requires a {@link ApplicationVerifier}.\n * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.\n * This function can work on other platforms that do not support the\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\n * third-party {@link ApplicationVerifier} implementation.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n * // Obtain a verificationCode from the user.\n * const credential = await confirmationResult.confirm(verificationCode);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function signInWithPhoneNumber(\n  auth: Auth,\n  phoneNumber: string,\n  appVerifier: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const authInternal = _castAuth(auth);\n  const verificationId = await _verifyPhoneNumber(\n    authInternal,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    signInWithCredential(authInternal, cred)\n  );\n}\n\n/**\n * Links the user account with the given phone number.\n *\n * @remarks\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function linkWithPhoneNumber(\n  user: User,\n  phoneNumber: string,\n  appVerifier: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  await _assertLinkedStatus(false, userInternal, ProviderId.PHONE);\n  const verificationId = await _verifyPhoneNumber(\n    userInternal.auth,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    linkWithCredential(userInternal, cred)\n  );\n}\n\n/**\n * Re-authenticates a user using a fresh phone credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n *\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function reauthenticateWithPhoneNumber(\n  user: User,\n  phoneNumber: string,\n  appVerifier: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const verificationId = await _verifyPhoneNumber(\n    userInternal.auth,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    reauthenticateWithCredential(userInternal, cred)\n  );\n}\n\n/**\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\n *\n */\nexport async function _verifyPhoneNumber(\n  auth: AuthInternal,\n  options: PhoneInfoOptions | string,\n  verifier: ApplicationVerifierInternal\n): Promise<string> {\n  const recaptchaToken = await verifier.verify();\n\n  try {\n    _assert(\n      typeof recaptchaToken === 'string',\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    _assert(\n      verifier.type === RECAPTCHA_VERIFIER_TYPE,\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n\n    let phoneInfoOptions: PhoneInfoOptions;\n\n    if (typeof options === 'string') {\n      phoneInfoOptions = {\n        phoneNumber: options\n      };\n    } else {\n      phoneInfoOptions = options;\n    }\n\n    if ('session' in phoneInfoOptions) {\n      const session = phoneInfoOptions.session as MultiFactorSessionImpl;\n\n      if ('phoneNumber' in phoneInfoOptions) {\n        _assert(\n          session.type === MultiFactorSessionType.ENROLL,\n          auth,\n          AuthErrorCode.INTERNAL_ERROR\n        );\n        const response = await startEnrollPhoneMfa(auth, {\n          idToken: session.credential,\n          phoneEnrollmentInfo: {\n            phoneNumber: phoneInfoOptions.phoneNumber,\n            recaptchaToken\n          }\n        });\n        return response.phoneSessionInfo.sessionInfo;\n      } else {\n        _assert(\n          session.type === MultiFactorSessionType.SIGN_IN,\n          auth,\n          AuthErrorCode.INTERNAL_ERROR\n        );\n        const mfaEnrollmentId =\n          phoneInfoOptions.multiFactorHint?.uid ||\n          phoneInfoOptions.multiFactorUid;\n        _assert(mfaEnrollmentId, auth, AuthErrorCode.MISSING_MFA_INFO);\n        const response = await startSignInPhoneMfa(auth, {\n          mfaPendingCredential: session.credential,\n          mfaEnrollmentId,\n          phoneSignInInfo: {\n            recaptchaToken\n          }\n        });\n        return response.phoneResponseInfo.sessionInfo;\n      }\n    } else {\n      const { sessionInfo } = await sendPhoneVerificationCode(auth, {\n        phoneNumber: phoneInfoOptions.phoneNumber,\n        recaptchaToken\n      });\n      return sessionInfo;\n    }\n  } finally {\n    verifier._reset();\n  }\n}\n\n/**\n * Updates the user's phone number.\n *\n * @remarks\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * await updatePhoneNumber(user, phoneCredential);\n * ```\n *\n * @param user - The user.\n * @param credential - A credential authenticating the new phone number.\n *\n * @public\n */\nexport async function updatePhoneNumber(\n  user: User,\n  credential: PhoneAuthCredential\n): Promise<void> {\n  await _link(getModularInstance(user) as UserInternal, credential);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  PhoneInfoOptions,\n  ApplicationVerifier,\n  UserCredential\n} from '../../model/public_types';\n\nimport { SignInWithPhoneNumberResponse } from '../../api/authentication/sms';\nimport { ApplicationVerifierInternal as ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { AuthInternal as AuthInternal } from '../../model/auth';\nimport { UserCredentialInternal as UserCredentialInternal } from '../../model/user';\nimport { PhoneAuthCredential } from '../../core/credentials/phone';\nimport { _verifyPhoneNumber } from '../strategies/phone';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthCredential } from '../../core';\nimport { FirebaseError, getModularInstance } from '@firebase/util';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link PhoneAuthCredential}.\n *\n * @remarks\n * `PhoneAuthProvider` does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const userCredential = await signInWithCredential(auth, phoneCredential);\n * ```\n *\n * @public\n */\nexport class PhoneAuthProvider {\n  /** Always set to {@link ProviderId}.PHONE. */\n  static readonly PROVIDER_ID: 'phone' = ProviderId.PHONE;\n  /** Always set to {@link SignInMethod}.PHONE. */\n  static readonly PHONE_SIGN_IN_METHOD: 'phone' = SignInMethod.PHONE;\n\n  /** Always set to {@link ProviderId}.PHONE. */\n  readonly providerId = PhoneAuthProvider.PROVIDER_ID;\n  private readonly auth: AuthInternal;\n\n  /**\n   * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n   *\n   */\n  constructor(auth: Auth) {\n    this.auth = _castAuth(auth);\n  }\n\n  /**\n   *\n   * Starts a phone number authentication flow by sending a verification code to the given phone\n   * number.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n   * E.164 format (e.g. +16505550101).\n   * @param applicationVerifier - For abuse prevention, this method also requires a\n   * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,\n   * {@link RecaptchaVerifier}.\n   *\n   * @returns A Promise for a verification ID that can be passed to\n   * {@link PhoneAuthProvider.credential} to identify this flow..\n   */\n  verifyPhoneNumber(\n    phoneOptions: PhoneInfoOptions | string,\n    applicationVerifier: ApplicationVerifier\n  ): Promise<string> {\n    return _verifyPhoneNumber(\n      this.auth,\n      phoneOptions,\n      getModularInstance(applicationVerifier as ApplicationVerifierInternal)\n    );\n  }\n\n  /**\n   * Creates a phone auth credential, given the verification ID from\n   * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n   * mobile device.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n   * @param verificationCode - The verification code sent to the user's mobile device.\n   *\n   * @returns The auth provider credential.\n   */\n  static credential(\n    verificationId: string,\n    verificationCode: string\n  ): PhoneAuthCredential {\n    return PhoneAuthCredential._fromVerification(\n      verificationId,\n      verificationCode\n    );\n  }\n\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential}.\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): AuthCredential | null {\n    const credential = userCredential as UserCredentialInternal;\n    return PhoneAuthProvider.credentialFromTaggedObject(credential);\n  }\n\n  /**\n   * Returns an {@link AuthCredential} when passed an error.\n   *\n   * @remarks\n   *\n   * This method works for errors like\n   * `auth/account-exists-with-different-credentials`. This is useful for\n   * recovering when attempting to set a user's phone number but the number\n   * in question is already tied to another account. For example, the following\n   * code tries to update the current user's phone number, and if that\n   * fails, links the user with the account associated with that number:\n   *\n   * ```js\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n   * try {\n   *   const code = ''; // Prompt the user for the verification code\n   *   await updatePhoneNumber(\n   *       auth.currentUser,\n   *       PhoneAuthProvider.credential(verificationId, code));\n   * } catch (e) {\n   *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n   *     const cred = PhoneAuthProvider.credentialFromError(e);\n   *     await linkWithCredential(auth.currentUser, cred);\n   *   }\n   * }\n   *\n   * // At this point, auth.currentUser.phoneNumber === number.\n   * ```\n   *\n   * @param error - The error to generate a credential from.\n   */\n  static credentialFromError(error: FirebaseError): AuthCredential | null {\n    return PhoneAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): AuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { phoneNumber, temporaryProof } =\n      tokenResponse as SignInWithPhoneNumberResponse;\n    if (phoneNumber && temporaryProof) {\n      return PhoneAuthCredential._fromTokenResponse(\n        phoneNumber,\n        temporaryProof\n      );\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PopupRedirectResolver } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport { PopupRedirectResolverInternal } from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from './assert';\nimport { _getInstance } from './instantiator';\n\n/**\n * Chooses a popup/redirect resolver to use. This prefers the override (which\n * is directly passed in), and falls back to the property set on the auth\n * object. If neither are available, this function errors w/ an argument error.\n */\nexport function _withDefaultResolver(\n  auth: AuthInternal,\n  resolverOverride: PopupRedirectResolver | undefined\n): PopupRedirectResolverInternal {\n  if (resolverOverride) {\n    return _getInstance(resolverOverride);\n  }\n\n  _assert(auth._popupRedirectResolver, auth, AuthErrorCode.ARGUMENT_ERROR);\n\n  return auth._popupRedirectResolver;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { _link as _linkUser } from '../user/link_unlink';\nimport { _reauthenticate } from '../user/reauthenticate';\nimport { _assert } from '../util/assert';\nimport { _signInWithCredential } from './credential';\nimport { AuthErrorCode } from '../errors';\nimport { ProviderId } from '../../model/enums';\n\nexport interface IdpTaskParams {\n  auth: AuthInternal;\n  requestUri: string;\n  sessionId?: string;\n  tenantId?: string;\n  postBody?: string;\n  pendingToken?: string;\n  user?: UserInternal;\n  bypassAuthState?: boolean;\n}\n\nexport type IdpTask = (\n  params: IdpTaskParams\n) => Promise<UserCredentialInternal>;\n\nclass IdpCredential extends AuthCredential {\n  constructor(readonly params: IdpTaskParams) {\n    super(ProviderId.CUSTOM, ProviderId.CUSTOM);\n  }\n\n  _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest(idToken));\n  }\n\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n\n  private _buildIdpRequest(idToken?: string): SignInWithIdpRequest {\n    const request: SignInWithIdpRequest = {\n      requestUri: this.params.requestUri,\n      sessionId: this.params.sessionId,\n      postBody: this.params.postBody,\n      tenantId: this.params.tenantId,\n      pendingToken: this.params.pendingToken,\n      returnSecureToken: true,\n      returnIdpCredential: true\n    };\n\n    if (idToken) {\n      request.idToken = idToken;\n    }\n\n    return request;\n  }\n}\n\nexport function _signIn(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  return _signInWithCredential(\n    params.auth,\n    new IdpCredential(params),\n    params.bypassAuthState\n  ) as Promise<UserCredentialInternal>;\n}\n\nexport function _reauth(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  const { auth, user } = params;\n  _assert(user, auth, AuthErrorCode.INTERNAL_ERROR);\n  return _reauthenticate(\n    user,\n    new IdpCredential(params),\n    params.bypassAuthState\n  );\n}\n\nexport async function _link(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  const { auth, user } = params;\n  _assert(user, auth, AuthErrorCode.INTERNAL_ERROR);\n  return _linkUser(user, new IdpCredential(params), params.bypassAuthState);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport {\n  AuthEvent,\n  AuthEventConsumer,\n  AuthEventType,\n  EventManager,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { debugAssert, _fail } from '../util/assert';\nimport {\n  _link,\n  _reauth,\n  _signIn,\n  IdpTask,\n  IdpTaskParams\n} from '../strategies/idp';\nimport { AuthInternal } from '../../model/auth';\n\ninterface PendingPromise {\n  resolve: (cred: UserCredentialInternal | null) => void;\n  reject: (error: Error) => void;\n}\n\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n */\nexport abstract class AbstractPopupRedirectOperation\n  implements AuthEventConsumer\n{\n  private pendingPromise: PendingPromise | null = null;\n  private eventManager: EventManager | null = null;\n  readonly filter: AuthEventType[];\n\n  abstract eventId: string | null;\n\n  constructor(\n    protected readonly auth: AuthInternal,\n    filter: AuthEventType | AuthEventType[],\n    protected readonly resolver: PopupRedirectResolverInternal,\n    protected user?: UserInternal,\n    protected readonly bypassAuthState = false\n  ) {\n    this.filter = Array.isArray(filter) ? filter : [filter];\n  }\n\n  abstract onExecution(): Promise<void>;\n\n  execute(): Promise<UserCredentialInternal | null> {\n    return new Promise<UserCredentialInternal | null>(\n      async (resolve, reject) => {\n        this.pendingPromise = { resolve, reject };\n\n        try {\n          this.eventManager = await this.resolver._initialize(this.auth);\n          await this.onExecution();\n          this.eventManager.registerConsumer(this);\n        } catch (e) {\n          this.reject(e as Error);\n        }\n      }\n    );\n  }\n\n  async onAuthEvent(event: AuthEvent): Promise<void> {\n    const { urlResponse, sessionId, postBody, tenantId, error, type } = event;\n    if (error) {\n      this.reject(error);\n      return;\n    }\n\n    const params: IdpTaskParams = {\n      auth: this.auth,\n      requestUri: urlResponse!,\n      sessionId: sessionId!,\n      tenantId: tenantId || undefined,\n      postBody: postBody || undefined,\n      user: this.user,\n      bypassAuthState: this.bypassAuthState\n    };\n\n    try {\n      this.resolve(await this.getIdpTask(type)(params));\n    } catch (e) {\n      this.reject(e as Error);\n    }\n  }\n\n  onError(error: FirebaseError): void {\n    this.reject(error);\n  }\n\n  private getIdpTask(type: AuthEventType): IdpTask {\n    switch (type) {\n      case AuthEventType.SIGN_IN_VIA_POPUP:\n      case AuthEventType.SIGN_IN_VIA_REDIRECT:\n        return _signIn;\n      case AuthEventType.LINK_VIA_POPUP:\n      case AuthEventType.LINK_VIA_REDIRECT:\n        return _link;\n      case AuthEventType.REAUTH_VIA_POPUP:\n      case AuthEventType.REAUTH_VIA_REDIRECT:\n        return _reauth;\n      default:\n        _fail(this.auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  protected resolve(cred: UserCredentialInternal | null): void {\n    debugAssert(this.pendingPromise, 'Pending promise was never set');\n    this.pendingPromise.resolve(cred);\n    this.unregisterAndCleanUp();\n  }\n\n  protected reject(error: Error): void {\n    debugAssert(this.pendingPromise, 'Pending promise was never set');\n    this.pendingPromise.reject(error);\n    this.unregisterAndCleanUp();\n  }\n\n  private unregisterAndCleanUp(): void {\n    if (this.eventManager) {\n      this.eventManager.unregisterConsumer(this);\n    }\n\n    this.pendingPromise = null;\n    this.cleanUp();\n  }\n\n  abstract cleanUp(): void;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  AuthProvider,\n  PopupRedirectResolver,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  _assert,\n  debugAssert,\n  _createError,\n  _assertInstanceOf\n} from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { _generateEventId } from '../../core/util/event_id';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport { _withDefaultResolver } from '../../core/util/resolver';\nimport { AuthPopup } from '../util/popup';\nimport { AbstractPopupRedirectOperation } from '../../core/strategies/abstract_popup_redirect_operation';\nimport { FederatedAuthProvider } from '../../core/providers/federated';\nimport { getModularInstance } from '@firebase/util';\n\n/*\n * The event timeout is the same on mobile and desktop, no need for Delay. Set this to 8s since\n * blocking functions can take upto 7s to complete sign in, as documented in:\n * https://cloud.google.com/identity-platform/docs/blocking-functions#understanding_blocking_functions\n * https://firebase.google.com/docs/auth/extend-with-blocking-functions#understanding_blocking_functions\n */\nexport const enum _Timeout {\n  AUTH_EVENT = 8000\n}\nexport const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);\n\n/**\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n *\n * @remarks\n * If succeeds, returns the signed in user along with the provider's credential. If sign in was\n * unsuccessful, returns an error object containing additional information about the error.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function signInWithPopup(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential> {\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  const action = new PopupOperation(\n    authInternal,\n    AuthEventType.SIGN_IN_VIA_POPUP,\n    provider,\n    resolverInternal\n  );\n  return action.executeNotNull();\n}\n\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\n * OAuth flow.\n *\n * @remarks\n * If the reauthentication is successful, the returned result will contain the user and the\n * provider's credential.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n * // Reauthenticate using a popup.\n * await reauthenticateWithPopup(result.user, provider);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function reauthenticateWithPopup(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  const action = new PopupOperation(\n    userInternal.auth,\n    AuthEventType.REAUTH_VIA_POPUP,\n    provider,\n    resolverInternal,\n    userInternal\n  );\n  return action.executeNotNull();\n}\n\n/**\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\n *\n * @remarks\n * If the linking is successful, the returned result will contain the user and the provider's credential.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a popup.\n * const provider = new FacebookAuthProvider();\n * await linkWithPopup(result.user, provider);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function linkWithPopup(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n\n  const action = new PopupOperation(\n    userInternal.auth,\n    AuthEventType.LINK_VIA_POPUP,\n    provider,\n    resolverInternal,\n    userInternal\n  );\n  return action.executeNotNull();\n}\n\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n *\n */\nclass PopupOperation extends AbstractPopupRedirectOperation {\n  // Only one popup is ever shown at once. The lifecycle of the current popup\n  // can be managed / cancelled by the constructor.\n  private static currentPopupAction: PopupOperation | null = null;\n  private authWindow: AuthPopup | null = null;\n  private pollId: number | null = null;\n\n  constructor(\n    auth: AuthInternal,\n    filter: AuthEventType,\n    private readonly provider: AuthProvider,\n    resolver: PopupRedirectResolverInternal,\n    user?: UserInternal\n  ) {\n    super(auth, filter, resolver, user);\n    if (PopupOperation.currentPopupAction) {\n      PopupOperation.currentPopupAction.cancel();\n    }\n\n    PopupOperation.currentPopupAction = this;\n  }\n\n  async executeNotNull(): Promise<UserCredential> {\n    const result = await this.execute();\n    _assert(result, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return result;\n  }\n\n  async onExecution(): Promise<void> {\n    debugAssert(\n      this.filter.length === 1,\n      'Popup operations only handle one event'\n    );\n    const eventId = _generateEventId();\n    this.authWindow = await this.resolver._openPopup(\n      this.auth,\n      this.provider,\n      this.filter[0], // There's always one, see constructor\n      eventId\n    );\n    this.authWindow.associatedEvent = eventId;\n\n    // Check for web storage support and origin validation _after_ the popup is\n    // loaded. These operations are slow (~1 second or so) Rather than\n    // waiting on them before opening the window, optimistically open the popup\n    // and check for storage support at the same time. If storage support is\n    // not available, this will cause the whole thing to reject properly. It\n    // will also close the popup, but since the promise has already rejected,\n    // the popup closed by user poll will reject into the void.\n    this.resolver._originValidation(this.auth).catch(e => {\n      this.reject(e);\n    });\n\n    this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {\n      if (!isSupported) {\n        this.reject(\n          _createError(this.auth, AuthErrorCode.WEB_STORAGE_UNSUPPORTED)\n        );\n      }\n    });\n\n    // Handle user closure. Notice this does *not* use await\n    this.pollUserCancellation();\n  }\n\n  get eventId(): string | null {\n    return this.authWindow?.associatedEvent || null;\n  }\n\n  cancel(): void {\n    this.reject(_createError(this.auth, AuthErrorCode.EXPIRED_POPUP_REQUEST));\n  }\n\n  cleanUp(): void {\n    if (this.authWindow) {\n      this.authWindow.close();\n    }\n\n    if (this.pollId) {\n      window.clearTimeout(this.pollId);\n    }\n\n    this.authWindow = null;\n    this.pollId = null;\n    PopupOperation.currentPopupAction = null;\n  }\n\n  private pollUserCancellation(): void {\n    const poll = (): void => {\n      if (this.authWindow?.window?.closed) {\n        // Make sure that there is sufficient time for whatever action to\n        // complete. The window could have closed but the sign in network\n        // call could still be in flight. This is specifically true for\n        // Firefox or if the opener is in an iframe, in which case the oauth\n        // helper closes the popup.\n        this.pollId = window.setTimeout(() => {\n          this.pollId = null;\n          this.reject(\n            _createError(this.auth, AuthErrorCode.POPUP_CLOSED_BY_USER)\n          );\n        }, _Timeout.AUTH_EVENT);\n        return;\n      }\n\n      this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\n    };\n\n    poll();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEvent,\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserCredentialInternal } from '../../model/user';\nimport { PersistenceInternal } from '../persistence';\nimport { _persistenceKeyName } from '../persistence/persistence_user_manager';\nimport { _getInstance } from '../util/instantiator';\nimport { AbstractPopupRedirectOperation } from './abstract_popup_redirect_operation';\n\nconst PENDING_REDIRECT_KEY = 'pendingRedirect';\n\n// We only get one redirect outcome for any one auth, so just store it\n// in here.\nconst redirectOutcomeMap: Map<\n  string,\n  () => Promise<UserCredentialInternal | null>\n> = new Map();\n\nexport class RedirectAction extends AbstractPopupRedirectOperation {\n  eventId = null;\n\n  constructor(\n    auth: AuthInternal,\n    resolver: PopupRedirectResolverInternal,\n    bypassAuthState = false\n  ) {\n    super(\n      auth,\n      [\n        AuthEventType.SIGN_IN_VIA_REDIRECT,\n        AuthEventType.LINK_VIA_REDIRECT,\n        AuthEventType.REAUTH_VIA_REDIRECT,\n        AuthEventType.UNKNOWN\n      ],\n      resolver,\n      undefined,\n      bypassAuthState\n    );\n  }\n\n  /**\n   * Override the execute function; if we already have a redirect result, then\n   * just return it.\n   */\n  async execute(): Promise<UserCredentialInternal | null> {\n    let readyOutcome = redirectOutcomeMap.get(this.auth._key());\n    if (!readyOutcome) {\n      try {\n        const hasPendingRedirect = await _getAndClearPendingRedirectStatus(\n          this.resolver,\n          this.auth\n        );\n        const result = hasPendingRedirect ? await super.execute() : null;\n        readyOutcome = () => Promise.resolve(result);\n      } catch (e) {\n        readyOutcome = () => Promise.reject(e);\n      }\n\n      redirectOutcomeMap.set(this.auth._key(), readyOutcome);\n    }\n\n    // If we're not bypassing auth state, the ready outcome should be set to\n    // null.\n    if (!this.bypassAuthState) {\n      redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\n    }\n\n    return readyOutcome();\n  }\n\n  async onAuthEvent(event: AuthEvent): Promise<void> {\n    if (event.type === AuthEventType.SIGN_IN_VIA_REDIRECT) {\n      return super.onAuthEvent(event);\n    } else if (event.type === AuthEventType.UNKNOWN) {\n      // This is a sentinel value indicating there's no pending redirect\n      this.resolve(null);\n      return;\n    }\n\n    if (event.eventId) {\n      const user = await this.auth._redirectUserForId(event.eventId);\n      if (user) {\n        this.user = user;\n        return super.onAuthEvent(event);\n      } else {\n        this.resolve(null);\n      }\n    }\n  }\n\n  async onExecution(): Promise<void> {}\n\n  cleanUp(): void {}\n}\n\nexport async function _getAndClearPendingRedirectStatus(\n  resolver: PopupRedirectResolverInternal,\n  auth: AuthInternal\n): Promise<boolean> {\n  const key = pendingRedirectKey(auth);\n  const persistence = resolverPersistence(resolver);\n  if (!(await persistence._isAvailable())) {\n    return false;\n  }\n  const hasPendingRedirect = (await persistence._get(key)) === 'true';\n  await persistence._remove(key);\n  return hasPendingRedirect;\n}\n\nexport async function _setPendingRedirectStatus(\n  resolver: PopupRedirectResolverInternal,\n  auth: AuthInternal\n): Promise<void> {\n  return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\n}\n\nexport function _clearRedirectOutcomes(): void {\n  redirectOutcomeMap.clear();\n}\n\nexport function _overrideRedirectResult(\n  auth: AuthInternal,\n  result: () => Promise<UserCredentialInternal | null>\n): void {\n  redirectOutcomeMap.set(auth._key(), result);\n}\n\nfunction resolverPersistence(\n  resolver: PopupRedirectResolverInternal\n): PersistenceInternal {\n  return _getInstance(resolver._redirectPersistence);\n}\n\nfunction pendingRedirectKey(auth: AuthInternal): string {\n  return _persistenceKeyName(\n    PENDING_REDIRECT_KEY,\n    auth.config.apiKey,\n    auth.name\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  AuthProvider,\n  PopupRedirectResolver,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { _assertLinkedStatus } from '../../core/user/link_unlink';\nimport { _assertInstanceOf } from '../../core/util/assert';\nimport { _generateEventId } from '../../core/util/event_id';\nimport { AuthEventType } from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport { _withDefaultResolver } from '../../core/util/resolver';\nimport {\n  RedirectAction,\n  _setPendingRedirectStatus\n} from '../../core/strategies/redirect';\nimport { FederatedAuthProvider } from '../../core/providers/federated';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Authenticates a Firebase client using a full-page redirect flow.\n *\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link signInWithRedirect}.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function signInWithRedirect(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _signInWithRedirect(auth, provider, resolver) as Promise<never>;\n}\n\nexport async function _signInWithRedirect(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await authInternal._initializationPromise;\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  await _setPendingRedirectStatus(resolverInternal, authInternal);\n\n  return resolverInternal._openRedirect(\n    authInternal,\n    provider,\n    AuthEventType.SIGN_IN_VIA_REDIRECT\n  );\n}\n\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link reauthenticateWithRedirect}.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * // Reauthenticate using a redirect.\n * await reauthenticateWithRedirect(result.user, provider);\n * // This will again trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function reauthenticateWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _reauthenticateWithRedirect(\n    user,\n    provider,\n    resolver\n  ) as Promise<never>;\n}\nexport async function _reauthenticateWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await userInternal.auth._initializationPromise;\n  // Allow the resolver to error before persisting the redirect user\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(\n    userInternal.auth,\n    provider,\n    AuthEventType.REAUTH_VIA_REDIRECT,\n    eventId\n  );\n}\n\n/**\n * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link linkWithRedirect}.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a redirect.\n * const provider = new FacebookAuthProvider();\n * await linkWithRedirect(result.user, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function linkWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _linkWithRedirect(user, provider, resolver) as Promise<never>;\n}\nexport async function _linkWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await userInternal.auth._initializationPromise;\n  // Allow the resolver to error before persisting the redirect user\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _assertLinkedStatus(false, userInternal, provider.providerId);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(\n    userInternal.auth,\n    provider,\n    AuthEventType.LINK_VIA_REDIRECT,\n    eventId\n  );\n}\n\n/**\n * Returns a {@link UserCredential} from the redirect-based sign-in flow.\n *\n * @remarks\n * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\n * error. If no redirect operation was called, returns `null`.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function getRedirectResult(\n  auth: Auth,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential | null> {\n  await _castAuth(auth)._initializationPromise;\n  return _getRedirectResult(auth, resolver, false);\n}\n\nexport async function _getRedirectResult(\n  auth: Auth,\n  resolverExtern?: PopupRedirectResolver,\n  bypassAuthState = false\n): Promise<UserCredential | null> {\n  const authInternal = _castAuth(auth);\n  const resolver = _withDefaultResolver(authInternal, resolverExtern);\n  const action = new RedirectAction(authInternal, resolver, bypassAuthState);\n  const result = await action.execute();\n\n  if (result && !bypassAuthState) {\n    delete result.user._redirectEventId;\n    await authInternal._persistUserIfCurrent(result.user as UserInternal);\n    await authInternal._setRedirectUser(null, resolverExtern);\n  }\n\n  return result;\n}\n\nasync function prepareUserForRedirect(user: UserInternal): Promise<string> {\n  const eventId = _generateEventId(`${user.uid}:::`);\n  user._redirectEventId = eventId;\n  await user.auth._setRedirectUser(user);\n  await user.auth._persistUserIfCurrent(user);\n  return eventId;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthEvent,\n  AuthEventConsumer,\n  AuthEventType,\n  EventManager\n} from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { AuthInternal } from '../../model/auth';\nimport { _createError } from '../util/assert';\n\n// The amount of time to store the UIDs of seen events; this is\n// set to 10 min by default\nconst EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\n\nexport class AuthEventManager implements EventManager {\n  private readonly cachedEventUids: Set<string> = new Set();\n  private readonly consumers: Set<AuthEventConsumer> = new Set();\n  protected queuedRedirectEvent: AuthEvent | null = null;\n  protected hasHandledPotentialRedirect = false;\n  private lastProcessedEventTime = Date.now();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  registerConsumer(authEventConsumer: AuthEventConsumer): void {\n    this.consumers.add(authEventConsumer);\n\n    if (\n      this.queuedRedirectEvent &&\n      this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)\n    ) {\n      this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n      this.saveEventToCache(this.queuedRedirectEvent);\n      this.queuedRedirectEvent = null;\n    }\n  }\n\n  unregisterConsumer(authEventConsumer: AuthEventConsumer): void {\n    this.consumers.delete(authEventConsumer);\n  }\n\n  onEvent(event: AuthEvent): boolean {\n    // Check if the event has already been handled\n    if (this.hasEventBeenHandled(event)) {\n      return false;\n    }\n\n    let handled = false;\n    this.consumers.forEach(consumer => {\n      if (this.isEventForConsumer(event, consumer)) {\n        handled = true;\n        this.sendToConsumer(event, consumer);\n        this.saveEventToCache(event);\n      }\n    });\n\n    if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\n      // If we've already seen a redirect before, or this is a popup event,\n      // bail now\n      return handled;\n    }\n\n    this.hasHandledPotentialRedirect = true;\n\n    // If the redirect wasn't handled, hang on to it\n    if (!handled) {\n      this.queuedRedirectEvent = event;\n      handled = true;\n    }\n\n    return handled;\n  }\n\n  private sendToConsumer(event: AuthEvent, consumer: AuthEventConsumer): void {\n    if (event.error && !isNullRedirectEvent(event)) {\n      const code =\n        (event.error.code?.split('auth/')[1] as AuthErrorCode) ||\n        AuthErrorCode.INTERNAL_ERROR;\n      consumer.onError(_createError(this.auth, code));\n    } else {\n      consumer.onAuthEvent(event);\n    }\n  }\n\n  private isEventForConsumer(\n    event: AuthEvent,\n    consumer: AuthEventConsumer\n  ): boolean {\n    const eventIdMatches =\n      consumer.eventId === null ||\n      (!!event.eventId && event.eventId === consumer.eventId);\n    return consumer.filter.includes(event.type) && eventIdMatches;\n  }\n\n  private hasEventBeenHandled(event: AuthEvent): boolean {\n    if (\n      Date.now() - this.lastProcessedEventTime >=\n      EVENT_DUPLICATION_CACHE_DURATION_MS\n    ) {\n      this.cachedEventUids.clear();\n    }\n\n    return this.cachedEventUids.has(eventUid(event));\n  }\n\n  private saveEventToCache(event: AuthEvent): void {\n    this.cachedEventUids.add(eventUid(event));\n    this.lastProcessedEventTime = Date.now();\n  }\n}\n\nfunction eventUid(e: AuthEvent): string {\n  return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\n}\n\nfunction isNullRedirectEvent({ type, error }: AuthEvent): boolean {\n  return (\n    type === AuthEventType.UNKNOWN &&\n    error?.code === `auth/${AuthErrorCode.NO_AUTH_EVENT}`\n  );\n}\n\nfunction isRedirectEvent(event: AuthEvent): boolean {\n  switch (event.type) {\n    case AuthEventType.SIGN_IN_VIA_REDIRECT:\n    case AuthEventType.LINK_VIA_REDIRECT:\n    case AuthEventType.REAUTH_VIA_REDIRECT:\n      return true;\n    case AuthEventType.UNKNOWN:\n      return isNullRedirectEvent(event);\n    default:\n      return false;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _performApiRequest, Endpoint, HttpMethod } from '../index';\nimport { Auth } from '../../model/public_types';\n\nexport interface GetProjectConfigRequest {\n  androidPackageName?: string;\n  iosBundleId?: string;\n}\n\nexport interface GetProjectConfigResponse {\n  authorizedDomains: string[];\n}\n\nexport async function _getProjectConfig(\n  auth: Auth,\n  request: GetProjectConfigRequest = {}\n): Promise<GetProjectConfigResponse> {\n  return _performApiRequest<GetProjectConfigRequest, GetProjectConfigResponse>(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_PROJECT_CONFIG,\n    request\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProjectConfig } from '../../api/project_config/get_project_config';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from './assert';\nimport { _getCurrentUrl } from './location';\n\nconst IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\nconst HTTP_REGEX = /^https?/;\n\nexport async function _validateOrigin(auth: AuthInternal): Promise<void> {\n  // Skip origin validation if we are in an emulated environment\n  if (auth.config.emulator) {\n    return;\n  }\n\n  const { authorizedDomains } = await _getProjectConfig(auth);\n\n  for (const domain of authorizedDomains) {\n    try {\n      if (matchDomain(domain)) {\n        return;\n      }\n    } catch {\n      // Do nothing if there's a URL error; just continue searching\n    }\n  }\n\n  // In the old SDK, this error also provides helpful messages.\n  _fail(auth, AuthErrorCode.INVALID_ORIGIN);\n}\n\nfunction matchDomain(expected: string): boolean {\n  const currentUrl = _getCurrentUrl();\n  const { protocol, hostname } = new URL(currentUrl);\n  if (expected.startsWith('chrome-extension://')) {\n    const ceUrl = new URL(expected);\n\n    if (ceUrl.hostname === '' && hostname === '') {\n      // For some reason we're not parsing chrome URLs properly\n      return (\n        protocol === 'chrome-extension:' &&\n        expected.replace('chrome-extension://', '') ===\n          currentUrl.replace('chrome-extension://', '')\n      );\n    }\n\n    return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;\n  }\n\n  if (!HTTP_REGEX.test(protocol)) {\n    return false;\n  }\n\n  if (IP_ADDRESS_REGEX.test(expected)) {\n    // The domain has to be exactly equal to the pattern, as an IP domain will\n    // only contain the IP, no extra character.\n    return hostname === expected;\n  }\n\n  // Dots in pattern should be escaped.\n  const escapedDomainPattern = expected.replace(/\\./g, '\\\\.');\n  // Non ip address domains.\n  // domain.com = *.domain.com OR domain.com\n  const re = new RegExp(\n    '^(.+\\\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$',\n    'i'\n  );\n  return re.test(hostname);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as js from '../load_js';\n\nconst NETWORK_TIMEOUT = new Delay(30000, 60000);\n\n/**\n * Reset unlaoded GApi modules. If gapi.load fails due to a network error,\n * it will stop working after a retrial. This is a hack to fix this issue.\n */\nfunction resetUnloadedGapiModules(): void {\n  // Clear last failed gapi.load state to force next gapi.load to first\n  // load the failed gapi.iframes module.\n  // Get gapix.beacon context.\n  const beacon = _window().___jsl;\n  // Get current hint.\n  if (beacon?.H) {\n    // Get gapi hint.\n    for (const hint of Object.keys(beacon.H)) {\n      // Requested modules.\n      beacon.H[hint].r = beacon.H[hint].r || [];\n      // Loaded modules.\n      beacon.H[hint].L = beacon.H[hint].L || [];\n      // Set requested modules to a copy of the loaded modules.\n      beacon.H[hint].r = [...beacon.H[hint].L];\n      // Clear pending callbacks.\n      if (beacon.CP) {\n        for (let i = 0; i < beacon.CP.length; i++) {\n          // Remove all failed pending callbacks.\n          beacon.CP[i] = null;\n        }\n      }\n    }\n  }\n}\n\nfunction loadGapi(auth: AuthInternal): Promise<gapi.iframes.Context> {\n  return new Promise<gapi.iframes.Context>((resolve, reject) => {\n    // Function to run when gapi.load is ready.\n    function loadGapiIframe(): void {\n      // The developer may have tried to previously run gapi.load and failed.\n      // Run this to fix that.\n      resetUnloadedGapiModules();\n      gapi.load('gapi.iframes', {\n        callback: () => {\n          resolve(gapi.iframes.getContext());\n        },\n        ontimeout: () => {\n          // The above reset may be sufficient, but having this reset after\n          // failure ensures that if the developer calls gapi.load after the\n          // connection is re-established and before another attempt to embed\n          // the iframe, it would work and would not be broken because of our\n          // failed attempt.\n          // Timeout when gapi.iframes.Iframe not loaded.\n          resetUnloadedGapiModules();\n          reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n        },\n        timeout: NETWORK_TIMEOUT.get()\n      });\n    }\n\n    if (_window().gapi?.iframes?.Iframe) {\n      // If gapi.iframes.Iframe available, resolve.\n      resolve(gapi.iframes.getContext());\n    } else if (!!_window().gapi?.load) {\n      // Gapi loader ready, load gapi.iframes.\n      loadGapiIframe();\n    } else {\n      // Create a new iframe callback when this is called so as not to overwrite\n      // any previous defined callback. This happens if this method is called\n      // multiple times in parallel and could result in the later callback\n      // overwriting the previous one. This would end up with a iframe\n      // timeout.\n      const cbName = js._generateCallbackName('iframefcb');\n      // GApi loader not available, dynamically load platform.js.\n      _window()[cbName] = () => {\n        // GApi loader should be ready.\n        if (!!gapi.load) {\n          loadGapiIframe();\n        } else {\n          // Gapi loader failed, throw error.\n          reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n        }\n      };\n      // Load GApi loader.\n      return js\n        ._loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`)\n        .catch(e => reject(e));\n    }\n  }).catch(error => {\n    // Reset cached promise to allow for retrial.\n    cachedGApiLoader = null;\n    throw error;\n  });\n}\n\nlet cachedGApiLoader: Promise<gapi.iframes.Context> | null = null;\nexport function _loadGapi(auth: AuthInternal): Promise<gapi.iframes.Context> {\n  cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\n  return cachedGApiLoader;\n}\n\nexport function _resetLoader(): void {\n  cachedGApiLoader = null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { querystring } from '@firebase/util';\nimport { DefaultConfig } from '../../../internal';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert, _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { _emulatorUrl } from '../../core/util/emulator';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as gapiLoader from './gapi';\n\nconst PING_TIMEOUT = new Delay(5000, 15000);\nconst IFRAME_PATH = '__/auth/iframe';\nconst EMULATED_IFRAME_PATH = 'emulator/auth/iframe';\n\nconst IFRAME_ATTRIBUTES = {\n  style: {\n    position: 'absolute',\n    top: '-100px',\n    width: '1px',\n    height: '1px'\n  },\n  'aria-hidden': 'true',\n  tabindex: '-1'\n};\n\n// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\n// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\nconst EID_FROM_APIHOST = new Map([\n  [DefaultConfig.API_HOST, 'p'], // production\n  ['staging-identitytoolkit.sandbox.googleapis.com', 's'], // staging\n  ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test\n]);\n\nfunction getIframeUrl(auth: AuthInternal): string {\n  const config = auth.config;\n  _assert(config.authDomain, auth, AuthErrorCode.MISSING_AUTH_DOMAIN);\n  const url = config.emulator\n    ? _emulatorUrl(config, EMULATED_IFRAME_PATH)\n    : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\n\n  const params: Record<string, string> = {\n    apiKey: config.apiKey,\n    appName: auth.name,\n    v: SDK_VERSION\n  };\n  const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\n  if (eid) {\n    params.eid = eid;\n  }\n  const frameworks = auth._getFrameworks();\n  if (frameworks.length) {\n    params.fw = frameworks.join(',');\n  }\n  return `${url}?${querystring(params).slice(1)}`;\n}\n\nexport async function _openIframe(\n  auth: AuthInternal\n): Promise<gapi.iframes.Iframe> {\n  const context = await gapiLoader._loadGapi(auth);\n  const gapi = _window().gapi;\n  _assert(gapi, auth, AuthErrorCode.INTERNAL_ERROR);\n  return context.open(\n    {\n      where: document.body,\n      url: getIframeUrl(auth),\n      messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\n      attributes: IFRAME_ATTRIBUTES,\n      dontclear: true\n    },\n    (iframe: gapi.iframes.Iframe) =>\n      new Promise(async (resolve, reject) => {\n        await iframe.restyle({\n          // Prevent iframe from closing on mouse out.\n          setHideOnLeave: false\n        });\n\n        const networkError = _createError(\n          auth,\n          AuthErrorCode.NETWORK_REQUEST_FAILED\n        );\n        // Confirm iframe is correctly loaded.\n        // To fallback on failure, set a timeout.\n        const networkErrorTimer = _window().setTimeout(() => {\n          reject(networkError);\n        }, PING_TIMEOUT.get());\n        // Clear timer and resolve pending iframe ready promise.\n        function clearTimerAndResolve(): void {\n          _window().clearTimeout(networkErrorTimer);\n          resolve(iframe);\n        }\n        // This returns an IThenable. However the reject part does not call\n        // when the iframe is not loaded.\n        iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\n          reject(networkError);\n        });\n      })\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getUA } from '@firebase/util';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\nimport {\n  _isChromeIOS,\n  _isFirefox,\n  _isIOSStandalone\n} from '../../core/util/browser';\nimport { AuthInternal } from '../../model/auth';\n\nconst BASE_POPUP_OPTIONS = {\n  location: 'yes',\n  resizable: 'yes',\n  statusbar: 'yes',\n  toolbar: 'no'\n};\n\nconst DEFAULT_WIDTH = 500;\nconst DEFAULT_HEIGHT = 600;\nconst TARGET_BLANK = '_blank';\n\nconst FIREFOX_EMPTY_URL = 'http://localhost';\n\nexport class AuthPopup {\n  associatedEvent: string | null = null;\n\n  constructor(readonly window: Window | null) {}\n\n  close(): void {\n    if (this.window) {\n      try {\n        this.window.close();\n      } catch (e) {}\n    }\n  }\n}\n\nexport function _open(\n  auth: AuthInternal,\n  url?: string,\n  name?: string,\n  width = DEFAULT_WIDTH,\n  height = DEFAULT_HEIGHT\n): AuthPopup {\n  const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\n  const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\n  let target = '';\n\n  const options: { [key: string]: string } = {\n    ...BASE_POPUP_OPTIONS,\n    width: width.toString(),\n    height: height.toString(),\n    top,\n    left\n  };\n\n  // Chrome iOS 7 and 8 is returning an undefined popup win when target is\n  // specified, even though the popup is not necessarily blocked.\n  const ua = getUA().toLowerCase();\n\n  if (name) {\n    target = _isChromeIOS(ua) ? TARGET_BLANK : name;\n  }\n\n  if (_isFirefox(ua)) {\n    // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\n    url = url || FIREFOX_EMPTY_URL;\n    // Firefox disables by default scrolling on popup windows, which can create\n    // issues when the user has many Google accounts, for instance.\n    options.scrollbars = 'yes';\n  }\n\n  const optionsString = Object.entries(options).reduce(\n    (accum, [key, value]) => `${accum}${key}=${value},`,\n    ''\n  );\n\n  if (_isIOSStandalone(ua) && target !== '_self') {\n    openAsNewWindowIOS(url || '', target);\n    return new AuthPopup(null);\n  }\n\n  // about:blank getting sanitized causing browsers like IE/Edge to display\n  // brief error message before redirecting to handler.\n  const newWin = window.open(url || '', target, optionsString);\n  _assert(newWin, auth, AuthErrorCode.POPUP_BLOCKED);\n\n  // Flaky on IE edge, encapsulate with a try and catch.\n  try {\n    newWin.focus();\n  } catch (e) {}\n\n  return new AuthPopup(newWin);\n}\n\nfunction openAsNewWindowIOS(url: string, target: string): void {\n  const el = document.createElement('a');\n  el.href = url;\n  el.target = target;\n  const click = document.createEvent('MouseEvent');\n  click.initMouseEvent(\n    'click',\n    true,\n    true,\n    window,\n    1,\n    0,\n    0,\n    0,\n    0,\n    false,\n    false,\n    false,\n    false,\n    1,\n    null\n  );\n  el.dispatchEvent(click);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { AuthProvider } from '../../model/public_types';\nimport { ApiKey, AppName, AuthInternal } from '../../model/auth';\nimport { AuthEventType } from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from './assert';\nimport { isEmpty, querystring } from '@firebase/util';\nimport { _emulatorUrl } from './emulator';\nimport { FederatedAuthProvider } from '../providers/federated';\nimport { BaseOAuthProvider } from '../providers/oauth';\n\n/**\n * URL for Authentication widget which will initiate the OAuth handshake\n *\n * @internal\n */\nconst WIDGET_PATH = '__/auth/handler';\n\n/**\n * URL for emulated environment\n *\n * @internal\n */\nconst EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\n\n/**\n * Fragment name for the App Check token that gets passed to the widget\n *\n * @internal\n */\nconst FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ntype WidgetParams = {\n  apiKey: ApiKey;\n  appName: AppName;\n  authType: AuthEventType;\n  redirectUrl?: string;\n  v: string;\n  providerId?: string;\n  scopes?: string;\n  customParameters?: string;\n  eventId?: string;\n  tid?: string;\n} & { [key: string]: string | undefined };\n\nexport async function _getRedirectUrl(\n  auth: AuthInternal,\n  provider: AuthProvider,\n  authType: AuthEventType,\n  redirectUrl?: string,\n  eventId?: string,\n  additionalParams?: Record<string, string>\n): Promise<string> {\n  _assert(auth.config.authDomain, auth, AuthErrorCode.MISSING_AUTH_DOMAIN);\n  _assert(auth.config.apiKey, auth, AuthErrorCode.INVALID_API_KEY);\n\n  const params: WidgetParams = {\n    apiKey: auth.config.apiKey,\n    appName: auth.name,\n    authType,\n    redirectUrl,\n    v: SDK_VERSION,\n    eventId\n  };\n\n  if (provider instanceof FederatedAuthProvider) {\n    provider.setDefaultLanguage(auth.languageCode);\n    params.providerId = provider.providerId || '';\n    if (!isEmpty(provider.getCustomParameters())) {\n      params.customParameters = JSON.stringify(provider.getCustomParameters());\n    }\n\n    // TODO set additionalParams from the provider as well?\n    for (const [key, value] of Object.entries(additionalParams || {})) {\n      params[key] = value;\n    }\n  }\n\n  if (provider instanceof BaseOAuthProvider) {\n    const scopes = provider.getScopes().filter(scope => scope !== '');\n    if (scopes.length > 0) {\n      params.scopes = scopes.join(',');\n    }\n  }\n\n  if (auth.tenantId) {\n    params.tid = auth.tenantId;\n  }\n\n  // TODO: maybe set eid as endipointId\n  // TODO: maybe set fw as Frameworks.join(\",\")\n\n  const paramsDict = params as Record<string, string | number>;\n  for (const key of Object.keys(paramsDict)) {\n    if (paramsDict[key] === undefined) {\n      delete paramsDict[key];\n    }\n  }\n\n  // Sets the App Check token to pass to the widget\n  const appCheckToken = await auth._getAppCheckToken();\n  const appCheckTokenFragment = appCheckToken\n    ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}`\n    : '';\n\n  // Start at index 1 to skip the leading '&' in the query string\n  return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(\n    1\n  )}${appCheckTokenFragment}`;\n}\n\nfunction getHandlerBase({ config }: AuthInternal): string {\n  if (!config.emulator) {\n    return `https://${config.authDomain}/${WIDGET_PATH}`;\n  }\n\n  return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, PopupRedirectResolver } from '../model/public_types';\n\nimport { AuthEventManager } from '../core/auth/auth_event_manager';\nimport { AuthErrorCode } from '../core/errors';\nimport { _assert, debugAssert, _fail } from '../core/util/assert';\nimport { _generateEventId } from '../core/util/event_id';\nimport { _getCurrentUrl } from '../core/util/location';\nimport { _validateOrigin } from '../core/util/validate_origin';\nimport { AuthInternal } from '../model/auth';\nimport {\n  AuthEventType,\n  EventManager,\n  GapiAuthEvent,\n  GapiOutcome,\n  PopupRedirectResolverInternal\n} from '../model/popup_redirect';\nimport { _setWindowLocation } from './auth_window';\nimport { _openIframe } from './iframe/iframe';\nimport { browserSessionPersistence } from './persistence/session_storage';\nimport { _open, AuthPopup } from './util/popup';\nimport { _getRedirectResult } from './strategies/redirect';\nimport { _getRedirectUrl } from '../core/util/handler';\nimport { _isIOS, _isMobileBrowser, _isSafari } from '../core/util/browser';\nimport { _overrideRedirectResult } from '../core/strategies/redirect';\n\n/**\n * The special web storage event\n *\n */\nconst WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';\n\ninterface WebStorageSupportMessage extends gapi.iframes.Message {\n  [index: number]: Record<string, boolean>;\n}\n\ninterface ManagerOrPromise {\n  manager?: EventManager;\n  promise?: Promise<EventManager>;\n}\n\nclass BrowserPopupRedirectResolver implements PopupRedirectResolverInternal {\n  private readonly eventManagers: Record<string, ManagerOrPromise> = {};\n  private readonly iframes: Record<string, gapi.iframes.Iframe> = {};\n  private readonly originValidationPromises: Record<string, Promise<void>> = {};\n\n  readonly _redirectPersistence = browserSessionPersistence;\n\n  // Wrapping in async even though we don't await anywhere in order\n  // to make sure errors are raised as promise rejections\n  async _openPopup(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<AuthPopup> {\n    debugAssert(\n      this.eventManagers[auth._key()]?.manager,\n      '_initialize() not called before _openPopup()'\n    );\n\n    const url = await _getRedirectUrl(\n      auth,\n      provider,\n      authType,\n      _getCurrentUrl(),\n      eventId\n    );\n    return _open(auth, url, _generateEventId());\n  }\n\n  async _openRedirect(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<never> {\n    await this._originValidation(auth);\n    const url = await _getRedirectUrl(\n      auth,\n      provider,\n      authType,\n      _getCurrentUrl(),\n      eventId\n    );\n    _setWindowLocation(url);\n    return new Promise(() => {});\n  }\n\n  _initialize(auth: AuthInternal): Promise<EventManager> {\n    const key = auth._key();\n    if (this.eventManagers[key]) {\n      const { manager, promise } = this.eventManagers[key];\n      if (manager) {\n        return Promise.resolve(manager);\n      } else {\n        debugAssert(promise, 'If manager is not set, promise should be');\n        return promise;\n      }\n    }\n\n    const promise = this.initAndGetManager(auth);\n    this.eventManagers[key] = { promise };\n\n    // If the promise is rejected, the key should be removed so that the\n    // operation can be retried later.\n    promise.catch(() => {\n      delete this.eventManagers[key];\n    });\n\n    return promise;\n  }\n\n  private async initAndGetManager(auth: AuthInternal): Promise<EventManager> {\n    const iframe = await _openIframe(auth);\n    const manager = new AuthEventManager(auth);\n    iframe.register<GapiAuthEvent>(\n      'authEvent',\n      (iframeEvent: GapiAuthEvent | null) => {\n        _assert(iframeEvent?.authEvent, auth, AuthErrorCode.INVALID_AUTH_EVENT);\n        // TODO: Consider splitting redirect and popup events earlier on\n\n        const handled = manager.onEvent(iframeEvent.authEvent);\n        return { status: handled ? GapiOutcome.ACK : GapiOutcome.ERROR };\n      },\n      gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER\n    );\n\n    this.eventManagers[auth._key()] = { manager };\n    this.iframes[auth._key()] = iframe;\n    return manager;\n  }\n\n  _isIframeWebStorageSupported(\n    auth: AuthInternal,\n    cb: (supported: boolean) => unknown\n  ): void {\n    const iframe = this.iframes[auth._key()];\n    iframe.send<gapi.iframes.Message, WebStorageSupportMessage>(\n      WEB_STORAGE_SUPPORT_KEY,\n      { type: WEB_STORAGE_SUPPORT_KEY },\n      result => {\n        const isSupported = result?.[0]?.[WEB_STORAGE_SUPPORT_KEY];\n        if (isSupported !== undefined) {\n          cb(!!isSupported);\n        }\n\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n      },\n      gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER\n    );\n  }\n\n  _originValidation(auth: AuthInternal): Promise<void> {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n\n    return this.originValidationPromises[key];\n  }\n\n  get _shouldInitProactively(): boolean {\n    // Mobile browsers and Safari need to optimistically initialize\n    return _isMobileBrowser() || _isSafari() || _isIOS();\n  }\n\n  _completeRedirectFn = _getRedirectResult;\n\n  _overrideRedirectResult = _overrideRedirectResult;\n}\n\n/**\n * An implementation of {@link PopupRedirectResolver} suitable for browser\n * based applications.\n *\n * @remarks\n * This method does not work in a Node.js environment.\n *\n * @public\n */\nexport const browserPopupRedirectResolver: PopupRedirectResolver =\n  BrowserPopupRedirectResolver;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FactorId, MultiFactorAssertion } from '../model/public_types';\nimport { debugFail } from '../core/util/assert';\nimport { MultiFactorSessionImpl, MultiFactorSessionType } from './mfa_session';\nimport { FinalizeMfaResponse } from '../api/authentication/mfa';\nimport { AuthInternal } from '../model/auth';\n\nexport abstract class MultiFactorAssertionImpl implements MultiFactorAssertion {\n  protected constructor(readonly factorId: FactorId) {}\n\n  _process(\n    auth: AuthInternal,\n    session: MultiFactorSessionImpl,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    switch (session.type) {\n      case MultiFactorSessionType.ENROLL:\n        return this._finalizeEnroll(auth, session.credential, displayName);\n      case MultiFactorSessionType.SIGN_IN:\n        return this._finalizeSignIn(auth, session.credential);\n      default:\n        return debugFail('unexpected MultiFactorSessionType');\n    }\n  }\n\n  abstract _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse>;\n  abstract _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  FactorId,\n  PhoneMultiFactorAssertion\n} from '../../../model/public_types';\n\nimport { MultiFactorAssertionImpl } from '../../../mfa/mfa_assertion';\nimport { AuthInternal } from '../../../model/auth';\nimport { finalizeEnrollPhoneMfa } from '../../../api/account_management/mfa';\nimport { PhoneAuthCredential } from '../../../core/credentials/phone';\nimport {\n  finalizeSignInPhoneMfa,\n  FinalizeMfaResponse\n} from '../../../api/authentication/mfa';\n\n/**\n * {@inheritdoc PhoneMultiFactorAssertion}\n *\n * @public\n */\nexport class PhoneMultiFactorAssertionImpl\n  extends MultiFactorAssertionImpl\n  implements PhoneMultiFactorAssertion\n{\n  private constructor(private readonly credential: PhoneAuthCredential) {\n    super(FactorId.PHONE);\n  }\n\n  /** @internal */\n  static _fromCredential(\n    credential: PhoneAuthCredential\n  ): PhoneMultiFactorAssertionImpl {\n    return new PhoneMultiFactorAssertionImpl(credential);\n  }\n\n  /** @internal */\n  _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    return finalizeEnrollPhoneMfa(auth, {\n      idToken,\n      displayName,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n\n  /** @internal */\n  _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse> {\n    return finalizeSignInPhoneMfa(auth, {\n      mfaPendingCredential,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n}\n\n/**\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\n *\n * @public\n */\nexport class PhoneMultiFactorGenerator {\n  private constructor() {}\n\n  /**\n   * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n   * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}\n   */\n  static assertion(credential: PhoneAuthCredential): PhoneMultiFactorAssertion {\n    return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n  }\n\n  /**\n   * The identifier of the phone second factor: `phone`.\n   */\n  static FACTOR_ID = 'phone';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  TotpMultiFactorAssertion,\n  MultiFactorSession,\n  FactorId\n} from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  finalizeEnrollTotpMfa,\n  startEnrollTotpMfa,\n  StartTotpMfaEnrollmentResponse,\n  TotpVerificationInfo\n} from '../../api/account_management/mfa';\nimport {\n  FinalizeMfaResponse,\n  finalizeSignInTotpMfa\n} from '../../api/authentication/mfa';\nimport { MultiFactorAssertionImpl } from '../../mfa/mfa_assertion';\nimport { MultiFactorSessionImpl } from '../mfa_session';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\n\n/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * @public\n */\nexport class TotpMultiFactorGenerator {\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n   * the TOTP (time-based one-time password) second factor.\n   * This assertion is used to complete enrollment in TOTP second factor.\n   *\n   * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorUser.enroll}.\n   */\n  static assertionForEnrollment(\n    secret: TotpSecret,\n    oneTimePassword: string\n  ): TotpMultiFactorAssertion {\n    return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n  }\n\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n   * This assertion is used to complete signIn with TOTP as the second factor.\n   *\n   * @param enrollmentId identifies the enrolled TOTP second factor.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}.\n   */\n  static assertionForSignIn(\n    enrollmentId: string,\n    oneTimePassword: string\n  ): TotpMultiFactorAssertion {\n    return TotpMultiFactorAssertionImpl._fromEnrollmentId(\n      enrollmentId,\n      oneTimePassword\n    );\n  }\n\n  /**\n   * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n   * Creates a TOTP secret as part of enrolling a TOTP second factor.\n   * Used for generating a QR code URL or inputting into a TOTP app.\n   * This method uses the auth instance corresponding to the user in the multiFactorSession.\n   *\n   * @param session The {@link MultiFactorSession} that the user is part of.\n   * @returns A promise to {@link TotpSecret}.\n   */\n  static async generateSecret(\n    session: MultiFactorSession\n  ): Promise<TotpSecret> {\n    const mfaSession = session as MultiFactorSessionImpl;\n    _assert(\n      typeof mfaSession.user?.auth !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const response = await startEnrollTotpMfa(mfaSession.user.auth, {\n      idToken: mfaSession.credential,\n      totpEnrollmentInfo: {}\n    });\n    return TotpSecret._fromStartTotpMfaEnrollmentResponse(\n      response,\n      mfaSession.user.auth\n    );\n  }\n\n  /**\n   * The identifier of the TOTP second factor: `totp`.\n   */\n  static FACTOR_ID: 'totp' = FactorId.TOTP;\n}\n\nexport class TotpMultiFactorAssertionImpl\n  extends MultiFactorAssertionImpl\n  implements TotpMultiFactorAssertion\n{\n  constructor(\n    readonly otp: string,\n    readonly enrollmentId?: string,\n    readonly secret?: TotpSecret\n  ) {\n    super(FactorId.TOTP);\n  }\n\n  /** @internal */\n  static _fromSecret(\n    secret: TotpSecret,\n    otp: string\n  ): TotpMultiFactorAssertionImpl {\n    return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n  }\n\n  /** @internal */\n  static _fromEnrollmentId(\n    enrollmentId: string,\n    otp: string\n  ): TotpMultiFactorAssertionImpl {\n    return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n  }\n\n  /** @internal */\n  async _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    _assert(\n      typeof this.secret !== 'undefined',\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    return finalizeEnrollTotpMfa(auth, {\n      idToken,\n      displayName,\n      totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n    });\n  }\n\n  /** @internal */\n  async _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse> {\n    _assert(\n      this.enrollmentId !== undefined && this.otp !== undefined,\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    const totpVerificationInfo = { verificationCode: this.otp };\n    return finalizeSignInTotpMfa(auth, {\n      mfaPendingCredential,\n      mfaEnrollmentId: this.enrollmentId,\n      totpVerificationInfo\n    });\n  }\n}\n\n/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * Stores the shared secret key and other parameters to generate time-based OTPs.\n * Implements methods to retrieve the shared secret key and generate a QR code URL.\n * @public\n */\nexport class TotpSecret {\n  /**\n   * Shared secret key/seed used for enrolling in TOTP MFA and generating OTPs.\n   */\n  readonly secretKey: string;\n  /**\n   * Hashing algorithm used.\n   */\n  readonly hashingAlgorithm: string;\n  /**\n   * Length of the one-time passwords to be generated.\n   */\n  readonly codeLength: number;\n  /**\n   * The interval (in seconds) when the OTP codes should change.\n   */\n  readonly codeIntervalSeconds: number;\n  /**\n   * The timestamp (UTC string) by which TOTP enrollment should be completed.\n   */\n  // This can be used by callers to show a countdown of when to enter OTP code by.\n  readonly enrollmentCompletionDeadline: string;\n\n  // The public members are declared outside the constructor so the docs can be generated.\n  private constructor(\n    secretKey: string,\n    hashingAlgorithm: string,\n    codeLength: number,\n    codeIntervalSeconds: number,\n    enrollmentCompletionDeadline: string,\n    private readonly sessionInfo: string,\n    private readonly auth: AuthInternal\n  ) {\n    this.secretKey = secretKey;\n    this.hashingAlgorithm = hashingAlgorithm;\n    this.codeLength = codeLength;\n    this.codeIntervalSeconds = codeIntervalSeconds;\n    this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n  }\n\n  /** @internal */\n  static _fromStartTotpMfaEnrollmentResponse(\n    response: StartTotpMfaEnrollmentResponse,\n    auth: AuthInternal\n  ): TotpSecret {\n    return new TotpSecret(\n      response.totpSessionInfo.sharedSecretKey,\n      response.totpSessionInfo.hashingAlgorithm,\n      response.totpSessionInfo.verificationCodeLength,\n      response.totpSessionInfo.periodSec,\n      new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(),\n      response.totpSessionInfo.sessionInfo,\n      auth\n    );\n  }\n\n  /** @internal */\n  _makeTotpVerificationInfo(otp: string): TotpVerificationInfo {\n    return { sessionInfo: this.sessionInfo, verificationCode: otp };\n  }\n\n  /**\n   * Returns a QR code URL as described in\n   * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n   * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n   * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n   *\n   * @param accountName the name of the account/app along with a user identifier.\n   * @param issuer issuer of the TOTP (likely the app name).\n   * @returns A QR code URL string.\n   */\n  generateQrCodeUrl(accountName?: string, issuer?: string): string {\n    let useDefaults = false;\n    if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n      useDefaults = true;\n    }\n    if (useDefaults) {\n      if (_isEmptyString(accountName)) {\n        accountName = this.auth.currentUser?.email || 'unknownuser';\n      }\n      if (_isEmptyString(issuer)) {\n        issuer = this.auth.name;\n      }\n    }\n    return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n  }\n}\n\n/** @internal */\nfunction _isEmptyString(input?: string): boolean {\n  return typeof input === 'undefined' || input?.length === 0;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Unsubscribe } from '@firebase/util';\nimport { FirebaseAuthInternal } from '@firebase/auth-interop-types';\n\nimport { AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { _assert } from '../util/assert';\nimport { AuthErrorCode } from '../errors';\n\ninterface TokenListener {\n  (tok: string | null): unknown;\n}\n\nexport class AuthInterop implements FirebaseAuthInternal {\n  private readonly internalListeners: Map<TokenListener, Unsubscribe> =\n    new Map();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  getUid(): string | null {\n    this.assertAuthConfigured();\n    return this.auth.currentUser?.uid || null;\n  }\n\n  async getToken(\n    forceRefresh?: boolean\n  ): Promise<{ accessToken: string } | null> {\n    this.assertAuthConfigured();\n    await this.auth._initializationPromise;\n    if (!this.auth.currentUser) {\n      return null;\n    }\n\n    const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n    return { accessToken };\n  }\n\n  addAuthTokenListener(listener: TokenListener): void {\n    this.assertAuthConfigured();\n    if (this.internalListeners.has(listener)) {\n      return;\n    }\n\n    const unsubscribe = this.auth.onIdTokenChanged(user => {\n      listener(\n        (user as UserInternal | null)?.stsTokenManager.accessToken || null\n      );\n    });\n    this.internalListeners.set(listener, unsubscribe);\n    this.updateProactiveRefresh();\n  }\n\n  removeAuthTokenListener(listener: TokenListener): void {\n    this.assertAuthConfigured();\n    const unsubscribe = this.internalListeners.get(listener);\n    if (!unsubscribe) {\n      return;\n    }\n\n    this.internalListeners.delete(listener);\n    unsubscribe();\n    this.updateProactiveRefresh();\n  }\n\n  private assertAuthConfigured(): void {\n    _assert(\n      this.auth._initializationPromise,\n      AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH\n    );\n  }\n\n  private updateProactiveRefresh(): void {\n    if (this.internalListeners.size > 0) {\n      this.auth._startProactiveRefresh();\n    } else {\n      this.auth._stopProactiveRefresh();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\n\nimport {\n  initializeAuth,\n  beforeAuthStateChanged,\n  onIdTokenChanged,\n  connectAuthEmulator\n} from '..';\nimport { registerAuth } from '../core/auth/register';\nimport { ClientPlatform } from '../core/util/version';\nimport { browserLocalPersistence } from './persistence/local_storage';\nimport { browserSessionPersistence } from './persistence/session_storage';\nimport { indexedDBLocalPersistence } from './persistence/indexed_db';\nimport { browserPopupRedirectResolver } from './popup_redirect';\nimport { Auth, User } from '../model/public_types';\nimport { getDefaultEmulatorHost, getExperimentalSetting } from '@firebase/util';\n\nconst DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\nconst authIdTokenMaxAge =\n  getExperimentalSetting('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;\n\nlet lastPostedIdToken: string | undefined | null = null;\n\nconst mintCookieFactory = (url: string) => async (user: User | null) => {\n  const idTokenResult = user && (await user.getIdTokenResult());\n  const idTokenAge =\n    idTokenResult &&\n    (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1_000;\n  if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\n    return;\n  }\n  // Specifically trip null => undefined when logged out, to delete any existing cookie\n  const idToken = idTokenResult?.token;\n  if (lastPostedIdToken === idToken) {\n    return;\n  }\n  lastPostedIdToken = idToken;\n  await fetch(url, {\n    method: idToken ? 'POST' : 'DELETE',\n    headers: idToken\n      ? {\n          'Authorization': `Bearer ${idToken}`\n        }\n      : {}\n  });\n};\n\n/**\n * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\n * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\n *\n * @param app - The Firebase App.\n *\n * @public\n */\nexport function getAuth(app: FirebaseApp = getApp()): Auth {\n  const provider = _getProvider(app, 'auth');\n\n  if (provider.isInitialized()) {\n    return provider.getImmediate();\n  }\n\n  const auth = initializeAuth(app, {\n    popupRedirectResolver: browserPopupRedirectResolver,\n    persistence: [\n      indexedDBLocalPersistence,\n      browserLocalPersistence,\n      browserSessionPersistence\n    ]\n  });\n\n  const authTokenSyncUrl = getExperimentalSetting('authTokenSyncURL');\n  if (authTokenSyncUrl) {\n    const mintCookie = mintCookieFactory(authTokenSyncUrl);\n    beforeAuthStateChanged(auth, mintCookie, () =>\n      mintCookie(auth.currentUser)\n    );\n    onIdTokenChanged(auth, user => mintCookie(user));\n  }\n\n  const authEmulatorHost = getDefaultEmulatorHost('auth');\n  if (authEmulatorHost) {\n    connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n  }\n\n  return auth;\n}\n\nregisterAuth(ClientPlatform.BROWSER);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\n\nimport { name, version } from '../../../package.json';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _getClientVersion, ClientPlatform } from '../util/version';\nimport { _castAuth, AuthImpl, DefaultConfig } from './auth_impl';\nimport { AuthInterop } from './firebase_internal';\nimport { ConfigInternal } from '../../model/auth';\nimport { Dependencies } from '../../model/public_types';\nimport { _initializeAuthInstance } from './initialize';\n\nexport const enum _ComponentName {\n  AUTH = 'auth',\n  AUTH_INTERNAL = 'auth-internal'\n}\n\nfunction getVersionForPlatform(\n  clientPlatform: ClientPlatform\n): string | undefined {\n  switch (clientPlatform) {\n    case ClientPlatform.NODE:\n      return 'node';\n    case ClientPlatform.REACT_NATIVE:\n      return 'rn';\n    case ClientPlatform.WORKER:\n      return 'webworker';\n    case ClientPlatform.CORDOVA:\n      return 'cordova';\n    default:\n      return undefined;\n  }\n}\n\n/** @internal */\nexport function registerAuth(clientPlatform: ClientPlatform): void {\n  _registerComponent(\n    new Component(\n      _ComponentName.AUTH,\n      (container, { options: deps }: { options?: Dependencies }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const heartbeatServiceProvider =\n          container.getProvider<'heartbeat'>('heartbeat');\n        const appCheckServiceProvider =\n          container.getProvider<'app-check-internal'>('app-check-internal');\n        const { apiKey, authDomain } = app.options;\n\n        _assert(\n          apiKey && !apiKey.includes(':'),\n          AuthErrorCode.INVALID_API_KEY,\n          { appName: app.name }\n        );\n\n        const config: ConfigInternal = {\n          apiKey,\n          authDomain,\n          clientPlatform,\n          apiHost: DefaultConfig.API_HOST,\n          tokenApiHost: DefaultConfig.TOKEN_API_HOST,\n          apiScheme: DefaultConfig.API_SCHEME,\n          sdkClientVersion: _getClientVersion(clientPlatform)\n        };\n\n        const authInstance = new AuthImpl(\n          app,\n          heartbeatServiceProvider,\n          appCheckServiceProvider,\n          config\n        );\n        _initializeAuthInstance(authInstance, deps);\n\n        return authInstance;\n      },\n      ComponentType.PUBLIC\n    )\n      /**\n       * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n       * For why we do this, See go/firebase-next-auth-init\n       */\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Because all firebase products that depend on auth depend on auth-internal directly,\n       * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n       */\n      .setInstanceCreatedCallback(\n        (container, _instanceIdentifier, _instance) => {\n          const authInternalProvider = container.getProvider(\n            _ComponentName.AUTH_INTERNAL\n          );\n          authInternalProvider.initialize();\n        }\n      )\n  );\n\n  _registerComponent(\n    new Component(\n      _ComponentName.AUTH_INTERNAL,\n      container => {\n        const auth = _castAuth(\n          container.getProvider(_ComponentName.AUTH).getImmediate()!\n        );\n        return (auth => new AuthInterop(auth))(auth);\n      },\n      ComponentType.PRIVATE\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version, getVersionForPlatform(clientPlatform));\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n"],"names":["isEnterprise","grecaptcha","undefined","enterprise","RecaptchaConfig","_createClass","response","_classCallCheck","siteKey","emailPasswordEnabled","recaptchaKey","Error","this","split","recaptchaEnforcementState","some","enforcementState","provider","_prodErrorMap","_defineProperty","prodErrorMap","_DEFAULT_AUTH_ERROR_FACTORY","ErrorFactory","logClient","Logger","_logWarn","msg","logLevel","LogLevel","_len","arguments","length","args","Array","_key2","warn","apply","concat","SDK_VERSION","_logError","_len2","_key3","error","_fail","authOrCode","_len3","rest","_key4","createErrorInternal","_createError","_len4","_key5","_errorWithCustomMessage","auth","code","message","errorMap","Object","assign","create","appName","name","_len5","_key6","_authOrCode$_errorFac","fullParams","_toConsumableArray","slice","_errorFactory","_assert","assertion","_len6","_key7","debugFail","failure","debugAssert","_getCurrentUrl","self","_a","location","href","_isHttpOrHttps","_getCurrentScheme","protocol","Delay","shortDelay","longDelay","isMobile","isMobileCordova","isReactNative","key","value","navigator","onLine","isBrowserExtension","Math","min","_emulatorUrl","config","path","emulator","url","startsWith","FetchProvider","fetchImpl","headersImpl","responseImpl","fetch","Headers","Response","SERVER_ERROR_MAP","_SERVER_ERROR_MAP","DEFAULT_API_TIMEOUT_MS","_addTidIfNecessary","request","tenantId","_performApiRequest","_x","_x2","_x3","_x4","_performApiRequest2","_asyncToGenerator","_regeneratorRuntime","mark","_callee101","method","customErrorMap","_args101","wrap","_context101","prev","next","abrupt","_performFetchWithErrorHandling","_callee100","body","params","query","headers","_context100","JSON","stringify","querystring","apiKey","_getAdditionalHeaders","sent","languageCode","_getFinalTarget","apiHost","referrerPolicy","stop","_x5","_x6","_x7","_performFetchWithErrorHandling2","_callee102","fetchFn","networkTimeout","json","errorMessage","_errorMessage$split","_errorMessage$split2","serverErrorCode","serverErrorMessage","authError","_context102","_canInitEmulator","NetworkTimeout","Promise","race","promise","clearNetworkTimeout","_makeTaggedError","ok","_slicedToArray","toLowerCase","replace","t0","FirebaseError","String","_performSignInRequest","_x8","_x9","_x10","_x11","_performSignInRequest2","_callee103","serverResponse","_args103","_context103","_serverResponse","host","base","apiScheme","_this","timer","_","reject","setTimeout","get","clearTimeout","errorParams","email","phoneNumber","customData","_tokenResponse","getRecaptchaConfig","_x13","_x14","_getRecaptchaConfig","_callee105","_context105","deleteAccount","_x15","_x16","_deleteAccount","_callee106","_context106","getAccountInfo","_x19","_x20","_getAccountInfo","_callee108","_context108","utcTimestampToDateString","utcTimestamp","date","Date","Number","isNaN","getTime","toUTCString","e","_getIdTokenResult","_callee109","user","forceRefresh","userInternal","token","claims","firebase","signInProvider","_args109","_context109","getModularInstance","getIdToken","_parseToken","exp","auth_time","iat","authTime","secondsStringToMilliseconds","issuedAtTime","expirationTime","signInSecondFactor","seconds","_token$split","_token$split2","algorithm","payload","signature","decoded","base64Decode","parse","toString","_logoutIfInvalidated","_x22","_x23","_logoutIfInvalidated2","_callee110","_args110","_context110","isUserInvalidated","currentUser","signOut","_ref3","ProactiveRefresh","isRunning","timerId","errorBackoff","schedule","wasError","interval","stsTokenManager","now","max","_this2","getInterval","_callee","_context","iteration","_iteration","_callee2","_context2","UserMetadata","createdAt","lastLoginAt","_initializeTime","lastSignInTime","creationTime","metadata","_reloadWithoutSaving","_x24","_reloadWithoutSaving2","_callee111","idToken","coreAccount","newProviderData","providerData","oldIsAnonymous","newIsAnonymous","isAnonymous","updates","_context111","users","_notifyReloadListener","providerUserInfo","extractProviderData","mergeProviderData","passwordHash","uid","localId","displayName","photoURL","photoUrl","emailVerified","_reload","_callee112","_context112","_persistUserIfCurrent","_notifyListenersIfCurrent","original","newData","deduped","filter","o","n","providerId","providers","map","__rest","rawId","requestStsToken","_x26","_x27","_requestStsToken","_callee114","refreshToken","_context114","_callee113","_auth$config","tokenApiHost","_context113","accessToken","access_token","expiresIn","expires_in","refresh_token","StsTokenManager","parsedToken","_tokenExpiresIn","updateTokensAndExpiration","_getToken","_callee3","_args3","_context3","isExpired","refresh","_x28","_refresh","_callee4","oldToken","_yield$requestStsToke","_context4","_x29","_x30","expiresInSec","toJSON","object","manager","assertStringOrUndefined","UserImpl","opt","proactiveRefresh","reloadUserInfo","reloadListener","_getIdToken","_callee5","_context5","getToken","_x31","_x21","getIdTokenResult","_x25","reload","userInfo","_copy","_assign","newUser","_clone","callback","_start","_stop","_updateTokensIfNecessary2","_callee6","tokensRefreshed","_args6","_context6","updateFromServerResponse","_x32","_delete2","_callee7","_context7","clearRefreshToken","_redirectEventId","_b","_c","_d","_e","_f","_g","_h","plainObjectTokenManager","fromJSON","isArray","_fromIdTokenResponse2","_callee8","idTokenResponse","_args8","_context8","_x33","_x34","instanceCache","Map","_getInstance","cls","Function","instance","set","InMemoryPersistence","type","storage","_isAvailable2","_callee9","_context9","_set2","_callee10","_context10","_x35","_x36","_get2","_callee11","_context11","_x37","_remove2","_callee12","_context12","_x38","_key","_listener","inMemoryPersistence","_persistenceKeyName","PersistenceUserManager","persistence","userKey","_this$auth","fullUserKey","fullPersistenceKey","boundEventHandler","_onStorageEvent","bind","_addListener","_set","_getCurrentUser","_callee13","blob","_context13","_get","_fromJSON","_remove","_setPersistence","_callee14","newPersistence","_context14","getCurrentUser","removeCurrentUser","setCurrentUser","_x39","_removeListener","_create","_callee17","persistenceHierarchy","availablePersistences","selectedPersistence","userToMigrate","_iterator","_step","migrationHierarchy","_args17","_context17","all","_ref5","_callee15","_context15","_isAvailable","_x42","s","done","t1","f","finish","p","_shouldAllowMigration","_ref6","_callee16","_context16","_x43","_x40","_x41","_getBrowserName","userAgent","ua","includes","_isIEMobile","_isFirefox","_isBlackBerry","_isWebOS","_isSafari","_isChromeIOS","_isAndroid","matches","match","getUA","test","_isIOS","_isIOSStandalone","window","standalone","_isIE10","isIE","document","documentMode","_isMobileBrowser","_getClientVersion","clientPlatform","reportedPlatform","frameworks","reportedFrameworks","join","AuthMiddlewareQueue","queue","onAbort","_this3","wrappedCallback","resolve","push","index","_runMiddleware","_callee18","nextUser","onAbortStack","_iterator2","_step2","beforeStateCallback","_iterator3","_step3","_context18","_createForOfIteratorHelper","reverse","err","originalMessage","_x44","_getPasswordPolicy","_x45","_getPasswordPolicy2","_callee115","_args115","_context115","PasswordPolicyImpl","responseOptions","customStrengthOptions","minPasswordLength","maxPasswordLength","containsLowercaseCharacter","containsLowercaseLetter","containsUppercaseCharacter","containsUppercaseLetter","containsNumericCharacter","containsNonAlphanumericCharacter","allowedNonAlphanumericCharacters","forceUpgradeOnSignin","schemaVersion","password","status","isValid","passwordPolicy","validatePasswordLengthOptions","validatePasswordCharacterOptions","meetsMinPasswordLength","meetsMaxPasswordLength","passwordChar","updatePasswordCharacterOptionsStatuses","i","charAt","AuthImpl","app","heartbeatServiceProvider","appCheckServiceProvider","emulatorConfig","operations","authStateSubscription","Subscription","idTokenSubscription","beforeStateQueue","redirectUser","isProactiveRefreshEnabled","EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION","_isInitialized","_deleted","_initializationPromise","_popupRedirectResolver","_agentRecaptchaConfig","_tenantRecaptchaConfigs","_projectPasswordPolicy","_tenantPasswordPolicies","lastNotifiedUid","settings","appVerificationDisabledForTesting","clientVersion","sdkClientVersion","popupRedirectResolver","_this4","_callee19","_context19","persistenceManager","_shouldInitProactively","_initialize","initializeCurrentUser","_onStorageEvent2","_callee20","_context20","assertedPersistence","_currentUser","_updateCurrentUser","_initializeCurrentUser","_callee21","previouslyStoredUser","futureCurrentUser","needsTocheckMiddleware","redirectUserEventId","storedUserEventId","result","_context21","authDomain","getOrInitRedirectPersistenceManager","tryRedirectSignIn","directlySetCurrentUser","runMiddleware","_overrideRedirectResult","reloadAndSetCurrentUserOrClear","_x46","_tryRedirectSignIn","_callee22","redirectResolver","_context22","_completeRedirectFn","_setRedirectUser","_x47","_reloadAndSetCurrentUserOrClear","_callee23","_context23","_x48","navigatorLanguage","languages","language","_getUserLanguage","_delete3","_callee24","_context24","_updateCurrentUser2","_callee25","userExtern","_context25","_x49","_updateCurrentUser3","_callee27","skipBeforeStateCallbacks","_this5","_args27","_context27","_callee26","_context26","notifyAuthListeners","_x50","_signOut","_callee28","_context28","redirectPersistenceManager","_this6","_callee29","_context29","setPersistence","_validatePassword","_callee30","_context30","_getPasswordPolicyInternal","_updatePasswordPolicy","validatePassword","_x51","_updatePasswordPolicy2","_callee31","_context31","nextOrObserver","completed","registerStateListener","pushCallback","_this7","unsubscribe","onAuthStateChanged","_setRedirectUser2","_callee32","redirectManager","_context32","_x52","_x53","_getOrInitRedirectPersistenceManager","_callee33","resolver","_context33","_redirectPersistence","_x54","_redirectUserForId2","_callee35","id","_context35","_callee34","_context34","_x55","_persistUserIfCurrent2","_callee37","_this8","_context37","_callee36","_context36","_x56","_startProactiveRefresh","_stopProactiveRefresh","currentUid","subscription","_this9","cb","isUnsubscribed","then","addObserver","_directlySetCurrentUser","_callee38","_context38","_x57","action","framework","sort","_getFrameworks","_getAdditionalHeaders2","_callee39","heartbeatsHeader","appCheckToken","_context39","options","appId","getImmediate","optional","getHeartbeatsHeader","_getAppCheckToken","_getAppCheckToken2","_callee40","appCheckTokenResult","_context40","_castAuth","_this10","observer","createSubscribe","_loadJS","el","createElement","setAttribute","onload","onerror","charset","getElementsByTagName","getScriptParentElement","appendChild","_generateCallbackName","prefix","floor","random","RECAPTCHA_ENTERPRISE_URL","FAKE_TOKEN","RecaptchaEnterpriseVerifier","authExtern","_verify","_callee43","retrieveSiteKey","_retrieveSiteKey","retrieveRecaptchaToken","_this11","_args43","_context43","ready","execute","catch","_callee42","_context42","_ref12","_callee41","_context41","clientType","version","_x59","_x60","_x58","injectRecaptchaFields","_x61","_x62","_x63","_injectRecaptchaFields","_callee116","captchaResp","verifier","captchaResponse","newRequest","_args116","_context116","verify","initializeAuth","deps","_getProvider","isInitialized","initialOptions","getOptions","deepEqual","initialize","connectAuthEmulator","authInternal","disableWarnings","extractProtocol","_extractHostAndPort","authority","exec","substr","port","hostAndPort","pop","bracketedIPv6","parsePort","_hostAndPort$split","_hostAndPort$split2","extractHostAndPort","portStr","freeze","attachBanner","sty","style","innerText","position","width","backgroundColor","border","color","bottom","left","margin","zIndex","textAlign","classList","add","console","info","readyState","addEventListener","emitEmulatorWarning","protocolEnd","indexOf","AuthCredential","signInMethod","_auth","_idToken","updateEmailPassword","_x67","_x68","_updateEmailPassword","_callee119","_context119","signInWithPassword","_x71","_x72","_signInWithPassword","_callee121","_context121","signInWithEmailLink$1","_x83","_x84","_signInWithEmailLink$","_callee127","_context127","signInWithEmailLinkForLinking","_x85","_x86","_signInWithEmailLinkForLinking","_callee128","_context128","EmailAuthCredential","_AuthCredential","_inherits","_super","_createSuper","_email","_password","_this12","_tenantId","call","_callee45","requestWithRecaptcha","_context45","returnSecureToken","_ref13","_callee44","_requestWithRecaptcha","_context44","log","_x88","oobCode","_x87","_getIdTokenResponse2","_callee46","_context46","_x89","_x90","_linkToIdToken2","_getIdTokenResponse","obj","_fromEmailAndPassword","_fromEmailAndCode","signInWithIdp","_x91","_x92","_signInWithIdp","_callee129","_context129","OAuthCredential","_AuthCredential2","_super2","_this13","pendingToken","secret","nonce","buildRequest","autoCreate","requestUri","postBody","cred","oauthToken","oauthTokenSecret","sendPhoneVerificationCode","_x93","_x94","_sendPhoneVerificationCode","_callee130","_context130","_signInWithPhoneNumber$","_callee131","_context131","_linkWithPhoneNumber$","_callee132","_context132","temporaryProof","VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_","_verifyPhoneNumberForExisting","_callee133","apiRequest","_context133","operation","PhoneAuthCredential","_AuthCredential3","_super3","_this14","_x95","_x96","signInWithPhoneNumber$1","_makeVerificationRequest","_x97","_x98","linkWithPhoneNumber$1","_x99","_x100","verifyPhoneNumberForExisting","_this$params","verificationId","verificationCode","sessionInfo","_json","ActionCodeURL","actionLink","searchParams","querystringDecode","extractQuerystring","mode","parseMode","continueUrl","link","doubleDeepLink","iOSDeepLink","parseDeepLink","EmailAuthProvider","PROVIDER_ID","emailLink","actionCodeUrl","parseLink","EMAIL_PASSWORD_SIGN_IN_METHOD","EMAIL_LINK_SIGN_IN_METHOD","FederatedAuthProvider","defaultLanguageCode","customParameters","customOAuthParameters","BaseOAuthProvider","_FederatedAuthProvide","_super4","_this15","scopes","scope","FacebookAuthProvider","_BaseOAuthProvider2","_super6","_fromParams","FACEBOOK_SIGN_IN_METHOD","userCredential","credentialFromTaggedObject","_ref15","tokenResponse","oauthAccessToken","credential","GoogleAuthProvider","_BaseOAuthProvider3","_super7","_this16","addScope","GOOGLE_SIGN_IN_METHOD","_ref16","oauthIdToken","GithubAuthProvider","_BaseOAuthProvider4","_super8","GITHUB_SIGN_IN_METHOD","_ref17","TwitterAuthProvider","_BaseOAuthProvider5","_super11","TWITTER_SIGN_IN_METHOD","_ref19","signUp","_x101","_x102","_signUp","_callee134","_context134","UserCredentialImpl","operationType","_fromIdTokenResponse3","_callee47","userCred","_args47","_context47","_fromIdTokenResponse","providerIdForResponse","_x103","_x104","_x105","_forOperation2","_callee48","_context48","_updateTokensIfNecessary","_x106","_x107","_x108","MultiFactorError","_FirebaseError","_super12","_this18","setPrototypeOf","_assertThisInitialized","prototype","_processCredentialSavingMfaContextIfNecessary","_getReauthenticationResolver","_fromErrorAndOperation","_link$1","_x112","_x113","_link$","_callee137","bypassAuthState","_args137","_context137","t2","t3","t4","t5","_linkToIdToken","t6","_forOperation","_reauthenticate","_x117","_x118","_reauthenticate2","_callee139","parsed","_args139","_context139","sub","_signInWithCredential","_x119","_x120","_signInWithCredential2","_callee140","_args140","_context140","signInWithCredential","_x121","_x122","_signInWithCredential3","_callee141","_context141","recachePasswordPolicy","_x131","_recachePasswordPolicy","_callee146","_context146","createUserWithEmailAndPassword","_x144","_x145","_x146","_createUserWithEmailAndPassword","_callee155","signUpResponse","_context155","_ref45","_callee154","_requestWithRecaptcha3","_context154","_x279","signInWithEmailAndPassword","_ref21","_callee49","_context49","_x147","onIdTokenChanged","beforeAuthStateChanged","startEnrollPhoneMfa","finalizeEnrollTotpMfa","WeakMap","STORAGE_AVAILABLE_KEY","BrowserPersistenceClass","storageRetriever","setItem","removeItem","getItem","BrowserLocalPersistence","_BrowserPersistenceCl","_super20","_this22","localStorage","event","poll","onStorageEvent","listeners","localCache","pollTimer","safariLocalStorageNotSynced","_iframeCannotSyncWebStorage","top","_isIframe","fallbackToPolling","_i","_Object$keys","keys","newValue","oldValue","_this23","detachListener","stopPolling","storedValue","triggerListeners","notifyListeners","forAllChangedKeys","_oldValue","_i2","_Array$from","from","listener","_this24","setInterval","StorageEvent","clearInterval","removeEventListener","startPolling","attachListener","Set","delete","size","_callee55","_context55","_get3","_getPrototypeOf","_x178","_x179","_set3","_get4","_callee56","_context56","_x180","_remove3","_callee57","_context57","_x181","browserLocalPersistence","BrowserSessionPersistence","_BrowserPersistenceCl2","_super21","sessionStorage","browserSessionPersistence","_allSettled","promises","_ref25","_callee58","_context58","fulfilled","reason","_x182","Receiver","eventTarget","handlersMap","handleEvent","_handleEvent","_callee60","messageEvent","_messageEvent$data","eventId","eventType","data","handlers","_context60","ports","postMessage","_ref26","_callee59","handler","_context59","origin","_x184","_x183","eventHandler","existingInstance","receivers","find","receiver","isListeningto","newInstance","_generateEventId","digits","Sender","target","messageChannel","port1","onMessage","close","_send2","_callee61","timeout","completionTimer","_this25","_args61","_context61","MessageChannel","start","ackTimer","port2","finally","removeMessageHandler","_x185","_x186","_window","_setWindowLocation","_isWorker","_getActiveServiceWorker","_getActiveServiceWorker2","_callee168","registration","_context168","serviceWorker","active","_getServiceWorkerController","controller","DB_NAME","DB_OBJECTSTORE_NAME","DB_DATA_KEYPATH","DBPromise","_this26","getObjectStore","db","isReadWrite","transaction","objectStore","_deleteDatabase","indexedDB","deleteDatabase","toPromise","_openDatabase","open","createObjectStore","keyPath","_callee62","_context62","objectStoreNames","contains","_putObject","_x187","_x188","_x189","_putObject2","_callee169","_getObjectStore$put","_context169","put","getObject","_x190","_x191","_getObject","_callee170","_context170","_deleteObject","IndexedDBLocalPersistence","pendingWrites","sender","serviceWorkerReceiverAvailable","activeServiceWorker","_workerInitializationPromise","initializeServiceWorkerMessaging","_openDb2","_callee63","_context63","_withRetries2","_callee64","op","numAttempts","_context64","_openDb","_x192","_initializeServiceWorkerMessaging","_callee65","_context65","initializeReceiver","initializeSender","_initializeReceiver","_callee68","_this27","_context68","_subscribe","_ref28","_callee66","_origin","_context66","_poll","keyProcessed","_x193","_x194","_ref29","_callee67","_data","_context67","_x195","_x196","_initializeSender","_callee69","results","_context69","_send","_notifyServiceWorker","_callee70","_context70","_x197","_isAvailable3","_callee71","_context71","_withPendingWrite2","_callee72","write","_context72","_x198","_set4","_callee74","_this28","_context74","_withPendingWrite","_callee73","_context73","_withRetries","notifyServiceWorker","_x199","_x200","_get5","_callee75","_context75","_x201","_remove4","_callee77","_this29","_context77","_callee76","_context76","_x202","_poll2","_callee78","keysInResult","_iterator4","_step4","_step4$value","_i3","_Object$keys2","localKey","_context78","getAllRequest","getAll","fbase_key","has","_i4","_Array$from2","_this30","_callee79","_context79","indexedDBLocalPersistence","startSignInPhoneMfa","finalizeSignInTotpMfa","RECAPTCHA_VERIFIER_TYPE","_verifyPhoneNumber","_x214","_x215","_x216","_verifyPhoneNumber2","_callee174","recaptchaToken","phoneInfoOptions","session","mfaEnrollmentId","_response","_yield$sendPhoneVerif","_context174","phoneEnrollmentInfo","phoneSessionInfo","multiFactorHint","multiFactorUid","mfaPendingCredential","phoneSignInInfo","phoneResponseInfo","_reset","PhoneAuthProvider","phoneOptions","applicationVerifier","_fromVerification","_ref33","_fromTokenResponse","_withDefaultResolver","resolverOverride","PHONE_SIGN_IN_METHOD","IdpCredential","_AuthCredential5","_super22","_this38","_buildIdpRequest","sessionId","returnIdpCredential","_signIn","_reauth","_link","_x219","_link2","_callee176","_context176","AbstractPopupRedirectOperation","pendingPromise","eventManager","_this39","_ref34","_callee85","_context85","onExecution","registerConsumer","_x220","_x221","_onAuthEvent","_callee86","urlResponse","_context86","getIdpTask","_x222","unregisterAndCleanUp","unregisterConsumer","cleanUp","_POLL_WINDOW_CLOSE_TIMEOUT","PopupOperation","_AbstractPopupRedirec","_super23","_this40","authWindow","pollId","currentPopupAction","cancel","_executeNotNull","_callee87","_context87","_onExecution","_callee88","_this41","_context88","_openPopup","associatedEvent","_originValidation","_isIframeWebStorageSupported","isSupported","pollUserCancellation","_this42","closed","redirectOutcomeMap","RedirectAction","_AbstractPopupRedirec2","_super24","_this43","_execute2","_callee89","readyOutcome","_context89","_getAndClearPendingRedirectStatus","_onAuthEvent2","_callee90","_context90","_redirectUserForId","_x232","_onExecution2","_callee91","_context91","_x233","_x234","_getAndClearPendingRedirectStatus2","_callee180","hasPendingRedirect","_context180","pendingRedirectKey","resolverPersistence","_getRedirectResult","_x248","_x249","_getRedirectResult3","_callee186","resolverExtern","_args186","_context186","AuthEventManager","cachedEventUids","consumers","queuedRedirectEvent","hasHandledPotentialRedirect","lastProcessedEventTime","authEventConsumer","isEventForConsumer","sendToConsumer","saveEventToCache","_this44","hasEventBeenHandled","handled","forEach","consumer","isNullRedirectEvent","isRedirectEvent","onError","onAuthEvent","eventIdMatches","clear","eventUid","v","_ref35","_getProjectConfig","_x251","_getProjectConfig2","_callee188","_args188","_context188","IP_ADDRESS_REGEX","HTTP_REGEX","_validateOrigin2","_callee189","_yield$_getProjectCon","authorizedDomains","_iterator5","_step5","domain","_context189","matchDomain","expected","currentUrl","_URL","URL","hostname","ceUrl","escapedDomainPattern","RegExp","NETWORK_TIMEOUT","resetUnloadedGapiModules","beacon","___jsl","H","_i5","_Object$keys3","hint","r","L","CP","cachedGApiLoader","_loadGapi","loadGapiIframe","gapi","load","iframes","getContext","ontimeout","Iframe","cbName","loadGapi","PING_TIMEOUT","IFRAME_ATTRIBUTES","height","tabindex","EID_FROM_APIHOST","getIframeUrl","eid","fw","_openIframe","_x253","_openIframe2","_callee191","context","_context191","where","messageHandlersFilter","CROSS_ORIGIN_IFRAMES_FILTER","attributes","dontclear","iframe","_ref48","_callee190","networkError","networkErrorTimer","clearTimerAndResolve","_context190","restyle","setHideOnLeave","ping","_x281","_x282","BASE_POPUP_OPTIONS","resizable","statusbar","toolbar","TARGET_BLANK","FIREFOX_EMPTY_URL","AuthPopup","_open","screen","availHeight","availWidth","scrollbars","optionsString","entries","reduce","accum","_ref36","_ref37","openAsNewWindowIOS","newWin","focus","click","createEvent","initMouseEvent","dispatchEvent","FIREBASE_APP_CHECK_FRAGMENT_ID","encodeURIComponent","_getRedirectUrl","_x254","_x255","_x256","_x257","_x258","_x259","_getRedirectUrl2","_callee192","authType","redirectUrl","additionalParams","_i6","_Object$entries","_Object$entries$_i","paramsDict","_i7","_Object$keys4","_key8","appCheckTokenFragment","_context192","setDefaultLanguage","isEmpty","getCustomParameters","getScopes","tid","getHandlerBase","_ref38","WEB_STORAGE_SUPPORT_KEY","BrowserPopupRedirectResolver","eventManagers","originValidationPromises","_callee92","_context92","_x260","_x261","_x262","_x263","_openPopup2","_openRedirect2","_callee93","_context93","_x264","_x265","_x266","_x267","_this45","_this$eventManagers$k","initAndGetManager","_initAndGetManager","_callee94","_context94","register","iframeEvent","authEvent","onEvent","_x268","send","_x252","_validateOrigin","browserPopupRedirectResolver","MultiFactorAssertionImpl","factorId","_finalizeEnroll","_finalizeSignIn","PhoneMultiFactorAssertionImpl","_MultiFactorAssertion","_super25","_this46","finalizeEnrollPhoneMfa","phoneVerificationInfo","finalizeSignInPhoneMfa","PhoneMultiFactorGenerator","_fromCredential","FACTOR_ID","TotpMultiFactorGenerator","oneTimePassword","TotpMultiFactorAssertionImpl","_fromSecret","enrollmentId","_fromEnrollmentId","_generateSecret","_callee95","mfaSession","_context95","totpEnrollmentInfo","TotpSecret","_fromStartTotpMfaEnrollmentResponse","_x269","_MultiFactorAssertion2","_super26","otp","_this47","_callee96","_context96","totpVerificationInfo","_makeTotpVerificationInfo","_x270","_x271","_x272","_finalizeEnroll2","_callee97","_context97","_x273","_x274","_finalizeSignIn2","secretKey","hashingAlgorithm","codeLength","codeIntervalSeconds","enrollmentCompletionDeadline","accountName","issuer","useDefaults","_isEmptyString","totpSessionInfo","sharedSecretKey","verificationCodeLength","periodSec","finalizeEnrollmentTime","input","AuthInterop","internalListeners","assertAuthConfigured","_getToken2","_callee98","_context98","_x275","updateProactiveRefresh","authIdTokenMaxAge","getExperimentalSetting","lastPostedIdToken","mintCookieFactory","_ref40","_callee99","idTokenResult","idTokenAge","_context99","_x276","getAuth","getApp","authTokenSyncUrl","mintCookie","authEmulatorHost","getDefaultEmulatorHost","_registerComponent","Component","container","_ref39","getProvider","_app$options","authInstance","hierarchy","_updateErrorMap","_initializeWithPersistence","_initializeAuthInstance","setInstantiationMode","setInstanceCreatedCallback","_instanceIdentifier","_instance","registerVersion","getVersionForPlatform"],"sourceRoot":""}